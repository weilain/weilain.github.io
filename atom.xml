<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hermoso</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.webpages.show/"/>
  <updated>2020-08-10T07:43:18.032Z</updated>
  <id>https://www.webpages.show/</id>
  
  <author>
    <name>Hermoso</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo 添加自定义单静态页面 跳过hexo渲染</title>
    <link href="https://www.webpages.show/p/6ea05e36/"/>
    <id>https://www.webpages.show/p/6ea05e36/</id>
    <published>2020-08-10T07:00:09.177Z</published>
    <updated>2020-08-10T07:43:18.032Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="前言">前言</span></h3><p>Hexo默认会对<code>/source/</code>里的所有页面应用主题模板渲染，但有一些前端作品或demo页我们不希望经过渲染，而是能保持完全自定义的样子</p><p>例如：</p><ol><li>主题内渲染，添加的模块仍在主题内，主题头部信息依然存在，仅仅是在特定区域进行渲染（适合添加 about 页面）</li><li>完全页面渲染，在主题内点击对应链接跳转到一个完全崭新的页面（我需要的）</li></ol><h3><span id="hexo-的执行逻辑">hexo 的执行逻辑</span></h3><p>source 文件夹下存放了待被转化的 markdown 文件，在执行<code>hexo g</code>命令时，source 目录下的文件将被转化为 html 文件。</p><h3><span id="介绍两种方法">介绍两种方法：</span></h3><p>一. 使用Hexo提供的跳过渲染配置，适用于整个目录的设置。</p><p>具体步骤，打开博客根目录<code>_config.yml</code>，找到其中<code>skip_render</code>项，这个项目用来配置<code>/source/</code>中需要跳过渲染的文件或目录，</p><p>例如希望跳过<code>/source/navi/</code>里的所有文件渲染（这样我们就可以将自己的作品放在这个文件夹中，然后可以通过自己的网址/navi/…访问了)</p><p>可以配置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: navi&#x2F;**</span><br></pre></td></tr></table></figure><ul><li><code>source/navi/</code>目录下添加「工具盒」源文件</li><li>在站点配置文件<code>_config.yml</code>中配置<code>skin_render</code>项，如：<code>skip_render: navi/**</code>，这样projects文件夹下的所以文件内容将不会转化为 html，直接被 copy 到 public 文件夹</li><li>在「工具盒」文件夹下添加 index.html 文件用于渲染自定义页面</li></ul><p>完成以上步骤即可点击「工具盒」菜单导航，完成自定义页面的展示。</p><p>修改了配置但生成出来的内容不一定及时应用了新配置，最好在生成之前执行一下<code>hexo clean</code>命令，清除掉旧的生成文件和缓存。</p><p>二. 给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。</p><p>例如我们要使 <code>about</code> 页面跳过渲染，创建 <code>/source/about/index.md</code>，将这个页面的相关 HTML 代码写进<code>.md</code>文件并保存，然后在 <code>index.md</code> 的头部写入：，</p><p>避免渲染的办法就是在文件头部<code>Front-matter</code>里添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">xxxxxxxxxxxxx</span><br><span class="line">xx HTML代码 xx</span><br><span class="line">xxxxxxxxxxxxx</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS：<code>Front-matter</code> 是 <code>.md</code> 文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/docs/front-matter</a><br><code>.md</code>文件中的 HTML 代码要用 <code>` 和 `</code> 包起来，使其能正确编译里面的代码　　</p></blockquote><p>这样，这个文件就不会经过模板渲染，最终发布到<code>/public/</code>里的文件就是去掉标记后的文件的样子。</p><p>但是这种未尝试！ 推荐第一种</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Hexo默认会对&lt;code&gt;/source/&lt;/code&gt;里的所有页面应用主题模板渲染，但有一些前端作品或demo页我们不希望经过渲染，而是能保持完全自定义的样子&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo修剪地址栏</title>
    <link href="https://www.webpages.show/p/292fbf59/"/>
    <id>https://www.webpages.show/p/292fbf59/</id>
    <published>2020-08-05T07:44:19.290Z</published>
    <updated>2020-08-05T07:53:06.966Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="前言">前言</span></h3><p>hexo文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>是按照年、月、日、标题来生成的</p><p>比如默认生成：<code>https://www.webpages.show/2020/07/21/hello-world/</code></p><p>非常不利于阅读,中文也可能出现乱码,也影响收录。</p><p>一种解决方案是：使用<code>hexo-permalink-pinyin</code>插件，将中文转英文，好像是有缺陷</p><p>另一种方案: 使用 <code>hexo-abbrlink</code> 插件, 生成短链，且链接不会因为更新次数过多出现改动</p><h3><span id="安装插件">安装插件</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h3><span id="配置">配置</span></h3><p>修改根目录站点配置文件<code>config.yml</code>，改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;  # 注释或者删除</span><br><span class="line">permalink: p&#x2F;:abbrlink&#x2F;  # 此处可以自己设置，也可以直接使用 :&#x2F;abbrlink ，建议前面带目录，不然太乱</span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32  #算法： crc16(default) and crc32</span><br><span class="line">    rep: hex  #进制： dec(default) and hex</span><br></pre></td></tr></table></figure><p>生成的链接将会是这样的(官方样例)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;p&#x2F;66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;p&#x2F;65535.html</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;p&#x2F;8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;p&#x2F;1690090958.html</span><br></pre></td></tr></table></figure><h3><span id="使用">使用</span></h3><p>在文章的 <code>Front-matter</code> 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题<code>title</code>或创建日期<code>date</code>字段之后而不会改变链接地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">categories:</span><br><span class="line"> -</span><br><span class="line">tags:</span><br><span class="line">-</span><br><span class="line">abbrlink:  #留空就好，会自动生成，并不会因下次更新文章而变动</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;hexo文章链接默认的生成规则是：&lt;code&gt;:year/:month/:day/:title&lt;/code&gt;是按照年、月、日、标题来生成的&lt;/p&gt;
&lt;p&gt;比如默认生成：&lt;code&gt;https://www.web
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="abbrlink" scheme="https://www.webpages.show/tags/abbrlink/"/>
    
  </entry>
  
  <entry>
    <title>hexo导航目录点击自动跳转</title>
    <link href="https://www.webpages.show/p/a564d3b/"/>
    <id>https://www.webpages.show/p/a564d3b/</id>
    <published>2020-08-05T07:42:35.656Z</published>
    <updated>2020-08-05T07:45:34.899Z</updated>
    
    <content type="html"><![CDATA[<p>建立page：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &#39;navi&#39;</span><br></pre></td></tr></table></figure><p>在<code>navi</code>下的<code>index.md</code>中加入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;0;url&#x3D;https:&#x2F;&#x2F;navi.webpages.show&#x2F;&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><p>or</p><p>单页显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Home: &#x2F; || fas fa-home</span><br><span class="line">  导航: https:&#x2F;&#x2F;navi.webpages.show&#x2F; || fas fa-paper-plane</span><br><span class="line">  文章||fas fa-list:</span><br><span class="line">    - 时间轴 || &#x2F;archives&#x2F; || fas fa-archive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建立page：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-butterfly添加日历插件</title>
    <link href="https://www.webpages.show/p/22d30f17/"/>
    <id>https://www.webpages.show/p/22d30f17/</id>
    <published>2020-08-03T12:49:04.576Z</published>
    <updated>2020-08-03T12:53:37.228Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="添加日历">添加日历</span></h3><p>安装 <code>hexo-generator-calendar</code> 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-calendar --save</span><br></pre></td></tr></table></figure><p>下载 <code>calendar.js</code> 和 <code>languages.js</code> 文件，保存到 <code>themes/Butterfly/source/js/</code> 目录</p><ul><li><a href="https://github.com/pengloo53/Hexo-theme-light_cn/blob/master/source/js/calendar.js" target="_blank" rel="noopener">calendar.js</a> 下载地址</li><li><a href="https://github.com/pengloo53/Hexo-theme-light_cn/blob/master/source/js/languages.js" target="_blank" rel="noopener">languages.js</a> 下载地址</li></ul><p>编辑 <code>calendar.js</code> 文件，在文件最后<code>}(jQuery));</code> 之前添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    $(&#39;#calendar&#39;).aCalendar(&#39;zh-CN&#39;);&#x2F;&#x2F;&#39;zh-CN&#39;请根据自己博客的语言选择</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>具体位置参考下图：</p><p>编辑 <code>butterfly.yml</code> 文件, 在 <code>inject-&gt;bottom</code> 下面添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- &lt;script src&#x3D;&quot;&#x2F;js&#x2F;calendar.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">- &lt;script src&#x3D;&quot;&#x2F;js&#x2F;languages.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>新建 <code>calendar.styl</code> 文件，保存到 <code>themes/Butterfly/source/css/_layout/</code> 目录下,内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">#calendar</span><br><span class="line">  a</span><br><span class="line">    text-decoration none</span><br><span class="line"></span><br><span class="line">.cal-head</span><br><span class="line">  margin-bottom: 15px</span><br><span class="line">  position relative</span><br><span class="line">  height 20px</span><br><span class="line">  padding 8px 6px 2px 6px</span><br><span class="line"></span><br><span class="line">.cal-prev,.cal-next</span><br><span class="line">  position absolute</span><br><span class="line">  top 9px</span><br><span class="line">  width 16px</span><br><span class="line">  height 18px</span><br><span class="line">  padding 3px 4px</span><br><span class="line">  border 1px solid transparent</span><br><span class="line">  color #333</span><br><span class="line">  outline 0</span><br><span class="line"></span><br><span class="line">.cal-prev</span><br><span class="line">  left 8px</span><br><span class="line">  &amp;:before</span><br><span class="line">    border-right 9px solid #333</span><br><span class="line"></span><br><span class="line">.cal-next</span><br><span class="line">  right 8px</span><br><span class="line">  &amp;:before</span><br><span class="line">    border-left 9px solid #333</span><br><span class="line"></span><br><span class="line">.cal-prev:before,.cal-next:before</span><br><span class="line">  content &#39;&#39;</span><br><span class="line">  display block</span><br><span class="line">  width 0</span><br><span class="line">  height 0</span><br><span class="line">  border-top 5px solid transparent</span><br><span class="line">  border-bottom 5px solid transparent</span><br><span class="line"></span><br><span class="line">.cal-title</span><br><span class="line">  width 100px</span><br><span class="line">  margin 0 auto</span><br><span class="line">  color #333</span><br><span class="line">  font bold 14px&#x2F;18px Arial</span><br><span class="line">  text-align center</span><br><span class="line">  a</span><br><span class="line">    border 1px solid transparent</span><br><span class="line">    color #9f9f9f</span><br><span class="line"></span><br><span class="line">.cal,</span><br><span class="line">.cal th,</span><br><span class="line">.cal td</span><br><span class="line">  border 1px solid #d1d1d1</span><br><span class="line"></span><br><span class="line">.cal</span><br><span class="line">  display: table</span><br><span class="line">  border-collapse separate</span><br><span class="line">  border-spacing 0</span><br><span class="line">  border-width 1px 0 0 1px</span><br><span class="line">  table-layout fixed</span><br><span class="line">  width 100%</span><br><span class="line">  margin 0</span><br><span class="line">  th</span><br><span class="line">    background #9f9f9f</span><br><span class="line">    color #fff</span><br><span class="line">    border-width 0 1px 1px 0</span><br><span class="line">    font-weight 700</span><br><span class="line">  td</span><br><span class="line">    border-width 0 1px 1px 0</span><br><span class="line">  tbody</span><br><span class="line">    a</span><br><span class="line">      background-color #007acc</span><br><span class="line">      color #fff</span><br><span class="line">      display block</span><br><span class="line">      font-weight 700</span><br><span class="line">    .cal-today</span><br><span class="line">      background-color #66ecfd</span><br><span class="line">      color #fff</span><br><span class="line">  .cal-gray</span><br><span class="line">    color #bbb8b8</span><br><span class="line"></span><br><span class="line">[data-theme&#x3D;&#39;dark&#39;] .cal .cal-gray</span><br><span class="line">  color #505050</span><br><span class="line"></span><br><span class="line">.cal th,</span><br><span class="line">.cal td</span><br><span class="line">  font-weight normal</span><br><span class="line">  line-height 2.5625</span><br><span class="line">  padding 0</span><br><span class="line">  text-align center</span><br><span class="line"></span><br><span class="line">[data-theme&#x3D;&#39;dark&#39;] .cal .cal-foot</span><br><span class="line">  color #9f9f9f</span><br><span class="line"></span><br><span class="line">.cal .cal-foot</span><br><span class="line">  color #2ca6cb</span><br><span class="line"></span><br><span class="line">.cal-title a:hover,</span><br><span class="line">.cal-prev:hover,</span><br><span class="line">.cal-next:hover,</span><br><span class="line">.cal .cal-foot:hover,</span><br><span class="line">.cal .cal-foot:focus,</span><br><span class="line">.cal tbody a:hover,</span><br><span class="line">.cal tbody a:focus</span><br><span class="line">  background-color #686868</span><br><span class="line">  color #fff</span><br><span class="line">  cursor pointer</span><br></pre></td></tr></table></figure><p>在 <code>themes/Butterfly/layout/includes/widget/</code> 文件夹新建 <code>card_calendar.pug</code> 文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-calendar</span><br><span class="line">  .card-content</span><br><span class="line">    .item-headline</span><br><span class="line">      i.far.fa-calendar-alt(aria-hidden&#x3D;&quot;true&quot;)</span><br><span class="line">      span&#x3D; _p(&#39;aside.card_calendar&#39;)</span><br><span class="line">    div.widget-wrap</span><br><span class="line">    div#calendar.widget</span><br></pre></td></tr></table></figure><p>编辑 <code>themes/Butterfly/layout/includes/widget/index.pug</code>     文件，在你想要显示的位置插入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_calendar</span><br><span class="line">        !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_calendar&#39;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p>具体位置参考下图：</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/card4.jpg"><blockquote><p>注意格式，放置位置，会影响顺序排版！</p></blockquote><p>编辑 <code>butterfly.yml</code> 文件，在 <code>card_webinfo</code> 下面添加一行 <code>card_calendar: true</code></p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/card2.jpg"><p>编辑 <code>themes/Butterfly/languages/zh-CN.yml</code> 文件 (请根据你的网站语言选择)，找到 <code>aside</code>  , 在下面添加一行 <code>card_calendar: 日历</code> (后面的文本可自定义)</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/card3.jpg"><p>如果不想显示，直接把 <code>butterfly.yml</code> 文件的 <code>card_calendar: true</code> 改为 <code>card_calendar: false</code> 即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;添加日历&quot;&gt;添加日历&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;安装 &lt;code&gt;hexo-generator-calendar&lt;/code&gt; 插件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="butterfly" scheme="https://www.webpages.show/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Valine添加自定义邮件提醒</title>
    <link href="https://www.webpages.show/p/c4492888/"/>
    <id>https://www.webpages.show/p/c4492888/</id>
    <published>2020-07-31T08:00:50.014Z</published>
    <updated>2020-07-31T08:01:52.861Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="绑定域名">绑定域名</span></h3><p>请先<a href="https://tab.leancloud.cn/login.html#/signin" target="_blank" rel="noopener">登录</a>或<a href="https://tab.leancloud.cn/login.html#/signin" target="_blank" rel="noopener">注册</a> <code>LeanCloud</code>, 进入控制台</p><p>首先需要域名绑定,并且你的域名需要备案</p><p>点击<code>设置</code>-&gt;<code>域名绑定</code>-&gt;<code>云引擎</code></p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/LeanCloud2.jpg"><h3><span id="部署">部署</span></h3><p>点击<code>云引擎</code>-&gt;<code>部署</code></p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/LeanCloud3.jpg"><p>填上代码 由 <a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener">zhaojun1998</a> 提供</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;zhaojun1998&#x2F;Valine-Admin</span><br></pre></td></tr></table></figure><p>到代码库中并部署到master，最后在日志中看到部署成功就行了</p><h3><span id="环境配置项">环境配置项</span></h3><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/LeanCloud4.jpg"><p>参数介绍</p><ul><li>SITE_NAME : 网站名称</li><li>SITE_URL : 网站地址, 最后不要加 /</li><li>SMTP_USER : SMTP 服务用户名，一般为邮箱地址（例如QQ 账号.qq.com）</li><li>SMTP_PASS : SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</li><li>SMTP_PORT ： 465  #端口</li><li>SMTP_SERVICE : 邮件服务提供商，支持QQ、163、126、Gmail</li><li>SMTP_HOST : 提供邮件服务的支持方（例如QQ，就是smtp.qq.com</li><li>SENDER_NAME : 寄件人名称</li><li>SENDER_EMAIL : 收件的邮箱地址</li><li>TEMPLATE_NAME : 收到的邮件主题，不填则是默认，建议选rainbow效果在最后查看</li><li>ADMIN_URL ：定时唤醒机器，填写绑定的云引擎域名</li></ul><h3><span id="设置邮件模板">设置邮件模板</span></h3><p>进入<code>设置</code>-&gt;<code>邮件模板</code>填入以下代码，其中改掉相应的用户名为你自己的点击<code>保存</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Hi, &#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.webpages.show&#x2F;&quot; style&#x3D;&quot;display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;&quot;&gt;马上查看&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/LeanCloud5.jpg"><h3><span id="休眠定时唤醒">休眠定时唤醒</span></h3><p>需要说明的是：</p><p>免费版的 LeanCloud 容器，是有强制性休眠策略的，不能 24 小时运行：</p><blockquote><p>每天必须休眠 6 个小时<br>30 分钟内没有外部请求，则休眠。<br>休眠后如果有新的外部请求实例则马上启动（但激活时此次发送邮件会失败）</p></blockquote><p>如果不想付费的话，最佳使用方案就设置定时器，每天 7 - 23 点每 20 分钟访问一次，这样可以保持每天的绝大多数时间邮件服务是正常的。</p><p>点击<code>云引擎</code> - <code>定时任务</code>，新增定时器，按照图片上填写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 *&#x2F;20 7-23 * * ?</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/LeanCloud6.jpg"><p>在<code>云引擎</code>-<code>设置</code>-<code>自定义环境变量</code>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADMIN_URL : #添加绑定成功的云引擎域名</span><br></pre></td></tr></table></figure><p><code>保存</code></p><h3><span id="切记">切记</span></h3><p>最重要的要在<code>云引擎</code> -&gt; <code>部署</code> 中点击 <code>重启</code></p><p>日志</p><p><code>云引擎的</code> - <code>日志</code> 中可以看到提示以及定时任务执行情况，会返回状态码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;绑定域名&quot;&gt;绑定域名&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;请先&lt;a href=&quot;https://tab.leancloud.cn/login.html#/signin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;登录&lt;/a&gt;或&lt;a href
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="valine" scheme="https://www.webpages.show/tags/valine/"/>
    
  </entry>
  
  <entry>
    <title>valine 评论和美化</title>
    <link href="https://www.webpages.show/p/ffb5990d/"/>
    <id>https://www.webpages.show/p/ffb5990d/</id>
    <published>2020-07-31T07:16:38.653Z</published>
    <updated>2020-07-31T08:31:36.371Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="开启valine-评论">开启Valine 评论</span></h3><h3><span id="首先获取app-id-和-app-key">首先获取APP ID 和 APP Key</span></h3><p>请先<a href="https://tab.leancloud.cn/login.html#/signin" target="_blank" rel="noopener">登录</a>或<a href="https://tab.leancloud.cn/login.html#/signin" target="_blank" rel="noopener">注册</a> <code>LeanCloud</code>, 进入控制台后点击左下角创建应用：</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/LeanCloud.jpg"><p>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了：</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/LeanCloud1.jpg"><h4><span id="然后配置-butterflyyml">然后配置 butterfly.yml:</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">   enable: true # if you want use valine,please set this value is true</span><br><span class="line">   appId: sdIB--PW4---s8Esu----Va # leancloud application app id</span><br><span class="line">   appKey: Yj--HV----Hw0k6D---Eiv2O # leancloud application app key</span><br><span class="line">   pageSize: 10 # comment list page size</span><br><span class="line">   avatar: monsterid # gravatar style https:&#x2F;&#x2F;valine.js.org&#x2F;#&#x2F;avatar</span><br><span class="line">   lang: zh-CN # i18n: zh-CN&#x2F;zh-TW&#x2F;en&#x2F;ja</span><br><span class="line">   placeholder: 在07:00 AM至11:59 PM之间,填写邮箱地址可及时收到邮件回复提醒 # valine comment input placeholder(like: Please leave your footprints )</span><br><span class="line">   guest_info: nick,mail,link #valine comment header info (nick&#x2F;mail&#x2F;link)</span><br><span class="line">   recordIP: true # Record reviewer IP</span><br><span class="line">   serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">   bg: # valine background</span><br><span class="line">   emojiCDN: https:&#x2F;&#x2F;i0.hdslb.com&#x2F;bfs&#x2F;emote&#x2F; # emoji CDN</span><br><span class="line">   enableQQ: true # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">   requiredFields: mail # required fields (nick&#x2F;mail)</span><br><span class="line">   count: true # dispaly comment count in top_img</span><br></pre></td></tr></table></figure><p>Valine 於 v1.4.5 開始支持自定義表情，如果你需要自行配置，請在 <code>emojiCDN</code> 配置表情 <code>CDN</code></p><p>同时在 Hexo 工作目錄下的 <code>source/_data/</code> 创建一個 json 文件 <code>valine.json</code>, 等同于 Valine 需要配置的 <code>emojiMaps</code>，<code>valine.json</code> 配置方式可參考如下。</p><p>示例引用B站表情</p><p><code>butterfly.ym</code>下valinel,<code>emojiCDN</code>处添加:<code>https://i0.hdslb.com/bfs/emote/</code></p><blockquote><p>valine.json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">&quot;tv_doge&quot;: &quot;6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png&quot;,</span><br><span class="line">&quot;tv_親親&quot;: &quot;a8111ad55953ef5e3be3327ef94eb4a39d535d06.png&quot;,</span><br><span class="line">&quot;tv_偷笑&quot;: &quot;bb690d4107620f1c15cff29509db529a73aee261.png&quot;,</span><br><span class="line">&quot;tv_再見&quot;: &quot;180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png&quot;,</span><br><span class="line">&quot;tv_冷漠&quot;: &quot;b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png&quot;,</span><br><span class="line">&quot;tv_發怒&quot;: &quot;34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png&quot;,</span><br><span class="line">&quot;tv_發財&quot;: &quot;34db290afd2963723c6eb3c4560667db7253a21a.png&quot;,</span><br><span class="line">&quot;tv_可愛&quot;: &quot;9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png&quot;,</span><br><span class="line">&quot;tv_吐血&quot;: &quot;09dd16a7aa59b77baa1155d47484409624470c77.png&quot;,</span><br><span class="line">&quot;tv_呆&quot;: &quot;fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png&quot;,</span><br><span class="line">&quot;tv_嘔吐&quot;: &quot;9f996894a39e282ccf5e66856af49483f81870f3.png&quot;,</span><br><span class="line">&quot;tv_困&quot;: &quot;241ee304e44c0af029adceb294399391e4737ef2.png&quot;,</span><br><span class="line">&quot;tv_壞笑&quot;: &quot;1f0b87f731a671079842116e0991c91c2c88645a.png&quot;,</span><br><span class="line">&quot;tv_大佬&quot;: &quot;093c1e2c490161aca397afc45573c877cdead616.png&quot;,</span><br><span class="line">&quot;tv_大哭&quot;: &quot;23269aeb35f99daee28dda129676f6e9ea87934f.png&quot;,</span><br><span class="line">&quot;tv_委屈&quot;: &quot;d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png&quot;,</span><br><span class="line">&quot;tv_害羞&quot;: &quot;a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png&quot;,</span><br><span class="line">&quot;tv_尷尬&quot;: &quot;7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png&quot;,</span><br><span class="line">&quot;tv_微笑&quot;: &quot;70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png&quot;,</span><br><span class="line">&quot;tv_思考&quot;: &quot;90cf159733e558137ed20aa04d09964436f618a1.png&quot;,</span><br><span class="line">&quot;tv_驚嚇&quot;: &quot;0d15c7e2ee58e935adc6a7193ee042388adc22af.png&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="在-valine-输入界面增加背景图">在 valine 输入界面增加背景图</span></h3><p>建议大家在找图的时候最好找白色背景或者透明背景的，不然看起来很难看。</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/1595912900562.jpg"><ol><li>使用方法如下，将 CSS 加到你的博客样式文件中. 我是在<code>Butterfly/source/css/veditor.css</code>目录下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#veditor &#123;</span><br><span class="line">background-image: url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;drew233&#x2F;cdn&#x2F;20200409110727.webp);</span><br><span class="line">background-size: contain;</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-position: right;</span><br><span class="line">background-color: rgba(255, 255, 255, 0);</span><br><span class="line">resize: vertical</span><br><span class="line">&#125;</span><br><span class="line">#veditor:focus&#123;</span><br><span class="line">background-position-y: 200px;</span><br><span class="line">transition: all 0.2s ease-in-out 0s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Butterfly/source/js/valine.js</code> 添加以下代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;可以与 valine 的配置 js 文件放一起，或放置到公共 js 文件中</span><br><span class="line">$(&quot;#veditor&quot;).focus(function()&#123;$(this).css(&quot;background-image&quot;,&quot;none&quot;);&#125;);</span><br><span class="line">$(&quot;#veditor&quot;).blur(function()&#123;</span><br><span class="line">      $(this).css(&quot;background-image&quot;,&quot;url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;drew233&#x2F;cdn&#x2F;20200409110727.webp)&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>引用方式在<code>Butterfly/_config.yml</code>中<code>inject</code>添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">   head:</span><br><span class="line">     - &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;veditor.css&quot;&gt;</span><br><span class="line">   bottom:</span><br><span class="line">     - &lt;script src&#x3D;&quot;&#x2F;js&#x2F;veditor.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3><span id="valine-评论添加博主等标签">valine 评论添加博主等标签</span></h3><p>下载<a href="https://github.com/HCLonely/hexo-demo/edit/master/themes/Butterfly/layout/includes/comments/valine.pug" target="_blank" rel="noopener">valine.pug</a>文件，替换<code>themes/Butterfly/layout/includes/comments/valine.pug</code><br>编辑<code>butterfly.yml</code>文件，找到<code>valine</code>配置，添加以下配置项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">master: # md5加密后的博主邮箱,自行对自己的邮箱进行加密填写</span><br><span class="line">    - 968c57dece36dc7de97013dd71a84773</span><br><span class="line">  friends: # md5加密后的小伙伴邮箱，自行对小伙伴邮箱加密填写</span><br><span class="line">    - f6572f1e203dd79b7545ff297b037d74</span><br><span class="line">    - a0adabb31677df92a2405fb18a02ee4d</span><br><span class="line">  metaPlaceholder: # 输入框的背景文字</span><br><span class="line">    nick: 昵称&#x2F;QQ号</span><br><span class="line">    mail: 邮箱(必填)</span><br><span class="line">    link: 网址(https:&#x2F;&#x2F;)</span><br><span class="line">  tagMeta: &#39;博主,小伙伴,访客&#39; # 标签要显示的文字,默认&#39;博主,小伙伴,访客&#39;</span><br><span class="line">  verify: true # 评论时是否需要验证，需jQuery支持</span><br></pre></td></tr></table></figure><p>编辑<code>butterfly.yml</code>文件，将<code>CDN</code>中的<code>valine</code>链接引用改为<code>https://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js</code></p><p>改完之后<code>hexo clean</code>一下，不然不会生效</p><h3><span id="最后完整配置如下">最后完整配置如下</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">   enable: true # if you want use valine,please set this value is true</span><br><span class="line">   appId: sdIB--PW4---s8Esu----Va # leancloud application app id</span><br><span class="line">   appKey: Yj--HV----Hw0k6D---Eiv2O # leancloud application app key</span><br><span class="line">   pageSize: 10 # comment list page size</span><br><span class="line">   avatar: monsterid # gravatar style https:&#x2F;&#x2F;valine.js.org&#x2F;#&#x2F;avatar</span><br><span class="line">   lang: zh-CN # i18n: zh-CN&#x2F;zh-TW&#x2F;en&#x2F;ja</span><br><span class="line">   placeholder: 在07:00 AM至11:59 PM之间,填写邮箱地址可及时收到邮件回复提醒 # valine comment input placeholder(like: Please leave your footprints )</span><br><span class="line">   guest_info: nick,mail,link #valine comment header info (nick&#x2F;mail&#x2F;link)</span><br><span class="line">   recordIP: true # Record reviewer IP</span><br><span class="line">   serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">   bg: # valine background</span><br><span class="line">   emojiCDN: https:&#x2F;&#x2F;i0.hdslb.com&#x2F;bfs&#x2F;emote&#x2F; # emoji CDN</span><br><span class="line">   enableQQ: true # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">   requiredFields: mail # required fields (nick&#x2F;mail)</span><br><span class="line">   count: true # dispaly comment count in top_img</span><br><span class="line">   master: # md5加密后的博主邮箱</span><br><span class="line">     - 968c57dece36dc7de97013dd71a84773</span><br><span class="line">   friends: # md5加密后的小伙伴邮箱</span><br><span class="line">     - f6572f1e203dd79b7545ff297b037d74</span><br><span class="line">   metaPlaceholder: # 输入框的背景文字</span><br><span class="line">     nick: 昵称&#x2F;QQ号</span><br><span class="line">     mail: 邮箱(必填)</span><br><span class="line">     link: 网址(https:&#x2F;&#x2F;)</span><br><span class="line">   tagMeta: &#39;博主,小伙伴,访客&#39; # 标签要显示的文字,默认&#39;博主,小伙伴,访客&#39;</span><br><span class="line">   verify: true # 评论时是否需要验证，需jQuery支持</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;开启valine-评论&quot;&gt;开启Valine 评论&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span id=&quot;首先获取app-id-和-app-key&quot;&gt;首先获取APP ID 和 APP Key&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;请先&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="valine" scheme="https://www.webpages.show/tags/valine/"/>
    
  </entry>
  
  <entry>
    <title>Hexo哔哩哔哩番剧页面插件</title>
    <link href="https://www.webpages.show/p/8422e92e/"/>
    <id>https://www.webpages.show/p/8422e92e/</id>
    <published>2020-07-30T05:42:43.044Z</published>
    <updated>2020-07-31T08:32:17.744Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="hexo哔哩哔哩番剧页面插件">Hexo哔哩哔哩番剧页面插件</span></h3><h3><span id="安装">安装</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-bilibili-bangumi --save</span><br></pre></td></tr></table></figure><h3><span id="配置">配置</span></h3><p>将下面的配置写入站点的配置文件<code>_config.yml</code>里(不是主题的配置文件).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bangumi:</span><br><span class="line">  enable: true</span><br><span class="line">  path:</span><br><span class="line">  vmid:</span><br><span class="line">  title: &#39;追番列表&#39;</span><br><span class="line">  quote: &#39;生命不息，追番不止！&#39;</span><br><span class="line">  show: 1</span><br><span class="line">  loading:</span><br><span class="line">  metaColor:</span><br><span class="line">  color:</span><br><span class="line">  webp:</span><br></pre></td></tr></table></figure><ul><li>enable: 是否启用</li><li>path: 番剧页面路径，默认bangumis/index.html</li><li>vmid: 哔哩哔哩番剧页面的vmid(uid)</li><li>title: 该页面的标题</li><li>quote: 写在页面开头的一段话,支持 html 语法</li><li>show: 初始显示页面：0: 想看,1: 在看,2: 看过，默认为1</li><li>loading: 图片加载完成前的 loading 图片</li><li>metaColor: meta 部分(简介上方)字体颜色</li><li>color: 简介字体颜色</li><li>webp: 番剧封面使用webp格式(此格式在safari浏览器下不显示，但是图片大小可以缩小 100 倍左右), 默认true</li></ul><h3><span id="使用">使用</span></h3><p>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用<code>hexo bangumi -u</code>命令更新番剧数据！<br>删除数据命令:<code>hexo bangumi -d</code></p><h3><span id="获取-uid">获取 uid</span></h3><p>登录哔哩哔哩后前往<code>https://space.bilibili.com/</code> 页面，网址最后的一串数字就是<code>uid</code></p><p><strong>前提需要把番剧公开所有人可见</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;hexo哔哩哔哩番剧页面插件&quot;&gt;Hexo哔哩哔哩番剧页面插件&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span id=&quot;安装&quot;&gt;安装&lt;/span&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="bilibili" scheme="https://www.webpages.show/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>安装 oh-my-zsh</title>
    <link href="https://www.webpages.show/p/65008a24/"/>
    <id>https://www.webpages.show/p/65008a24/</id>
    <published>2020-07-29T04:13:47.634Z</published>
    <updated>2020-07-29T05:30:17.131Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="安装">安装</span></h3><p>之前用的Ubuntu，现在用的Centos，所以都写一下</p><h4><span id="ubuntu">Ubuntu</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zsh:</span><br><span class="line">sudo apt-get install zsh -y</span><br><span class="line">git:</span><br><span class="line">sudo apt-get install git -y</span><br></pre></td></tr></table></figure><h4><span id="centos">Centos</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zsh:</span><br><span class="line">sudo yum install zsh -y</span><br><span class="line">git:</span><br><span class="line">sudo yum install git -y</span><br></pre></td></tr></table></figure><h4><span id="下面的ubuntu和centos是一样的">下面的Ubuntu和Centos是一样的</span></h4><p>克隆仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git ~&#x2F;.oh-my-zsh</span><br></pre></td></tr></table></figure><p>备份原来的zshrc，如果文件存在的话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~&#x2F;.zshrc ~&#x2F;.zshrc.bak</span><br></pre></td></tr></table></figure><p>创建一个新的zsh配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~&#x2F;.oh-my-zsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure><p>改变默认的Shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s &#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure><p>退出终端重新登入就可以</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;安装&quot;&gt;安装&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;之前用的Ubuntu，现在用的Centos，所以都写一下&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/span&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;
      
    
    </summary>
    
    
      <category term="oh-my-zsh" scheme="https://www.webpages.show/categories/oh-my-zsh/"/>
    
    
      <category term="oh-my-zsh" scheme="https://www.webpages.show/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>hexo-qiniu-sync使用七牛为Hexo存储图片等资源</title>
    <link href="https://www.webpages.show/p/d9a940f3/"/>
    <id>https://www.webpages.show/p/d9a940f3/</id>
    <published>2020-07-28T08:29:39.010Z</published>
    <updated>2020-07-28T09:19:46.010Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="七牛存储设置">七牛存储设置</span></h3><p>1.申请七牛账户<br>2.创建存储空间（七牛叫作”Bucket“），注意添加的空间为”对象存储“，访问控制选择”公开空间“：<br>3.点击页面右上角头像→进入”密钥管理“→复制当前使用中的<code>AK</code>和<code>SK</code>，待会设置插件时会用到</p><h3><span id="设置-hexo-qiniu-sync-插件">设置 hexo-qiniu-sync 插件</span></h3><p>1.安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-qiniu-sync --save</span><br></pre></td></tr></table></figure><p>2.添加插件配置信息到站点<code>hexo</code>根配置文件 <code>_config.yml</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">qiniu:</span><br><span class="line">   offline: false</span><br><span class="line">   sync: true</span><br><span class="line">   bucket: #七牛空间名称 </span><br><span class="line">   access_key: #密钥AccessKey</span><br><span class="line">   secret_key: #SecretKey</span><br><span class="line">   dirPrefix:</span><br><span class="line">   urlPrefix:  #外链前缀域名，创建会自动分配测试域名，最好是自己的域名，测试域名有时效</span><br><span class="line">   local_dir: cdn</span><br><span class="line">   update_exist: true</span><br><span class="line">   image:</span><br><span class="line">     folder: images</span><br><span class="line">     extend:</span><br><span class="line">   js:</span><br><span class="line">     folder: js</span><br><span class="line">   css:</span><br><span class="line">     folder: css</span><br></pre></td></tr></table></figure><h3><span id="配置参数的说明">配置参数的说明：</span></h3><ul><li><code>offline</code> ：是否离线。设置为 true 将在本地预览时使用本地地址渲染，省流量； false 将使用同步到七牛空间的静态资源渲染，方便检查资源链接是否正确。</li><li><code>sync</code> ：是否同步到七牛，一般都是设置 true 啦</li><li>dirPrefix ：资源将上传到七牛空间的此目录下，可像我一样设置为空。该参数会影响外链的地址，如果设置为非空值，例如默认值 static ，则 urlPrefix 为保持一致需加上目录后缀 /static ，改为 <a href="http://7xqb0u.com1.z0.glb.clouddn.com/static" target="_blank" rel="noopener">http://7xqb0u.com1.z0.glb.clouddn.com/static</a> 。</li><li><code>local_dir</code> ：本地资源储存目录。在本例中，待上传的资源都储存在hexo主目录中的 cdn 文件夹（也就是与 source 目录平级）中。</li><li><code>update_exist</code> ：设置为 true ，则会在文件更新之后重新上传并更新七牛空间上中的原有文件。</li><li>image/js/css ：子参数folder为不同静态资源种类的目录名称，一般不需要改动</li><li>image.extend ：使用 qnimg 标签引用图片的默认图片处理操作。可以使用 基本图片处理（imageView2）、高级图片处理（imageMogr2）、图片水印处理（watermark） 这三个图片处理接口，多个接口内容之间用 | 间隔。</li></ul><h3><span id="配置本地目录">配置本地目录</span></h3><p>本地目录名称需要与 <code>local_dir</code> 参数的值一致。所以在 hexo主目录 下新建与 <code>source</code> 平级的目录 <code>cdn</code> ，用于存放需要上传到七牛的资源<br>在 cdn 目录下创建子目录： <code>css</code> 、 <code>images</code> 、 <code>js</code> ，与 <code>image/js/css</code> 子参数 <code>folder</code> 保持一致，待上传的css、图片、js文件应该存储到相应子目录。也可新建其他子目录,我的Hexo主目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─.deploy_git</span><br><span class="line">├─cdn</span><br><span class="line">│ ├─css</span><br><span class="line">│ ├─images</span><br><span class="line">│ └─js</span><br><span class="line">├─node_modules</span><br><span class="line">├─public</span><br><span class="line">├─scaffolds</span><br><span class="line">├─source</span><br><span class="line">└─theme</span><br></pre></td></tr></table></figure><h3><span id="引用七牛资源">引用七牛资源</span></h3><h4><span id="引用图片">引用图片</span></h4><p>图片的引用是最典型的情况。让我们来看最简单的情况：如果你想引用储存在 <code>cdn/images</code> 下的图片 <code>demo.jpg</code> ，只需在文章中插入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg demo.jpg %&#125;</span><br></pre></td></tr></table></figure><p>生成站点时将被解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;7xqb0u.com1.z0.glb.clouddn.com&#x2F;images&#x2F;demo.jpg&quot;&gt;  注意路径，要与得到的七牛外链路径相同</span><br></pre></td></tr></table></figure><p>我们总结一下生成的图片外链地址规则。我们把引用实例概括为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg ImgFile %&#125;</span><br></pre></td></tr></table></figure><p>则生成的图片外链地址规则为 <code>urlPrefix</code> + <code>/</code> + <code>image.folder</code> + <code>/</code> + <code>ImgFile</code> 。<br>我们再定义文件在 cdn 目录下的相对路径为 <code>FilePath</code> ，即文件 <code>cdn/demo.mp3</code> 的 <code>FilePath</code> 为 <code>demo.mp3</code> ， <code>cdn/images/test/01.png</code> 的 <code>FilePath</code> 为 <code>images/test/01.png</code> 。则实际上传到七牛的文件外链地址为 AK/SK所指向用户的绑定域名 + <code>/</code> + <code>dirPrefix</code> + <code>/</code> + <code>FilePath</code> 。只有当生成的图片外链地址与实际上传到七牛的文件外链地址一致时，引用的图片才能正确显示。根据配置文件，我们知道：</p><ul><li>urlPrefix = <a href="http://qdwuxlf4l.bkt.clouddn.com" target="_blank" rel="noopener">http://qdwuxlf4l.bkt.clouddn.com</a></li><li>image.folder = images</li><li>AK/SK所指向用户的绑定域名 = <a href="http://qdwuxlf4l.bkt.clouddn.com" target="_blank" rel="noopener">http://qdwuxlf4l.bkt.clouddn.com</a></li><li>dirPrefix 为空值<br>代入，可得：</li><li>生成的图片外链地址规则 = <a href="http://qdwuxlf4l.bkt.clouddn.com/images/ImgFile" target="_blank" rel="noopener">http://qdwuxlf4l.bkt.clouddn.com/images/ImgFile</a></li><li>上传到七牛的文件外链地址 = <a href="http://qdwuxlf4l.bkt.clouddn.com/FilePath" target="_blank" rel="noopener">http://qdwuxlf4l.bkt.clouddn.com/FilePath</a></li></ul><p>而如果按照上文所说，将图片文件存储在 cdn/images 目录下，则 images/ + ImgFile = FilePath ，二者相等。<br>要想正确的引用外链，一定要注意每一个步骤的设置。如果最后外链不能正常显示，首先对比一下网站博客引用的地址和七牛的外链地址是否一致，如果不一致，则对照外链地址的生成规律，检查文件存放路径、 urlPrefix 、 dirPrefix 、 image.folder 设置是否正确。</p><h4><span id="图片引用的高阶版">图片引用的高阶版</span></h4><p>高级用法的通用模版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg imageFile [attr1:value1] [&#39;attr2:value21 value22 ...&#39;] [extend:... | normal:yes] %&#125;</span><br></pre></td></tr></table></figure><ul><li>[] 表示可选项，按需添加，也可以不写</li><li>| 表示二选一</li><li>extend:… 图片处理参数，表示对图片进行某种特定处理5，多个处理之间用 | 间</li><li>normal:yes 表示使用原图，忽略 <code>_config.yml</code> 文件中的 image.extend 设置</li></ul><p>实例 图片的本地路径为 <code>cdn/images/test/demo.png</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg test&#x2F;demo.png title:标题 alt:说明 &#39;class:class1 class2&#39; extend:?imageView2&#x2F;2&#x2F;w&#x2F;600 %&#125;</span><br></pre></td></tr></table></figure><p>解析为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img title&#x3D;&quot;标题&quot; alt&#x3D;&quot;说明&quot; class&#x3D;&quot;class1 class2&quot; src&#x3D;&quot;http:&#x2F;&#x2F;qdwuxlf4l.bkt.clouddn.com&#x2F;images&#x2F;test&#x2F;demo.png?imageView2&#x2F;2&#x2F;w&#x2F;600&quot;&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>?imageView2/2/w/500</code> 代表生成宽度最多500px的缩略图5。如果经常使用某种图片效果，可以在其七牛创建处理样式，以后直接将 <code>extend</code> 参数设置为 分隔符 <code>+</code> 样式名 就好。例如设置的分隔符为 <code>-</code> ，样式名为 <code>new</code> ，则 <code>extend</code> 参数为 <code>-new</code> 。</p><h4><span id="引用css和js">引用CSS和JS</span></h4><p>只是引用的标签名不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnjs jsFile attr1:value1 attr2:value2 &#39;attr3:value31 value32 value3n&#39; %&#125;</span><br><span class="line">&#123;% qncss cssFile attr1:value1 attr2:value2 &#39;attr3:value31 value32 value3n&#39; %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;七牛存储设置&quot;&gt;七牛存储设置&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;1.申请七牛账户&lt;br&gt;2.创建存储空间（七牛叫作”Bucket“），注意添加的空间为”对象存储“，访问控制选择”公开空间“：&lt;br&gt;3.点击页面右上角头像→进入”密钥管理“→复制当前使用中的&lt;
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="qiniu" scheme="https://www.webpages.show/tags/qiniu/"/>
    
  </entry>
  
  <entry>
    <title>hexo-tag-aplayer音乐插件使用</title>
    <link href="https://www.webpages.show/p/d64778f7/"/>
    <id>https://www.webpages.show/p/d64778f7/</id>
    <published>2020-07-28T06:18:21.306Z</published>
    <updated>2020-07-28T09:20:35.246Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="hexo-tag-aplayer">hexo-tag-aplayer</span></h3><h3><span id="安装">安装</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><h3><span id="依赖">依赖</span></h3><ul><li>APlayer.js &gt; 1.8.0</li><li>Meting.js &gt; 1.1.1</li></ul><h3><span id="使用">使用</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><h4><span id="标签参数">标签参数</span></h4><ul><li><code>title</code> : 曲目标题</li><li><code>author</code>: 曲目作者</li><li><code>url</code>: 音乐文件 URL 地址</li><li><code>picture_url</code>: (可选) 音乐对应的图片地址</li><li><code>narrow</code>: （可选）播放器袖珍风格</li><li><code>autoplay</code>:  (可选) 自动播放，移动端浏览器暂时不支持此功能</li><li><code>width:xxx</code>: (可选) 播放器宽度 (默认: 100%)</li><li><code>lrc:xxx</code>: （可选）歌词文件 URL 地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure></li></ul><h4><span id="歌词标签">歌词标签</span></h4><p>除了使用标签 <code>lrc</code> 选项来设定歌词，你也可以直接使用 <code>aplayerlrc</code> 标签来直接插入歌词文本在博客中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlrc &quot;title&quot; &quot;author&quot; &quot;url&quot; &quot;autoplay&quot; %&#125;</span><br><span class="line">[00:00.00]lrc here</span><br><span class="line">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure><h4><span id="播放列表">播放列表</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;narrow&quot;: false,                          &#x2F;&#x2F; （可选）播放器袖珍风格</span><br><span class="line">    &quot;autoplay&quot;: true,                         &#x2F;&#x2F; （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">    &quot;mode&quot;: &quot;random&quot;,                         &#x2F;&#x2F; （可选）曲目循环类型，有 &#39;random&#39;（随机播放）, &#39;single&#39; (单曲播放), &#39;circulation&#39; (循环播放), &#39;order&#39; (列表播放)， 默认：&#39;circulation&#39;</span><br><span class="line">    &quot;showlrc&quot;: 3,                             &#x2F;&#x2F; （可选）歌词显示配置项，可选项有：1,2,3</span><br><span class="line">    &quot;mutex&quot;: true,                            &#x2F;&#x2F; （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class="line">    &quot;theme&quot;: &quot;#e6d0b2&quot;,                      &#x2F;&#x2F; （可选）播放器风格色彩设置，默认：#b7daff</span><br><span class="line">    &quot;preload&quot;: &quot;metadata&quot;,                    &#x2F;&#x2F; （可选）音乐文件预载入模式，可选项： &#39;none&#39; &#39;metadata&#39; &#39;auto&#39;, 默认: &#39;auto&#39;</span><br><span class="line">    &quot;listmaxheight&quot;: &quot;513px&quot;,                 &#x2F;&#x2F; (可选) 该播放列表的最大长度</span><br><span class="line">    &quot;music&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;CoCo&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;Jeff Williams&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;caffeine.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;caffeine.jpeg&quot;,</span><br><span class="line">            &quot;lrc&quot;: &quot;caffeine.txt&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;アイロニ&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;鹿乃&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;irony.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;irony.jpg&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure><h3><span id="meingjs-支持-30-新功能-最主要最简单的使用-推荐使用">MeingJS 支持 (3.0 新功能) 最主要最简单的使用 推荐使用</span></h3><p><a href="https://github.com/metowolf/MetingJS" target="_blank" rel="noopener">MetingJS</a> 是基于<a href="https://github.com/metowolf/Meting" target="_blank" rel="noopener">Meting API</a> 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 <code>_config.yml</code> 中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>接着就可以通过 <code>    <div id="aplayer-oLMzOncB" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="..." data-server="undefined" data-type="undefined" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div></code> 在文章中使用 MetingJS 播放器了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim source&#x2F;music&#x2F;index.md  #添加以下代码</span><br><span class="line">&#123;% meting &quot;1983872197&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:700px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br><span class="line">注 meting &quot;1983872197&quot; 可以为歌单ID或者单曲ID</span><br></pre></td></tr></table></figure><p>有关  <code>    <div id="aplayer-cnqjRXpG" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="undefined" data-server="undefined" data-type="undefined" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div></code>  的选项列表如下:</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><p>插件会在每一個文件都插入 js 和 css，为了避免这一情況，<code>butterfiy 3.0</code> 版本內置了 aplayer 需要的 css 和 js。<br>如果需要在指定的文章上播放<br>首先在 Hexo 根目錄<code>_config</code> 里配置 <code>asset_inject</code> 为 <code>false</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  asset_inject: false</span><br></pre></td></tr></table></figure><p>然後在你需要使用 aplayer 的页面 Front-matter 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aplayer: true</span><br></pre></td></tr></table></figure><p>这样只会在需要 aplayer 的页面插入 js 和 css。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;hexo-tag-aplayer&quot;&gt;hexo-tag-aplayer&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span id=&quot;安装&quot;&gt;安装&lt;/span&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="aplayer" scheme="https://www.webpages.show/tags/aplayer/"/>
    
  </entry>
  
  <entry>
    <title>hexo-butterfly美化 (持续更新)</title>
    <link href="https://www.webpages.show/p/1b825486/"/>
    <id>https://www.webpages.show/p/1b825486/</id>
    <published>2020-07-28T04:47:56.670Z</published>
    <updated>2020-08-05T02:25:24.345Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="樱花飘落背景">樱花飘落背景</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd theme&#x2F;Butterfly&#x2F;source&#x2F;js</span><br><span class="line">wget https:&#x2F;&#x2F;yremp.live&#x2F;wp-content&#x2F;uploads&#x2F;resource&#x2F;js&#x2F;sakura.js</span><br></pre></td></tr></table></figure><p>把下载好的Js文件放在<code>theme/Butterfly/source/js</code>文件夹下<br><code>/Butterfly/layout/includes</code>文件夹下找到<code>head.pug</code>文件，在最后引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.sakura.enable</span><br><span class="line">  script(src&#x3D;&quot;&#x2F;js&#x2F;sakura.js&quot;)</span><br></pre></td></tr></table></figure><p>在主题的主配置文件加入<code>Butterfly/_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 页面樱花飘落动效</span><br><span class="line">sakura:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3><span id="浏览器标题恶搞">浏览器标题恶搞</span></h3><p>在<code>theme/Butterfly/source/js</code>文件夹下添加<code>crash_cheat.js</code>文件<br>填入以下内容<code>记得要修改你喜欢的标题</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var OriginTitle &#x3D; document.title;</span><br><span class="line"> var titleTime;</span><br><span class="line"> document.addEventListener(&#39;visibilitychange&#39;, function () &#123;</span><br><span class="line">     if (document.hidden) &#123;</span><br><span class="line">         $(&#39;[rel&#x3D;&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;&#x2F;joke.ico&quot;);</span><br><span class="line">         document.title &#x3D; &#39;看不见我🙈~看不见我🙈~&#39;;</span><br><span class="line">         clearTimeout(titleTime);</span><br><span class="line">     &#125;</span><br><span class="line">     else &#123;</span><br><span class="line">         $(&#39;[rel&#x3D;&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;&#x2F;favicon.ico&quot;);</span><br><span class="line">         document.title &#x3D; &#39; ( ๑•̀ㅂ•́) ✧被发现了～&#39;;</span><br><span class="line">         titleTime &#x3D; setTimeout(function () &#123;</span><br><span class="line">             document.title &#x3D; OriginTitle;</span><br><span class="line">         &#125;, 2000);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>在<code>Butterfly/layout/includes/layout.pug</code>中添加以下代码来引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script(type&#x3D;&#39;text&#x2F;javascript&#39;, src&#x3D;&#39;&#x2F;js&#x2F;crash_cheat.js&#39;)</span><br></pre></td></tr></table></figure><h3><span id="添加标签云">添加标签云</span></h3><p>使用命令进行安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-tag-cloud --save</span><br></pre></td></tr></table></figure><p>打开<code>Butterfly/layout/includes/widget/card_tags.pug</code>文件，用下面内容将其替换掉，最好把之前的文件备份一下,防止后悔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if site.tags.length</span><br><span class="line">  .card-widget.card-tags</span><br><span class="line">    .card-content</span><br><span class="line">      .item-headline</span><br><span class="line">        i.fa.fa-tags(aria-hidden&#x3D;&quot;true&quot;)</span><br><span class="line">        span&#x3D; _p(&#39;aside.card_tags&#39;)</span><br><span class="line">        script(type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcloud.js&quot;)</span><br><span class="line">        script(type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcanvas.js&quot;)</span><br><span class="line">        #myCanvasContainer.widget.tagcloud(align&#x3D;&#39;center&#39;)</span><br><span class="line">          canvas#resCanvas(width&#x3D;&#39;200&#39;, height&#x3D;&#39;200&#39;, style&#x3D;&#39;width&#x3D;100%&#39;)</span><br><span class="line">            !&#x3D; tagcloud()</span><br><span class="line">          !&#x3D; tagcloud(&#123;min_font: 16, max_font: 24, amount: 50, color: true, start_color: &#39;#999&#39;, end_color: &#39;#99a9bf&#39;&#125;)</span><br></pre></td></tr></table></figure><h3><span id="添加个性化板娘">添加个性化板娘</span></h3><blockquote><p>由<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">stevenjoezhang</a> 魔改项目<br>最简单引用方式在<code>Butterfly/_config.yml</code>中<code>inject</code>添加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">   head:</span><br><span class="line">     - &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&gt;</span><br><span class="line">   bottom:</span><br><span class="line">     - &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;stevenjoezhang&#x2F;live2d-widget@latest&#x2F;autoload.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3><span id="添加访客地图">添加访客地图</span></h3><p>前往 <a href="https://clustrmaps.com/" target="_blank" rel="noopener">clustrmaps</a> 网站注册一个帐号</p><p>找到 <code>Free Tools</code> 下面的 <code>Website Widget</code>, 点击 <code>Get Map Widget</code></p><p>输入你的博客网址，点击 <code>Next</code></p><p>根据你自己的喜好选择样式 <code>Map widget</code> 或 <code>Globe Widget</code></p><p>找到如下代码，记住 <code>src (****** 的部分)</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; id&#x3D;&quot;clstr_globe&quot; src&#x3D;&quot;**********************&quot;&gt;</span><br></pre></td></tr></table></figure><p>在 <code>themes/butterfly/layout/includes/widget/</code> 文件夹新建 <code>card_map.pug</code> 文件，文件内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-map</span><br><span class="line">  .card-content</span><br><span class="line">    .item-headline</span><br><span class="line">      i.fa.fa-globe-asia(aria-hidden&#x3D;&quot;true&quot;)</span><br><span class="line">      span&#x3D; _p(&#39;aside.card_map&#39;)</span><br><span class="line">    script#clstr_globe(type&#x3D;&quot;text&#x2F;javascript&quot; defer&#x3D;&quot;defer&quot; src&#x3D;&quot;此处填入你自己的代码&quot;)</span><br></pre></td></tr></table></figure><p>编辑 <code>themes/butterfly/layout/includes/widget/index.pug</code> 文件，在你想要显示的位置插入以下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_map</span><br><span class="line">        !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_map&#39;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/card1.jpg"><blockquote><p>注意格式</p></blockquote><p>编辑 <code>butterfly/_config.yml</code> 文件，在 <code>card_webinfo</code> 下面添加一行 <code>card_map: true</code></p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/card2.jpg"><p>编辑 <code>themes/Butterfly/languages/zh-CN.yml</code> 文件 (请根据你的网站语言选择)，找到 <code>aside</code> 下对应格式添加 <code>card_map: 访客地图</code> (后面的文本可自定义)</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/card3.jpg"><p>如果不想显示，直接把 <code>butterfly/_config.yml</code> 文件的 <code>card_map: true</code> 改为 <code>card_map: false</code> 即可</p><h3><span id="页脚跳动的">页脚跳动的♥</span></h3><p>编辑博客根目录<code>themes/Butterfly/layout/includes/footer.pug</code>文件，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;copy;$&#123;theme.since&#125; - $&#123;nowYear&#125; By $&#123;config.author&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;copy;$&#123;theme.since&#125; - $&#123;nowYear + &#39; &#39;&#125; &lt;i id&#x3D;&quot;heartbeat&quot; class&#x3D;&quot;fa fas fa-heartbeat&quot;&gt;&lt;&#x2F;i&gt; $&#123;config.author&#125;</span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;copy;$&#123;nowYear + &#39; &#39;&#125; &lt;i id&#x3D;&quot;heartbeat&quot; class&#x3D;&quot;fa fas fa-heartbeat&quot;&gt;&lt;&#x2F;i&gt; $&#123;config.author&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>butterfly.yml</code>文件</p><p>在<code>inject-&gt;head</code>下面添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HCLonely&#x2F;images@master&#x2F;others&#x2F;heartbeat.min.css&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;樱花飘落背景&quot;&gt;樱花飘落背景&lt;/span&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="butterfly" scheme="https://www.webpages.show/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>hexo-douban 插件使用与问题</title>
    <link href="https://www.webpages.show/p/2651b0bd/"/>
    <id>https://www.webpages.show/p/2651b0bd/</id>
    <published>2020-07-27T03:18:13.044Z</published>
    <updated>2020-07-28T09:19:03.093Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="hexo-douban">hexo-douban</span></h1><p>一个在 <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> 页面中嵌入豆瓣个人主页的小插件.</p><h3><span id="安装">安装</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-douban --save</span><br></pre></td></tr></table></figure><h3><span id="配置">配置</span></h3><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my book title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my book quote'</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my movie title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my movie quote'</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my game title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my game quote'</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;" target="_blank" rel="noopener">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code>(1.x.x版本新增配置项)。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p><h2><span id="使用">使用</span></h2><h3><span id="1xx版本">1.x.x版本</span></h3><p>在0.x.x版本中，文章的更新和豆瓣页面的爬取操作是绑定在一起的，无法支持单独更新文章或者单独爬取文章。</p><p>在1.x.x版本中，使用<code>hexo douban</code>命令即可生成指定页面，如果不加参数，那么默认参数为<code>-bgm</code>。</p><p><strong>需要注意的是</strong>，通常大家都喜欢用<code>hexo d</code>来作为<code>hexo deploy</code>命令的简化，但是当安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ hexo douban -h</span><br><span class="line">Usage: hexo douban</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">Generate pages from douban</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -b, --books   Generate douban books only</span><br><span class="line">  -g, --games   Generate douban games only</span><br><span class="line">  -m, --movies  Generate douban movies only</span><br></pre></td></tr></table></figure><p>如果配置了<code>builtin</code>参数为<code>true</code>，那么除了可以使用<code>hexo douban</code>命令之外，<code>hexo g</code>或<code>hexo s</code>也内嵌了生成页面的功能。</p><h3><span id="0xx版本">0.x.x版本</span></h3><p>直接使用命令<code>hexo g</code>即在生成静态页面前爬取豆瓣数据，如果使用<code>hexo s</code>则会监听文件变动，每有一次变动就会重新爬取数据。</p><h3><span id="升级">升级</span></h3><p>我会不定期更新一些功能或者修改一些Bug，所以如果想使用最新的特性，可以用下面的方法来更新:</p><ol><li>修改package.json内hexo-douban的版本号至最新</li><li>重新安装最新版本<code>npm install hexo-douban --save</code></li></ol><p>或者使用<code>npm install hexo-douban --update --save</code>直接更新。</p><h3><span id="显示">显示</span></h3><p>如果上面的配置和操作都没问题，就可以在生成站点之后打开 <code>//yourblog/books</code> 和 <code>//yourblog/movies</code>, <code>//yourblog/games</code>, 来查看结果.</p><h3><span id="菜单">菜单</span></h3><p>如果上面的显示没有问题就可以在主题的配置文件 <code>_config.yml</code> 里添加如下配置来为这些页面添加菜单链接.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">Books:</span> <span class="string">/books</span>     <span class="comment">#This is your books page</span></span><br><span class="line">  <span class="attr">Movies:</span> <span class="string">/movies</span>   <span class="comment">#This is your movies page</span></span><br><span class="line">  <span class="attr">Games:</span> <span class="string">/games</span>   <span class="comment">#This is your games page</span></span><br></pre></td></tr></table></figure><h3><span id="遇到的问题">遇到的问题</span></h3><ol><li>关于将builtin设置为true或者false的问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置为true</span><br><span class="line">直接使用命令&#96;hexo g&#96;即在生成静态页面前爬取豆瓣数据，不需要先执行 hexo douban</span><br></pre></td></tr></table></figure></li><li>关于报<code>userid</code> 设置完成，<code>hexo g</code> 抓取不到信息的问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 books have been loaded in 3066 ms, because you are offline or your network is bad</span><br><span class="line">0 movies have been loaded in 3041 ms, because you are offline or your network is bad</span><br></pre></td></tr></table></figure><code>timeout</code> 配置为 <code>timeout: 10000</code></li></ol><p>解决方式</p><p>尝试使用别的nodejs版本，之前用的14.xx.xx版本的不行，卸载nodejs，安装12.18.0版本解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;hexo-douban&quot;&gt;hexo-douban&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;一个在 &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 页面中嵌入豆瓣个人主页的小插件.&lt;
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.webpages.show/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.webpages.show/tags/hexo/"/>
    
      <category term="douban" scheme="https://www.webpages.show/tags/douban/"/>
    
  </entry>
  
  <entry>
    <title>记一次Centos7.5升级OpenSSH8.0p1</title>
    <link href="https://www.webpages.show/p/12223247/"/>
    <id>https://www.webpages.show/p/12223247/</id>
    <published>2020-07-26T06:27:20.248Z</published>
    <updated>2020-07-27T03:25:21.378Z</updated>
    
    <content type="html"><![CDATA[<p>服务器版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br></pre></td></tr></table></figure><p>升级前ssh版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ssh -V</span><br><span class="line">OpenSSH_7.4p1, OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><p>升级后ssh版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ssh -V</span><br><span class="line">OpenSSH_8.0p1, OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><p>为防止升级失败无法远程连接，安装telnet：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y telnet-server</span><br><span class="line"># yum install -y xinetd</span><br><span class="line"># systemctl start telnet.socket</span><br><span class="line"># systemctl start  xinetd</span><br></pre></td></tr></table></figure><p>允许root登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># echo &#39;pts&#x2F;0&#39; &gt;&gt;&#x2F;etc&#x2F;securetty</span><br><span class="line"># echo &#39;pts&#x2F;1&#39; &gt;&gt;&#x2F;etc&#x2F;securetty</span><br><span class="line"># systemctl restart telnet.socket</span><br></pre></td></tr></table></figure><p>开启telnet和xinetd开机自动启动，避免reboot后连不上Telnet：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable xinetd.service</span><br><span class="line"># systemctl enable telnet.socket</span><br></pre></td></tr></table></figure><p>测试一下telnet连接，然后就可以先放着了，这只是以防万一，接下来还是正常使用ssh连接操作</p><p>下载最新版本的包（openssh-8.0p1.tar.gz）并上传到服务器上</p><p>备份文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp -r &#x2F;etc&#x2F;ssh &#x2F;etc&#x2F;ssh.old</span><br></pre></td></tr></table></figure><p>卸载旧的ssh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># rpm -qa|grep openssh</span><br><span class="line">openssh-server-7.4p1-11.el7.x86_64</span><br><span class="line">openssh-7.4p1-11.el7.x86_64</span><br><span class="line">openssh-clients-7.4p1-11.el7.x86_64</span><br><span class="line"># rpm -e --nodeps openssh-server-7.4p1-11.el7.x86_64</span><br><span class="line"># rpm -e --nodeps openssh-7.4p1-11.el7.x86_64</span><br><span class="line"># rpm -e --nodeps openssh-clients-7.4p1-11.el7.x86_64</span><br><span class="line"># rpm -qa|grep openssh</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># install -v -m700 -d &#x2F;var&#x2F;lib&#x2F;sshd</span><br><span class="line"># chown -v root:sys &#x2F;var&#x2F;lib&#x2F;sshd</span><br><span class="line"># groupadd -g 50 sshd</span><br><span class="line"># useradd -c &#39;sshd PrivSep&#39; -d &#x2F;var&#x2F;lib&#x2F;sshd -g sshd -s &#x2F;bin&#x2F;false -u 50 sshd</span><br><span class="line"># tar -zxvf openssh-8.0p1.tar.gz</span><br><span class="line"># cd openssh-8.0p1</span><br><span class="line"># .&#x2F;configure --prefix&#x3D;&#x2F;usr --sysconfdir&#x3D;&#x2F;etc&#x2F;ssh --with-md5-passwords --with-privsep-path&#x3D;&#x2F;var&#x2F;lib&#x2F;sshd</span><br><span class="line"># make</span><br><span class="line"># chmod 600 &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key</span><br><span class="line"># chmod 600 &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ecdsa_key</span><br><span class="line"># chmod 600 &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key</span><br><span class="line"># make install</span><br><span class="line"># install -v -m755 contrib&#x2F;ssh-copy-id &#x2F;usr&#x2F;bin</span><br><span class="line"># install -v -m644 contrib&#x2F;ssh-copy-id.1 &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1</span><br><span class="line"># install -v -m755 -d &#x2F;usr&#x2F;share&#x2F;doc&#x2F;openssh-8.0p1</span><br><span class="line"># install -v -m644 INSTALL LICENCE OVERVIEW README* &#x2F;usr&#x2F;share&#x2F;doc&#x2F;openssh-8.0p1</span><br></pre></td></tr></table></figure><p>设置允许root登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;PermitRootLogin yes&quot; &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure><p>设置开机自启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cp -p contrib&#x2F;redhat&#x2F;sshd.init &#x2F;etc&#x2F;init.d&#x2F;sshd</span><br><span class="line"># chmod +x &#x2F;etc&#x2F;init.d&#x2F;sshd</span><br><span class="line"># chkconfig --add sshd</span><br><span class="line"># chkconfig sshd on</span><br><span class="line"># chkconfig --list sshd</span><br><span class="line"># systemctl restart sshd</span><br></pre></td></tr></table></figure><p>升级完成，查看版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ssh -V</span><br><span class="line">OpenSSH_8.0p1, OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><p>PS1：升级完成后别忘了恢复以前的telnet设置或关闭telnet.</p><p>PS2：如果中间有问题升级失败，且之前是rpm包安装的，可以直接以下命令进行回滚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install openssh-clients</span><br><span class="line"># yum -y install openssh-server</span><br><span class="line"># yum -y install openssh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务器版本：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
    
      <category term="OpenSSH" scheme="https://www.webpages.show/categories/OpenSSH/"/>
    
    
      <category term="OpenSSh" scheme="https://www.webpages.show/tags/OpenSSh/"/>
    
  </entry>
  
  <entry>
    <title>gitlab配置域名并https访问</title>
    <link href="https://www.webpages.show/p/5e94d2a7/"/>
    <id>https://www.webpages.show/p/5e94d2a7/</id>
    <published>2020-07-24T04:07:59.376Z</published>
    <updated>2020-07-26T10:29:49.524Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="gitlab默认nginx80端口">Gitlab默认Nginx80端口</span></h3><p>如果机器未占有80端口，可以直接替换成域名，解析后就可以直接访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;^external_url&quot; &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb #查看当前绑定的域名或者IP</span><br><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb   #打开配置文件</span><br><span class="line"># external_url &#39;http:&#x2F;&#x2F;192.168.174.131&#39;  #替换   #修改成域名访问</span><br><span class="line">external_url &#39;http:&#x2F;&#x2F;gitlab.inewmaker.com&#39;  </span><br><span class="line">gitlab-ctl reconfigure   #重新跑一下配置</span><br></pre></td></tr></table></figure><p>如果机器80端口以占有，需要修改gitlab端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;&#39;listen_port&quot; &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb   #查看默认端口</span><br><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb   #打开配置文件</span><br><span class="line">nginx[&#39;listen_port&#39;] &#x3D; 800     #找到取消注释，修改端口</span><br><span class="line">gitlab-ctl reconfigure   #重新跑一下配置</span><br></pre></td></tr></table></figure><p>由于更改端口，域名解析不到。提供方式使用云服务中的负载均衡。</p><h3><span id="gitlab配置https">Gitlab配置HTTPS</span></h3><p>   注：<br>   gitlab最新是开启https会自动配置，但只有三个月有效期<br>   使用自己设的加密证书应设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用自己设的加密证书应设置</span><br><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class="line"></span><br><span class="line">letsencrypt[&#39;enable&#39;] &#x3D; false</span><br><span class="line">letsencrypt[&#39;auto_renew&#39;] &#x3D; false</span><br></pre></td></tr></table></figure><pre><code>在/etc/gitlab/gitlab.rb禁用自动更新。否则，gitlab-ctl reconfigure 可能会尝试更新证书，从而覆盖它们。如果gitlab自签的证书过期，替换的一定要禁用自动更新</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;gitlab&#x2F;ssl   #把申请的证书放在这里</span><br><span class="line">vim  &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb   #打开配置文件</span><br><span class="line">external_url &#39;external_url &#39;https:&#x2F;&#x2F;gitlab.inewmaker.com&#39;  # 注：一定要HTTPS</span><br><span class="line">nginx[&#39;redirect_http_to_https&#39;]&#x3D; true   #取消注释改为 true</span><br><span class="line">nginx[&#39;ssl_certificate&#39;] &#x3D; &quot;&#x2F;etc&#x2F;gitlab&#x2F;ssl&#x2F;gitlab.pem&quot;    #放置对应的证书密钥</span><br><span class="line">nginx[&#39;ssl_certificate_key&#39;] &#x3D; &quot;&#x2F;etc&#x2F;gitlab&#x2F;ssl&#x2F;gitlab.key&quot; #放置对应的证书密钥</span><br><span class="line">gitlab-ctl reconfigure  #使配置生效</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl restart  # 使配置生效 #</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;gitlab默认nginx80端口&quot;&gt;Gitlab默认Nginx80端口&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;如果机器未占有80端口，可以直接替换成域名，解析后就可以直接访问。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="Gitlab" scheme="https://www.webpages.show/categories/Gitlab/"/>
    
    
      <category term="Gitlab" scheme="https://www.webpages.show/tags/Gitlab/"/>
    
      <category term="https" scheme="https://www.webpages.show/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>nginx 返回码 426 upgrade required 处理</title>
    <link href="https://www.webpages.show/p/328665dd/"/>
    <id>https://www.webpages.show/p/328665dd/</id>
    <published>2020-07-23T05:18:35.625Z</published>
    <updated>2020-07-26T10:46:00.136Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">426 upgrade required</span><br><span class="line"></span><br><span class="line">请求返回 426</span><br><span class="line"></span><br><span class="line">nginx 反向代理默认走的http 1.0版本</span><br><span class="line"></span><br><span class="line">但是 被反向代理的服务器是1.1版本的!</span><br><span class="line"></span><br><span class="line">so 在反向代理的时候加上一句</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_http_version 1.1;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   location ~* \.do &#123;</span><br><span class="line">                #if ($http_x_forwarded_proto !&#x3D; &quot;https&quot;) &#123;</span><br><span class="line">                #      rewrite ^(.*)$ https:&#x2F;&#x2F;$server_name$1 permanent;</span><br><span class="line">                #&#125;</span><br><span class="line">               proxy_http_version 1.1;</span><br><span class="line">               proxy_pass http:&#x2F;&#x2F;test-h5-api.7dian7fen.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.webpages.show/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="https://www.webpages.show/tags/nginx/"/>
    
      <category term="返回码" scheme="https://www.webpages.show/tags/%E8%BF%94%E5%9B%9E%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>常见的重定向方式</title>
    <link href="https://www.webpages.show/p/bb2a8a2e/"/>
    <id>https://www.webpages.show/p/bb2a8a2e/</id>
    <published>2020-07-23T05:17:02.236Z</published>
    <updated>2020-07-26T10:46:00.139Z</updated>
    
    <content type="html"><![CDATA[<p>第一种：使用==rewrite==指令，通过正则匹配所有的URI后再去掉开头第一个/(反斜线)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;(.*)$ https:&#x2F;&#x2F;www.linux.com&#x2F;$1;</span><br></pre></td></tr></table></figure><p>第二种：同样使用rewrite指令，不同的是通过==$request_uri==变量匹配所有的URI。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^ https:&#x2F;&#x2F;www.linux.com$request_uri? permanent;</span><br></pre></td></tr></table></figure><p>这样写的好处是省去了去掉开头第一个反斜线的过程，正则匹配上性能更优。<br>第三种：使用==return==指令，通过301状态码和==$request_uri==参数，直接告诉Nginx这是个301重定向和抓取指定URI。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 301 https:&#x2F;&#x2F;www.linux.com$request_uri;</span><br></pre></td></tr></table></figure><p>这种方法是性能上最优的，因为rewrite指令有很多写法和规则，执行完所有正则匹配后，Nginx 才会知道这是一个301永久重定向。</p><p>通过以上三种写法介绍，我们可以看出return指令在301跳转上比rewrite指令性能上更加有优势。虽然在访问量不大的情况下几种写法的性能表现上区别并不大，不过在海量访问中一个小小的优化也能在提升业务系统性能上起到不小的作用哟！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一种：使用==rewrite==指令，通过正则匹配所有的URI后再去掉开头第一个/(反斜线)。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.webpages.show/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="https://www.webpages.show/tags/nginx/"/>
    
      <category term="重定向" scheme="https://www.webpages.show/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>nginx rewrite 用法，用rewrite去除URL中的特定参数</title>
    <link href="https://www.webpages.show/p/fffbf386/"/>
    <id>https://www.webpages.show/p/fffbf386/</id>
    <published>2020-07-23T05:15:39.917Z</published>
    <updated>2020-07-26T10:46:00.130Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="nginx-rewrite-用法用rewrite去除url中的特定参数">nginx rewrite 用法，用rewrite去除URL中的特定参数</span></h2><p>日常服务中经常会用Nginx做一层代理转发，把Nginx当做前置机</p><p>比如，以下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 对外暴露 80 端口</span><br><span class="line">    listen    80;</span><br><span class="line">    server_name 192.168.10.231;</span><br><span class="line"></span><br><span class="line">    # 后端API地址暴露为：http:&#x2F;&#x2F;192.168.10.231&#x2F;apis</span><br><span class="line">    location &#x2F;apis &#123;</span><br><span class="line">        proxy_pass   http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;;</span><br><span class="line">        proxy_pass_request_headers      on;</span><br><span class="line">          # 重写URL 去除apis</span><br><span class="line">        rewrite &quot;^&#x2F;apis&#x2F;(.*)$&quot; &#x2F;$1 break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里的rewrite 就是为了去除URL中的/apis,实际的后端api中是没有这个参数的，但是为了做到在Nginx转发请求，前端需要加上这个参数，以便于区别</strong></p><p>比如前端的请求地址是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.10.231&#x2F;apis&#x2F;user</span><br></pre></td></tr></table></figure><p>那么实际上经过Nginx转发后请求的地址是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user</span><br></pre></td></tr></table></figure><p><strong>rewrite “^/api/(.)$” /$1 break，路径重写：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1)&quot;^&#x2F;api&#x2F;(.)$&quot;：匹配路径的正则表达式，用了分组语法就是*(.)**，把&#x2F;api&#x2F;以后的所有部分当做1组；</span><br><span class="line">（2）&#x2F;$1：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始，也就是api），即&#x2F;api&#x2F;后面的所有。这样新的路径就是除去&#x2F;api&#x2F;以外的所有，就达到了去除&#x2F;api前缀的目的</span><br></pre></td></tr></table></figure><p>；</p><p><strong>break：指令，常用的有2个，分别是：last、break；</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）last：重写路径结束后，将得到的路径重新进行一次路径匹配；</span><br><span class="line">（2）break：重写路径结束后，不再重新匹配路径。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;nginx-rewrite-用法用rewrite去除url中的特定参数&quot;&gt;nginx rewrite 用法，用rewrite去除URL中的特定参数&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;日常服务中经常会用Nginx做一层代理转发，把Nginx当做前置机&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.webpages.show/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="https://www.webpages.show/tags/nginx/"/>
    
      <category term="rewrite" scheme="https://www.webpages.show/tags/rewrite/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的location匹配</title>
    <link href="https://www.webpages.show/p/8b346831/"/>
    <id>https://www.webpages.show/p/8b346831/</id>
    <published>2020-07-23T05:13:59.462Z</published>
    <updated>2020-07-26T10:46:00.134Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="语法规则">语法规则</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location [ &#x3D; | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>语法规则很简单，一个==location==关键字，后面跟着可选的修饰符，后面是要匹配的字符，花括号中是要执行的操作。</p><h2><span id="修饰符">修饰符</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x3D; 表示精确匹配。只有请求的url路径与后面的字符串完全相等时，才会命中。</span><br><span class="line">~ 表示该规则是使用正则定义的，区分大小写。</span><br><span class="line">~* 表示该规则是使用正则定义的，不区分大小写。</span><br><span class="line">^~ 表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找。</span><br></pre></td></tr></table></figure><h2><span id="匹配过程">匹配过程</span></h2><p>对请求的url序列化。例如，对%xx等字符进行解码，去除url中多个相连的/，解析url中的.，..等。这一步是匹配的前置工作。</p><p>location有两种表示形式，一种是使用前缀字符，一种是使用正则。如果是正则的话，前面有<del>或</del>*修饰符。</p><p>具体的匹配过程如下：</p><p>首先先检查使用前缀字符定义的location，选择最长匹配的项并记录下来。</p><p>如果找到了精确匹配的location，也就是使用了=修饰符的location，结束查找，使用它的配置。</p><p>然后按顺序查找使用正则定义的location，如果匹配则停止查找，使用它定义的配置。</p><p>如果没有匹配的正则location，则使用前面记录的最长匹配前缀字符location。</p><p>基于以上的匹配过程，我们可以得到以下两点启示：</p><pre><code>使用正则定义的location在配置文件中出现的顺序很重要。因为找到第一个匹配的正则后，查找就停止了，后面定义的正则就是再匹配也没有机会了。使用精确匹配可以提高查找的速度。例如经常请求/的话，可以使用=来定义location。</code></pre><p>示例<br>接下来我们以一个例子来具体说明一下匹配过程。</p><p>假如我们有下面的一段配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">location &#x3D; &#x2F; &#123;</span><br><span class="line">    [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;user&#x2F; &#123;</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ &#x2F;images&#x2F; &#123;</span><br><span class="line">    [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">    [ configuration E ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 ==/== 精准匹配A，不再往下查找。</p><p>请求 ==/index.html== 匹配B。首先查找匹配的前缀字符，找到最长匹配是配置B，接着又按照顺序查找匹配的正则。结果没有找到，因此使用先前标记的最长匹配，即配置B。</p><p>请求 ==/user/index.html==匹配C。首先找到最长匹配C，由于后面没有匹配的正则，所以使用最长匹配C。<br>请求 ==/user/1.jpg== 匹配E。首先进行前缀字符的查找，找到最长匹配项C，继续进行正则查找，找到匹配项E。因此使用E。</p><p>请求 ==/images/1.jpg==匹配D。首先进行前缀字符的查找，找到最长匹配D。但是，特殊的是它使用了^~修饰符，不再进行接下来的正则的匹配查找，因此使用D。这里，如果没有前面的修饰符，其实最终的匹配是E。大家可以想一想为什么。</p><p>请求 ==/documents/about.html==匹配B。因为B表示任何以/开头的URL都匹配。在上面的配置中，只有B能满足，所以匹配B。</p><h2><span id="location-name的用法">location @name的用法</span></h2><p>@用来定义一个命名location。主要用于内部重定向，不能用来处理正常的请求。其用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    try_files $uri $uri&#x2F; @custom</span><br><span class="line">&#125;</span><br><span class="line">location @custom &#123;</span><br><span class="line">    # ...do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，当尝试访问url找不到对应的文件就重定向到我们自定义的命名location（此处为custom）。</p><p><strong>值得注意的是，命名location中不能再嵌套其它的命名location</strong>。</p><h2><span id="url尾部的需不需要">URL尾部的/需不需要</span></h2><p>关于URL尾部的/有三点也需要说明一下。第一点与location配置有关，其他两点无关。</p><ul><li>location中的字符有没有/都没有影响。也就是说/user/和/user是一样的。</li><li>如果URL结构是<a href="https://domain.com/的形式，尾部有没有/都不会造成重定向。因为浏览器在发起请求的时候，默认加上了/。虽然很多浏览器在地址栏里也不会显示/。这一点，可以访问baidu验证一下。" target="_blank" rel="noopener">https://domain.com/的形式，尾部有没有/都不会造成重定向。因为浏览器在发起请求的时候，默认加上了/。虽然很多浏览器在地址栏里也不会显示/。这一点，可以访问baidu验证一下。</a></li><li>如果URL的结构是<a href="https://domain.com/some-dir/。尾部如果缺少/将导致重定向。因为根据约定，URL尾部的/表示目录，没有/表示文件。所以访问/some-dir/时，服务器会自动去该目录下找对应的默认文件。如果访问/some-dir的话，服务器会先去找some-dir文件，找不到的话会将some-dir当成目录，重定向到/some-dir/，去该目录下找默认文件。可以去测试一下你的网站是不是这样的。" target="_blank" rel="noopener">https://domain.com/some-dir/。尾部如果缺少/将导致重定向。因为根据约定，URL尾部的/表示目录，没有/表示文件。所以访问/some-dir/时，服务器会自动去该目录下找对应的默认文件。如果访问/some-dir的话，服务器会先去找some-dir文件，找不到的话会将some-dir当成目录，重定向到/some-dir/，去该目录下找默认文件。可以去测试一下你的网站是不是这样的。</a><h2><span id="总结">总结</span></h2>location的配置有两种形式，前缀字符和正则。查找匹配的时候，先查找前缀字符，选择最长匹配项，再查找正则。正则的优先级高于前缀字符。</li></ul><p>正则的查找是按照在配置文件中的顺序进行的。因此正则的顺序很重要，建议越精细的放的越靠前。</p><p>使用=精准匹配可以加快查找的顺序，如果根域名经常被访问的话建议使用=。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;语法规则&quot;&gt;语法规则&lt;/span&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.webpages.show/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="https://www.webpages.show/tags/nginx/"/>
    
      <category term="location" scheme="https://www.webpages.show/tags/location/"/>
    
  </entry>
  
  <entry>
    <title>利用docker实现mysql主从同步读写分离，附赠docker搭建mycat读写分离</title>
    <link href="https://www.webpages.show/p/8eb47741/"/>
    <id>https://www.webpages.show/p/8eb47741/</id>
    <published>2020-07-23T05:12:26.889Z</published>
    <updated>2020-07-26T10:46:00.136Z</updated>
    
    <content type="html"><![CDATA[<p>下载mysql镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql5.7</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps:如果下载太慢，请添加腾讯源,依次执行</span><br><span class="line">echo &quot;OPTIONS&#x3D;&#39;--registry-mirror&#x3D;https:&#x2F;&#x2F;mirror.ccs.tencentyun.com&#39;&quot; &gt;&gt; &#x2F;etc&#x2F;sysconfig&#x2F;docker</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">service docker restart</span><br><span class="line">或者直接去阿里仓库下https:&#x2F;&#x2F;dev.aliyun.com&#x2F;search.html把上面的--registry-mirror&#x3D;https:&#x2F;&#x2F;mirror.ccs.tencentyun.com换成你的专属源就可以</span><br></pre></td></tr></table></figure><p>下载完输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io&#x2F;mysql            5.7               44a8e1a5c0b2        8 days ago          407 MB</span><br></pre></td></tr></table></figure><p>第二种：创建 MySQL 容器<br>创建主数据库容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-master -p 3307:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p>创建从数据库容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-slave -p 3308:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p>配置主数据库<br>首先，进入容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>连接mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p123456</span><br></pre></td></tr></table></figure><p>修改 root 可以通过任何客户端连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure><p>修改 MySQL 配置文档 ==/etc/mysql/mysql.conf.d/mysqld.cnf==，在 [mysqld] 段添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin&#x3D;mysql-bin    &#x2F;&#x2F;[必须]启用二进制日志</span><br><span class="line">server-id&#x3D;1          &#x2F;&#x2F;[必须]服务器标识ID，每台服务器唯一</span><br></pre></td></tr></table></figure><p>配置从服务器<br>首先，进入容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>连接mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p123456</span><br></pre></td></tr></table></figure><p>修改 root 可以通过任何客户端连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure><p>修改 MySQL 配置文档 ==/etc/mysql/mysql.conf.d/mysqld.cnf==，在 [mysqld] 段添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin&#x3D;mysql-bin    &#x2F;&#x2F;[必须]启用二进制日志</span><br><span class="line">server-id&#x3D;2          &#x2F;&#x2F;[必须]服务器标识ID，每台服务器唯一</span><br></pre></td></tr></table></figure><h4><span id="重启容器">重启容器</span></h4><p>配置 MySQL 主从复制<br>首先连接 master 服务器，查看数据库状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      154 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>记录 File 的值和 Position 的值，等会配置 slave 服务器的时候要用。</p><p>接下来连接 slave 服务器，配置主从复制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;change master to</span><br><span class="line">master_host&#x3D;&#39;x.x.x.x&#39;,</span><br><span class="line">master_user&#x3D;&#39;user&#39;,</span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000003&#39;,</span><br><span class="line">master_log_pos&#x3D;154,</span><br><span class="line">master_port&#x3D;3307,</span><br><span class="line">master_password&#x3D;&#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.03 sec)</span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>解释下配置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">master_host&#x3D;&#39;x.x.x.x&#39; &#x2F;&#x2F; 这里填 master 主机 ip</span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000003&#39;, &#x2F;&#x2F; 这里填写 File 的值</span><br><span class="line">master_log_pos&#x3D;154,&#x2F;&#x2F; 这里填写 Position 的值。</span><br><span class="line">mysql&gt; start slave;&#x2F;&#x2F; 启动从服务器复制功能</span><br></pre></td></tr></table></figure><p>如果不小心配置错, 输入 mysql&gt; stop slave; 然后重新录入一遍就可以了。</p><p>检查主从连接状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: x.x.x.x</span><br><span class="line">                  Master_User: user</span><br><span class="line">                  Master_Port: 32768</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 1338</span><br><span class="line">               Relay_Log_File: 8d1e3b87d499-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 1221</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1338</span><br><span class="line">              Relay_Log_Space: 1435</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: cd327a00-5e18-11e7-98f7-0242ac110006</span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这两个必须是Yes 为No 或者connect说明没有连接上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line"></span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>测试主从连接<br>注意设置主从后，操作只能在master终端上，slave上的操作不会同步到master上。</p><p>登陆master终端，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database sunhao;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sunhao             |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use sunhao</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;user_id&#96; bigint(20) AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(30) NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(30) DEFAULT NULL,</span><br><span class="line">   PRIMARY KEY (&#96;user_id&#96;)</span><br><span class="line">   ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user(username, password) values (&#39;test_user&#39;, &#39;test_pass&#39;);</span><br><span class="line">Query OK, 1 row affected (0.07 sec)</span><br></pre></td></tr></table></figure><pre><code>登陆slave服务器mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sunhao             || sys                |+--------------------+5 rows in set (0.00 sec)mysql&gt; use sunhaomysql&gt; select * from user;+---------+-----------+-----------+| user_id | username  | password  |+---------+-----------+-----------+|       1 | test_user | test_pass |+---------+-----------+-----------+1 row in set (0.00 sec)如果主服务器已经存在应用数据，则在进行主从复制时，需要单独复制处理（注意此操作，如果对从服务器单独录入的数据，会被覆盖掉。）：这里我们做一次完整的测试(1)在主服务器数据库插入新的数据，并进行锁表操作，不让数据再进行写入动作mysql&gt; insert into sunhao values(2,&apos;xiaoshuai&apos;);Query OK, 1 row affected (0.01 sec)mysql&gt; select * from sunhao;                   +------+-----------+| id   | name      |+------+-----------+|    1 | xiaoshuai ||    2 | xiaoshuai |+------+-----------+2 rows in set (0.00 sec)mysql&gt; FLUSH TABLES WITH READ LOCK;mysql&gt; show full processlist; `(2)退出mysql，用mysqldump备份数据文件到/var/lib,然后顺便多余的用tar打包一下玩。哈哈。mysql&gt; exitByeroot@980e5ea48152:/var/lib/mysql# mysqldump -u root -p  sunhao &gt; /var/lib/sunhao.dump    Enter password: root@980e5ea48152:/var/lib# tar -zcvf ./sunhao.dump .tar  ./sunhao.dump(3)打开宿主服务器，复制mysql主服务器文件sunhao.dump.tar。到宿主服务器[root]# docker ps CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES8d1e3b87d499        slave/mysql         &quot;docker-entrypoint.sh&quot;   4 hours ago         Up 4 hours          0.0.0.0:32769-&gt;3306/tcp   mysql-slave980e5ea48152        master/mysql        &quot;docker-entrypoint.sh&quot;   4 hours ago         Up 4 hours          0.0.0.0:32768-&gt;3306/tcp   mysql-mastermkdir -p /var/mydatadocker cp 980e:/var/lib/sunhao.dump.tar /var/mydata/cd /var/mydata[root@VM_128_230_centos mydata]# lssunhao.dump.tar解释:docker cp 980e:/var/lib/sunhao.dump.tar /var/mydata/980e是980e5ea48152的缩写。保证不重复简写就可以980e:/var/lib/sunhao.dump.tar 意思就是选中的容器下面你的文件下的sunhao.dump.tar文件/var/mydata/ 目标文件(4)在宿主主机上输入[root]# docker cp /var/mydata/sunhao.dump.tar 8d1e3b87d49936414c0e91ffdc60a054e7f4ef8b15baee295350565519abba0e:/var/lib/(5)在从服务器上输入root@8d1e3b87d499:/# cd /var/lib/root@8d1e3b87d499:/var/lib# tar -zcvf sunhao.dump.tar(6)在从服务器上输入tar -zxvpf /var/lib/mysqlbak.sql.tarmysql -uroot -pmysql sunhao &lt; /var/lib/sunhao.dump;如果写入成功,这个时候就可以用select查询到数据。(2)取消主服务器数据库锁定mysql&gt; UNLOCK TABLES;docker搭建mycat读写分离制作mycat容器，并运行首先在本地新建个文件夹/usr/mycat。然后去mycat官网下载最新版本，这里我下载的是1.6版本。安装完解压到这里。http://dl.mycat.io/[http://dl.mycat.io/1.6-RELEASE/](http://dl.mycat.io/1.6-RELEASE/ &quot;http://dl.mycat.io/1.6-RELEASE/&quot;)编写Dockerfile，内容为# 来源镜像,因为mycat依赖java，所以这里直接选的java环境。FROM javaRUN  mkdir -p /var/local/mycat/# Add复制Mycat到容器ADD  mycat/ /var/local/mycat/ ENTRYPOINT  [&quot;/var/local/mycat/bin/mycat&quot;,&quot;console&quot;,&quot;&amp;&quot;]# 对外端口EXPOSE 8066 9066# 启动控制台CMD  [&quot;/var/local/mycat/bin/mycat&quot;,&quot;console&quot;,&quot;&amp;&quot;]先别急着构建镜像，我们先修改下mycat的配置文件。[root@centos mycat]# lltotal 15324-rw-r--r-- 1 root root      357 Jul  5 15:26 Dockerfile-rw-r--r-- 1 root root 15662280 Jul  3 15:07 Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gzdrwxr-xr-x 7 root root     4096 Jul  5 15:27 mycat在我用的1.6版本。mycat对外端口是注释掉的。我们要打开下。我们编辑/usr/mycat/mycat/conf/server.xml.找到第32-35行。去掉注释符号。&lt;!--    &lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt;     &lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt;     &lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; --&gt;我们往下看 有这么几句。这里分别默认两个用户。 name为root的管理员，可以进行读写。和普通用户只能进行读。我们也可以手动创建修改，另外password是密码 schemas是用户所能操作的库。 在这里我什么都没有改。下面都是默认。&lt;user name=&quot;root&quot;&gt;        &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;        &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;        &lt;!-- 表级 DML 权限设置 --&gt;        &lt;!--                 &lt;privileges check=&quot;false&quot;&gt;            &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;                &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;                &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;            &lt;/schema&gt;        &lt;/privileges&gt;                 --&gt;    &lt;/user&gt;    &lt;user name=&quot;user&quot;&gt;        &lt;property name=&quot;password&quot;&gt;user&lt;/property&gt;        &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;        &lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;    &lt;/user&gt;我们编辑/usr/mycat/mycat/conf/schema.xml，这个是我们配置分片和逻辑库表，规则的地方，数据节点，和数据源。其中schema是我们所操作的逻辑库。默认为TESTDB。下面分别是各个逻辑表。在这里直接默认。我只是为了区分dh和db两个字的区别，把db1-3改了data1-3你们可以不用管。&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt;    &lt;!-- auto sharding by id (long) --&gt;    &lt;table name=&quot;travelrecord&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;auto-sharding-long&quot; /&gt;    &lt;!-- global table is auto cloned to all defined data nodes ,so can join        with any table whose sharding node is in the same data node --&gt;    &lt;table name=&quot;company&quot; primaryKey=&quot;ID&quot; type=&quot;global&quot; dataNode=&quot;dn1,dn2,dn3&quot; /&gt;    &lt;table name=&quot;goods&quot; primaryKey=&quot;ID&quot; type=&quot;global&quot; dataNode=&quot;dn1,dn2&quot; /&gt;    &lt;!-- random sharding using mod sharind rule --&gt;    &lt;table name=&quot;hotnews&quot; primaryKey=&quot;ID&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2,dn3&quot;           rule=&quot;mod-long&quot; /&gt;    &lt;!-- &lt;table name=&quot;dual&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dnx,dnoracle2&quot; type=&quot;global&quot;        needAddLimit=&quot;false&quot;/&gt; &lt;table name=&quot;worker&quot; primaryKey=&quot;ID&quot; dataNode=&quot;jdbc_dn1,jdbc_dn2,jdbc_dn3&quot;        rule=&quot;mod-long&quot; /&gt; --&gt;    &lt;table name=&quot;employee&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dn1,dn2&quot;           rule=&quot;sharding-by-intfile&quot; /&gt;    &lt;table name=&quot;customer&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dn1,dn2&quot;           rule=&quot;sharding-by-intfile&quot;&gt;        &lt;childTable name=&quot;orders&quot; primaryKey=&quot;ID&quot; joinKey=&quot;customer_id&quot;                    parentKey=&quot;id&quot;&gt;            &lt;childTable name=&quot;order_items&quot; joinKey=&quot;order_id&quot;                        parentKey=&quot;id&quot; /&gt;        &lt;/childTable&gt;        &lt;childTable name=&quot;customer_addr&quot; primaryKey=&quot;ID&quot; joinKey=&quot;customer_id&quot;                    parentKey=&quot;id&quot; /&gt;    &lt;/table&gt;    &lt;!-- &lt;table name=&quot;oc_call&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dn1$0-743&quot; rule=&quot;latest-month-calldate&quot;        /&gt; --&gt;&lt;/schema&gt;修改37-45行 /usr/mycat/mycat/conf/wrapper.conf。设置java虚拟机内存。# Initial Java Heap Size (in MB)wrapper.java.initmemory=3# Maximum Java Heap Size (in MB)wrapper.java.maxmemory=64在schema.xml往下修改。43-55行。数据源地址dataHost。这些就是我们的数据源，mycat把逻辑表的数据，读写都来源于我们配置地址。其中writeHost写入源。设置多个，默认也只用第一个。readHost是读服务器。heartbeat是我们检测数据库是否正常运行的。在这里 mycat 有两种配置方式。分别是两个writeHost和一个writeHost一个readHost第一种如果写入失败，还是可读。第二种如果写入失败，不可读。我们采用安全稳妥的方式。一个writeHost一个readHost我的配置为&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;20&quot; balance=&quot;1&quot;          writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;2&quot;  slaveThreshold=&quot;100&quot;&gt;    &lt;heartbeat&gt;show slave status&lt;/heartbeat&gt;    &lt;!-- can have multi write hosts --&gt;    &lt;writeHost host=&quot;hostM1&quot; url=&quot;115.159.124.18:32768&quot; user=&quot;root&quot;    password=&quot;mysql&quot;&gt;        &lt;!-- can have multi read hosts --&gt;        &lt;readHost host=&quot;hostS1&quot; url=&quot;115.159.124.18:32769&quot; user=&quot;root&quot;    password=&quot;mysql&quot; /&gt;    &lt;/writeHost&gt;&lt;/dataHost&gt;hostM1和hostS1分别对应我们创建的两个docker容器的对外端口。修改/usr/mycat/mycat/conf/log4j2.xml 这个是配置日志文件的，我们打开debug方便我们学习。修改第25行info为debug&lt;asyncRoot level=&quot;debug&quot; includeLocation=&quot;true&quot;&gt;     &lt;AppenderRef ref=&quot;Console&quot; /&gt;     &lt;AppenderRef ref=&quot;RollingFile&quot;/&gt; &lt;/asyncRoot&gt;构建镜像docker build -t sunhao/mycat:1.6  . 别忘了最后面的圆点运行创建容器docker  run  --name sunhaomycat  -d -p 8066:8066 -p 9066:9066 sunhao/mycat:1.6就那么简单。我们的mycat已经搭建成功了。测试下吧打开4个终端1个宿主，1个mysql主，1个mysql从，1个用来看mycat日志。宿主环境操作在宿主终端上，安装mysql。并且连接我们的mycat。[root@VM_128_230_centos mycat]# mysql -uroot -p123456 -h115.159.124.18 -P8066Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MySQL connection id is 8Server version: 5.6.29-mycat-1.6-RELEASE-20161028204710 MyCat Server (OpenCloundDB)Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MySQL [(none)]&gt;完美，Server version: 5.6.29-mycat-1.6-RELEASE-20161028204710 MyCat Server 出现这，说明mycat运行了。进行简单的操作。Database changedMySQL [TESTDB]&gt; show databases;+----------+| DATABASE |+----------+| TESTDB   |+----------+1 row in set (0.00 sec)MySQL [TESTDB]&gt; show tables;+------------------+| Tables in TESTDB |+------------------+| company          || customer         || customer_addr    || employee         || goods            || hotnews          || orders           || order_items      || travelrecord     |+------------------+9 rows in set (0.00 sec)MySQL [TESTDB]&gt;测试下写入MySQL [TESTDB]&gt; create table travelrecord (id bigint not null primary key,user_id varchar(100),traveldate DATE, fee decimal,days int);ERROR 1105 (HY000): Table &apos;travelrecord&apos; already existsMySQL [TESTDB]&gt; insert into travelrecord(id,user_id,traveldate,fee,days)  values(1,@@hostname,20170707,100,10);Query OK, 1 row affected (0.01 sec)MySQL [TESTDB]&gt; MySQL [TESTDB]&gt; insert into travelrecord(id,user_id,traveldate,fee,days)  values(10000001,@@hostname,20170707,100,10);Query OK, 1 row affected (0.00 sec)分别进入mysql主和mysql从可以看到。MySQL [data2]&gt; use data3                  Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMySQL [data3]&gt; select * from travelrecord;+----------+--------------+------------+------+------+| id       | user_id      | traveldate | fee  | days |+----------+--------------+------------+------+------+| 10000001 | 980e5ea48152 | 2017-07-07 |  100 |   10 |+----------+--------------+------------+------+------+1 row in set (0.00 sec)MySQL [data3]&gt; use data1;                 Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMySQL [data1]&gt; select * from travelrecord;+----+--------------+------------+------+------+| id | user_id      | traveldate | fee  | days |+----+--------------+------------+------+------+|  1 | 980e5ea48152 | 2017-07-07 |  100 |   10 |+----+--------------+------------+------+------+1 row in set (0.00 sec)MySQL [data1]&gt;测试读取分离打开一个终端，用docker exec -it 61e74eee274d9d0f0404a572dec1d14c8b03dfd480e13d3c96fa04c534df0556  bash进入我们的mycat容器其中61e74为你的mycat容器这个就是我们的日志终端root@61e74eee274d:/var/local/mycat/logs# ls2017-07  mycat.log  mycat.pid  wrapper.logroot@61e74eee274d:/var/local/mycat/logs# tail -f  mycat.log在宿主环境mycat下输入MySQL [TESTDB]&gt; select * from travelrecord ;ERROR 2006 (HY000): MySQL server has gone awayNo connection. Trying to reconnect...Connection id:    9Current database: TESTDB+----------+--------------+------------+------+------+| id       | user_id      | traveldate | fee  | days |+----------+--------------+------------+------+------+|        1 | 980e5ea48152 | 2017-07-07 |  100 |   10 || 10000001 | 980e5ea48152 | 2017-07-07 |  100 |   10 |+----------+--------------+------------+------+------+2 rows in set (0.02 sec)然后切回我们的日志终端，按ctrl+c中断。然后输入cat tail 进行查看，很长在最后面找个空白的大坑（自己体会）慢慢找。017-07-07 06:28:16.863 DEBUG [$_NIOREACTOR-5-RW] (io.mycat.backend.datasource.PhysicalDatasource.releaseChannel(PhysicalDatasource.java:442)) - release channel MySQLConnection [id=5, lastTime=1499408896859, user=root, schema=data3, old shema=data3, borrowed=true, fromSlaveDB=false, threadId=527, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=115.159.184.18, port=32774, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]2017-07-07 06:28:16.864 DEBUG [$_NIOREACTOR-3-RW] (io.mycat.backend.datasource.PhysicalDatasource.releaseChannel(PhysicalDatasource.java:442)) - release channel MySQLConnection [id=33, lastTime=1499408896859, user=root, schema=data3, old shema=data3, borrowed=true, fromSlaveDB=true, threadId=108, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=115.159.184.18, port=32770, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]2017-07-07 06:28:24.473 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.net.FrontendConnection.query(FrontendConnection.java:288)) - ServerConnection [id=2, schema=TESTDB, host=115.159.184.18, user=root,txIsolation=3, autocommit=true, schema=TESTDB] select * from travelrecord2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.server.ServerQueryHandler.query(ServerQueryHandler.java:57)) - ServerConnection [id=2, schema=TESTDB, host=115.159.184.18, user=root,txIsolation=3, autocommit=true, schema=TESTDB]select * from travelrecord2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.cache.impl.EnchachePool.get(EnchachePool.java:71)) - SQLRouteCache hit cache ,key:TESTDBselect * from travelrecord2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.server.NonBlockingSession.execute(NonBlockingSession.java:110)) - ServerConnection [id=2, schema=TESTDB, host=115.159.184.18, user=root,txIsolation=3, autocommit=true, schema=TESTDB]select * from travelrecord, route={   1 -&gt; dn1{SELECT *FROM travelrecordLIMIT 100}   2 -&gt; dn2{SELECT *FROM travelrecordLIMIT 100}   3 -&gt; dn3{SELECT *FROM travelrecordLIMIT 100}} rrs 2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.&lt;init&gt;(MultiNodeQueryHandler.java:101)) - execute mutinode query select * from travelrecord2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.&lt;init&gt;(MultiNodeQueryHandler.java:137)) - has data merge logic 2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:170)) - rrs.getRunOnSlave()-null2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:180)) - node.getRunOnSlave()1-null2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:182)) - node.getRunOnSlave()2-null2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:96)) - rrs.getRunOnSlave() null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:127)) - rrs.getRunOnSlave() null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBPool.getRWBanlanceCon(PhysicalDBPool.java:456)) - select read source hostS1 for dataHost:localhost12017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:180)) - node.getRunOnSlave()1-null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:182)) - node.getRunOnSlave()2-null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:96)) - rrs.getRunOnSlave() null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:127)) - rrs.getRunOnSlave() null就是这了我们可以看到select read source hostS1 for dataHost:localhost1来至哪个服务器2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBPool.getRWBanlanceCon(PhysicalDBPool.java:456)) - select read source hostS1 for dataHost:localhost12017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:180)) - node.getRunOnSlave()1-null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:182)) - node.getRunOnSlave()2-null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:96)) - rrs.getRunOnSlave() null2017-07-07 06:28:24.476 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection如果配置不小心错了，可以用docker cp 复制到镜像里，然后重启镜像docker cp /usr/mycat/mycat/conf 61e74eee274d9d0f0404a572dec1d14c8b03dfd480e13d3c96fa04c534df0556:/var/local/mycat/confdocker restart 61e74eee274</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下载mysql镜像。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://www.webpages.show/categories/Mysql/"/>
    
    
      <category term="mysql" scheme="https://www.webpages.show/tags/mysql/"/>
    
      <category term="docker" scheme="https://www.webpages.show/tags/docker/"/>
    
      <category term="mycat" scheme="https://www.webpages.show/tags/mycat/"/>
    
  </entry>
  
  <entry>
    <title>Nginx rewrite模块深入浅出详解</title>
    <link href="https://www.webpages.show/p/eee93e1e/"/>
    <id>https://www.webpages.show/p/eee93e1e/</id>
    <published>2020-07-22T16:00:00.000Z</published>
    <updated>2020-07-26T10:46:00.135Z</updated>
    
    <content type="html"><![CDATA[<h5><span id="ewrite模块ngx_http_rewrite_module">ewrite模块（ngx_http_rewrite_module）</span></h5><p>nginx通过ngx_http_rewrite_module模块支持url重写、支持if条件判断，但不支持else。另外该模块需要PCRE支持，应在编译nginx时指定PCRE支持。根据相关变量重定向和选择不同的配置，从一个location跳转到另一个location，不过这样的循环最多可以执行10次，超过后nginx将返回500错误。同时，重写模块包含set指令，来创建新的变量并设其值，这在有些情景下非常有用的，如记录条件标识、传递参数到其他location、记录做了什么等等。学习rewrite之前要对正则表达式要很熟悉，下面先给出一些常用的正则表达式元字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.     :匹配除换行符以外的任意字符</span><br><span class="line">?     :重复0次或1次</span><br><span class="line">+     :重复1次或更多次</span><br><span class="line">*     :重复0次或更多次</span><br><span class="line">\d    :匹配数字</span><br><span class="line">^     :匹配字符串的开始字符</span><br><span class="line">$     :匹配字符串的结束字符</span><br><span class="line">&#123;n&#125;   :重复n次</span><br><span class="line">&#123;n,&#125;  :重复n次或更多次</span><br><span class="line">[c]   :匹配单个字符c</span><br><span class="line">[a-z] :匹配a-z小写字母的任意一个</span><br></pre></td></tr></table></figure><p>在rewrite中，如果使用小括号()，那么在小括号之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容，后面会说到。</p><h6><span id="rewrite模块指令">Rewrite模块指令</span></h6><p>1）break</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: break;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>此指令的意思是停止执行当前虚拟主机的后续rewrite指令集。使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ($slow) &#123;</span><br><span class="line">     limit_rate 10k;</span><br><span class="line">     break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）if  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: if (condition) &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure><p>对给定的条件（condition）进行判断，如果条件为真，大括号内的rewrite指令将被执行。</p><p>条件(conditon)可以是如下任何操作：</p><ul><li><ol><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false；</li></ol></li><li><ol start="2"><li>使用“=”和“!=”比较一个变量和字符串；</li></ol></li><li><ol start="3"><li>使用“<del>”做正则表达式匹配，“</del>*”做不区分大小写的正则匹配，“!~”做区分大小写的正则不匹配；</li></ol></li><li><ol start="4"><li>使用“-f”和“!-f” 检查一个文件是否存在；</li></ol></li><li><ol start="5"><li>使用“-d”和“!-d”检查一个目录是否存在；</li></ol></li><li><ol start="6"><li>使用“-e”和“!-e”检查一个文件、目录、符号链接是否存在；</li></ol></li><li><ol start="7"><li>使用“-x”和“ !-x”检查一个文件是否可执行；<br>如下示例：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果UA包含&quot;MSIE&quot;，rewrite请求到&#x2F;msid&#x2F;目录下</span><br><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ &#x2F;msie&#x2F;$1 break;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果cookie匹配正则，设置变量$id等于正则引用部分</span><br><span class="line">if ($http_cookie ~* &quot;id&#x3D;([^;]+)(?:;|$)&quot;) &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;给某个访问IP返回403</span><br><span class="line">if ( $remote_addr &#x3D; &quot;202\.38\.78\.85&quot; )&#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span><br><span class="line">if ($request_method &#x3D; POST) &#123;</span><br><span class="line">    return 405;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果$slow可以通过set指令设置，则进行限速处理</span><br><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">    break;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果query string中包含&quot;post&#x3D;140&quot;，则永久重定向到example.com</span><br><span class="line">if ($args ~ post&#x3D;140)&#123;</span><br><span class="line">    rewrite ^ http:&#x2F;&#x2F;example.com&#x2F; permanent;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;防盗链</span><br><span class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123;</span><br><span class="line">    valid_referers none blocked www.baidu.com www.ywnds.com;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）return</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: return code [text];</span><br><span class="line">        return code URL;</span><br><span class="line">        return URL;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>停止处理并为客户端返回状态码，非标准的444状态码将关闭连接，不发送任何响应头。可以使用的状态码有：204，400，402-406，408，410, 411, 413, 416与500-504。如果状态码附带文字段落，该文本将被放置在响应主体。相反，如果状态码后面是一个URL，该URL将成为location头部值。没有状态码的URL将被视为一个302状态码。</p><p>4）rewrite</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: rewrite regex replacement [flag];</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>rewrite指令的功能就是，使用nginx提供的全局变量或自己设置的变量，然后结合正则表达式和标志位实现url重写以及重定向。rewrite指令只能放在server、location或if中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <a href="http://ywnds.com/a/we/index.php?id=1&amp;u=str，只对/a/we/index.php重写，语法如上面所示。" target="_blank" rel="noopener">http://ywnds.com/a/we/index.php?id=1&amp;u=str，只对/a/we/index.php重写，语法如上面所示。</a></p><p>如果想对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p><p>或许看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p><p>1）处理在server级别中定义的模块指令；</p><p>2）为请求查找location；</p><p>3）处理在选中的location中定义的模块指令，如果指令改变了URI，按新的URI查找location。这个循环至多重复10次，之后nginx返回错误500 (Internal Server Error)；</p><p>如果一个URI匹配了rewrite指令指定的正则表达式（regex），则URI就按照replacement进行重写，而rewrite按配置文件中出现的顺序执行。其中flag标志可以停止继续处理。如果replacement以”http://”或”https://”开始，将不再继续处理，那么这个重定向将直接返回给客户端。</p><p>flag可以是如下参数：</p><p>last，完成该rewrite规则的执行后，停止处理后续rewrite指令集；然后查找匹配改变后URI的新location；</p><p>break，完成该rewrite规则的执行后，停止处理后续rewrite指令集，并不再重新查找；但是当前location内剩余非rewrite语句和location外的的非rewrite语句可以执行；</p><p>redirect，返回302临时重定向，地址栏会显示跳转后的地址；</p><p>permanent，返回301永久重定向，地址栏会显示跳转后的地址；即表示如果客户端不清理浏览器缓存，那么返回的结果将永久保存在客户端浏览器中了。</p><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里last和break区别有点难以理解：</p><p>1）last一般写在server和if中，而break一般使用在location中；</p><p>2）last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配；</p><p>3）break和last都能组织继续执行后面的rewrite指令。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     ...</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;media&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.mp3 last;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;audio&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.ra last;</span><br><span class="line">     return 403;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这些rewrite放到“/download/”路径，那么location如下所示，这时应使用break而不是last，使用last将循环10次匹配，然后返回500错误:   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;download&#x2F; &#123;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;media&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.mp3 break;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;audio&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.ra break;</span><br><span class="line">     return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于重写后的URL（replacement）包含原请求的请求参数，原URL的?后的内容。如果不想带原请求的参数，可以在replacement后加一个问号。如下，我们加了一个自定义的参数user=$1,然后在结尾处放了一个问号?，把原请求的参数去掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;users&#x2F;(.*)$ &#x2F;show?user&#x3D;$1? last;</span><br></pre></td></tr></table></figure><p>注: 对花括号“}”或“;”来说，使用时需要用双引号或单引号包围。因为他们既能用在重定向的正则表达式里，也是用在配置文件里分割代码块, 为了避免冲突, 正则表达式里带花括号的话，应该用双引号（或者单引号）包围。比如，要将类似以下的URI：”/photos/123456″重定向到”/path/to/photos/12/1234/123456.png”可以用以下方法 (注意双引号):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite &quot;&#x2F;photos&#x2F;([0-9] &#123;2&#125;)([0-9] &#123;2&#125;)([0-9] &#123;2&#125;)&quot; &#x2F;path&#x2F;to&#x2F;photos&quot;</span><br></pre></td></tr></table></figure><p>5）set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: set $variable value;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>定义一个变量并赋值，值可以是文本，变量或者文本变量混合体。</p><p>6）rewrite_log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: rewrite_log on | off;</span><br><span class="line">Default:rewrite_log off;</span><br><span class="line">Context:http, server, location, if</span><br></pre></td></tr></table></figure><p>开启或关闭以notice级别打印rewrite处理日志到error log文件。nginx打开rewrite log的例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rewrite_log on;                        &#x2F;&#x2F;打开rewrite log</span><br><span class="line">error_log logs&#x2F;xxx.error.log notice;   &#x2F;&#x2F;把error log的级别调整为notice</span><br></pre></td></tr></table></figure><p>7）uninitialized_variable_warn  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: uninitialized_variable_warn on | off;</span><br><span class="line">Default:uninitialized_variable_warn on;</span><br><span class="line">Context:http, server, location, if</span><br></pre></td></tr></table></figure><p>控制是否输出为初始化的变量到日志。</p><p>重写规则组成部分</p><p>第一部分：任何重写规则的第一部分都是一个正则表达式</p><p>正则表达式可以使用括号来捕获，后续可以根据位置来将其引用，位置变量值取决于捕获正则表达式中的顺序，$1引用第一个括号中的值，$2引用第二个括号中的值，以此类推。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^&#x2F;images&#x2F;([a-z]&#123;2&#125;)&#x2F;([a-z0-9]&#123;5&#125;)&#x2F;(.*)\.(png|jpg|gif)$</span><br></pre></td></tr></table></figure><p>$1是两个小写字母组成的字符串，$2是由小写字母和0到9的数字组成的5个字符的字符串，$3将是个文件名，$4是png、jpg、gif中的其中一个。</p><p>第二部分：重写规则的第二部分是URI</p><p>当重写规则第一部分被匹配到了之后，则请求被改写，那么该URI可能包含正则表达式中的捕获的位置参数或这个级别下的nginx任何配置变量。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;data?file&#x3D;$3.$4</span><br></pre></td></tr></table></figure><p>如果这个URI不匹配nginx配置的任何location，那么将给客户端返回301(永久重定向)或302(临时重定向)的状态码来表示重定向类型。该状态码可以通过第三个参数来明确指定。</p><p>第三部分：重写规则的第三部分就是标记（flag）</p><p>第三部分也就是尾部的标记（flag）， last标记将导致重写后的URI搜索匹配nginx的其他location，最多可循环10次。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite &#39;^&#x2F;images&#x2F;([a-z]&#123;2&#125;)&#x2F;([a-z0-9]&#123;5&#125;)&#x2F;(.*)\.(png|jpg|gif)$&#39; &#x2F;data?file&#x3D;$3.$4 last;</span><br></pre></td></tr></table></figure><p>全局变量</p><p>下面是可以用作if判断的全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$args               #这个变量等于请求行中的参数，同$query_string;</span><br><span class="line">$content_length     #请求头中的Content-length字段;</span><br><span class="line">$content_type       #请求头中的Content-Type字段;</span><br><span class="line">$document_root      #当前请求在root指令中指定的值，如:root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">$host               #请求主机头字段，否则为服务器名称;</span><br><span class="line">$http_user_agent    #客户端agent信息;</span><br><span class="line">$http_cookie        #客户端cookie信息;</span><br><span class="line">$limit_rate         #这个变量可以限制连接速率;</span><br><span class="line">$request_method     #客户端请求的动作，通常为GET或POST;</span><br><span class="line">$remote_addr        #客户端的IP地址;</span><br><span class="line">$remote_port        #客户端的端口;</span><br><span class="line">$remote_user        #已经经过Auth Basic Module验证的用户名;</span><br><span class="line">$request_filename   #当前请求的文件路径，由root或alias指令与URI请求生成;</span><br><span class="line">$scheme             #HTTP方法（如http，https）;</span><br><span class="line">$server_protocol    #请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1;</span><br><span class="line">$server_addr        #服务器地址，在完成一次系统调用后可以确定这个值;</span><br><span class="line">$server_name        #服务器名称;</span><br><span class="line">$server_port        #请求到达服务器的端口号;</span><br><span class="line">$request_uri        #包含请求参数的原始URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”;</span><br><span class="line">$uri                #不带请求参数的当前URI，$uri不包含主机名，如”&#x2F;foo&#x2F;bar.html”;</span><br><span class="line">$document_uri       #与$uri相同,例：http:&#x2F;&#x2F;localhost:88&#x2F;test1&#x2F;test2&#x2F;test.php;</span><br></pre></td></tr></table></figure><p>例如：<a href="http://localhost:88/test1/test2/test.php这个URL，其中：" target="_blank" rel="noopener">http://localhost:88/test1/test2/test.php这个URL，其中：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$host：localhost</span><br><span class="line">$server_port：88</span><br><span class="line">$request_uri：http:&#x2F;&#x2F;localhost:88&#x2F;test1&#x2F;test2&#x2F;test.php</span><br><span class="line">$document_uri：&#x2F;test1&#x2F;test2&#x2F;test.php</span><br><span class="line">$document_root：&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">$request_filename：&#x2F;var&#x2F;www&#x2F;html&#x2F;test1&#x2F;test2&#x2F;test.php</span><br></pre></td></tr></table></figure><p>Rewrite模块使用实例</p><p>1）使用rewrite指令把访问80端口的请求重定向到443</p><p>对于HTTPS网站，一般最少需要定义两个虚拟主机，一个是使用80的虚拟主机，另一个就是使用443端口的虚拟主机了。比如在浏览器输入<a href="http://www.ywnds.com（http://www.ywnds.com）会自动跳转到https://www.ywnds.com。" target="_blank" rel="noopener">www.ywnds.com（http://www.ywnds.com）会自动跳转到https://www.ywnds.com。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^(.*)$ https:&#x2F;&#x2F;www.ywnds.com$uri redirect;</span><br></pre></td></tr></table></figure><p>这种跳转就是302临时重定向跳转，如果把flag变成permanent就成了301永久重定向跳转了。</p><p>2）作为重写规则的一部分，传递新的查询字符串参数是使用重写规则的目标之一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;images&#x2F;(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ &#x2F;resizer&#x2F;$1.$4?width&#x3D;$2&amp;height&#x3D;$3? last;</span><br></pre></td></tr></table></figure><p>3）使用rewrite模块禁止用户代理</p><p>Nginx可以通过各种方式来限制访问，例如NGINX基本Http认证、allow/deny等等，这些都是前文提过的，下面来看看nginx如何通过用户代理来禁止访问。</p><p>user agent是什么?</p><p>简单来说告诉服务器你当前使用的是什么浏览器、工具等来访问我的。例如火狐、chrome、wget、curl等浏览器或工具。使用$http_user_agent变量就可以获取到用户代理，一般在定义日志格式时都会使用这个变量，把用户代理记录到日志中去。</p><p>如何禁止特定UA？</p><p>我们不希望被使用wget或者curl来下载我的文件，怎么做呢？这里就可以使用rewrite模块了，编辑nginx配置文件，以下内容放在http配置段，那么整个nginx都生效。如果放到server里，那么一个域名生效，你放哪，哪就有效！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~* (curl) ) &#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁止多个UA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~* (wget|curl) ) &#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx重写规则说起来挺简单的，做起来就难，重点在于正则表达式，同时，还需要考虑到nginx执行顺序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5&gt;&lt;span id=&quot;ewrite模块ngx_http_rewrite_module&quot;&gt;ewrite模块（ngx_http_rewrite_module）&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;nginx通过ngx_http_rewrite_module模块支持url重写、支持if条
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.webpages.show/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="https://www.webpages.show/tags/nginx/"/>
    
      <category term="rewrite" scheme="https://www.webpages.show/tags/rewrite/"/>
    
  </entry>
  
</feed>
