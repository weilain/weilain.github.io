<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xxxx</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-23T02:58:39.191Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx的配置</title>
    <link href="http://yoursite.com/2020/07/23/nginx%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/07/23/nginx%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2020-07-23T02:58:39.191Z</published>
    <updated>2020-07-23T02:58:39.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a><strong>常用的命令</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nginx -h   # 帮助</span><br><span class="line">nginx -t   # 验证配置文件的正确性</span><br><span class="line">nginx -v   # 查看nginx的版本</span><br><span class="line">nginx -c filename  # 按指定的配置文件启动，默认的路径conf&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">nginx -s reload  # 重新载入配置文件</span><br><span class="line">nginx -s reopen  # 重启nginx</span><br><span class="line">nginx -s stop    # 关闭nginx</span><br><span class="line">nginx -s quit    # 退出</span><br></pre></td></tr></table></figure><h1 id="nginx的配置文件的详解"><a href="#nginx的配置文件的详解" class="headerlink" title="nginx的配置文件的详解"></a>nginx的配置文件的详解</h1><pre><code>nginx的配置分为四个部分：main(全区设置)，server(主机配置)，upstream(负载均衡服务器设置)，和location(URL匹配特定位置设置)。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">#定义Nginx运行的用户和用户组</span><br><span class="line">user www www;</span><br><span class="line">#pid文件</span><br><span class="line">#进程文件</span><br><span class="line">pid &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">#&#x3D;&#x3D;worker进程数，通常设置等同于CPU数量，auto为自动检测</span><br><span class="line">worker_processes 8;</span><br><span class="line">worker_processes auto;</span><br><span class="line">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class="line">#&#x3D;&#x3D;worker进程打开最大文件数，可CPU*10000设置</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">#worker_rlimit_nofile 100000;</span><br><span class="line">#全局错误日志</span><br><span class="line">error_log  logs&#x2F;error.log;</span><br><span class="line"># error_log  logs&#x2F;error.log  info; # 可以设置级别</span><br><span class="line"></span><br><span class="line"># 设置前台运行，默认后台运行</span><br><span class="line">daemon off;</span><br><span class="line"></span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#events模块中包含nginx中所有处理连接的设置</span><br><span class="line">events &#123;</span><br><span class="line">    #&#x3D;&#x3D;worker进程同时打开的最大连接数，可CPU*2048设置</span><br><span class="line">    worker_connections 2048;</span><br><span class="line">    #&#x3D;&#x3D;告诉nginx收到一个新链接通知后接受尽可能多的链接</span><br><span class="line">    multi_accept on;</span><br><span class="line">    #&#x3D;&#x3D;设置用于复用客户端线程的轮训方法</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#http模块控制着nginx http处理的所有核心特性</span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types; #文件扩展名与文件类型映射表</span><br><span class="line">    default_type application&#x2F;octet-stream; #默认文件类型</span><br><span class="line">    #charset utf-8; #默认编码</span><br><span class="line">    server_names_hash_bucket_size 128;     #服务器名字的hash表大小</span><br><span class="line">    #上传文件大小限制</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line">    #&#x3D;&#x3D;允许客户端请求的最大单文件字节数</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line">    #&#x3D;&#x3D;冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line">    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    tcp_nopush on; #防止网络阻塞</span><br><span class="line">    tcp_nodelay on; #防止网络阻塞</span><br><span class="line">    keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class="line">    </span><br><span class="line">    #日志格式设定</span><br><span class="line">    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span><br><span class="line">    #定义本虚拟主机的访问日志</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    #&#x3D;&#x3D;设置nginx采用gzip压缩的形式发送数据，减少发送数据量，但会增加请求处理时间及CPU处理时间，需要权衡</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k; #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k; #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    #&#x3D;&#x3D;设置数据压缩等级，1-9之间，9最慢压缩比最大</span><br><span class="line">    gzip_comp_level 2; #压缩等级</span><br><span class="line">    #压缩类型，默认就已经包含text&#x2F;html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_types text&#x2F;plain text&#x2F;css text&#x2F;xml text&#x2F;javascript  application&#x2F;json application&#x2F;x-javascript application&#x2F;xml application&#x2F;xml+rss</span><br><span class="line">    #&#x3D;&#x3D;加vary给代理服务器使用，针对有的浏览器支持压缩，有个不支持，根据客户端的HTTP头来判断是否需要压缩</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m; </span><br><span class="line">    #nginx在压缩资源之前，先查找是否有预先gzip处理过的资源</span><br><span class="line">    #!gzip_static on;</span><br><span class="line">    #为指定的客户端禁用gzip功能</span><br><span class="line">    gzip_disable &quot;MSIE[1-6]\.&quot;;</span><br><span class="line">    #允许或禁止压缩基于请求和相应的响应流，any代表压缩所有请求</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    #&#x3D;&#x3D;设置对数据启用压缩的最少字节数，如果请求小于10240字节则不压缩，会影响请求速度</span><br><span class="line">    gzip_min_length 10240;</span><br><span class="line"></span><br><span class="line">    #&#x3D;&#x3D;开发缓存的同时也指定了缓存文件的最大数量，20s如果文件没有请求则删除缓存</span><br><span class="line">    open_file_cache max&#x3D;100000 inactive&#x3D;20s;</span><br><span class="line">    #&#x3D;&#x3D;指多长时间检查一次缓存的有效信息</span><br><span class="line">    open_file_cache_valid 60s;</span><br><span class="line">    #&#x3D;&#x3D;文件缓存最小的访问次数，只有访问超过5次的才会被缓存</span><br><span class="line">    open_file_cache_min_uses 5;</span><br><span class="line">    #当搜索一个文件时是否缓存错误信息</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line"></span><br><span class="line">    #&#x3D;&#x3D;允许客户端请求的最大单文件字节数</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line">    #&#x3D;&#x3D;冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    upstream blog.ha97.com &#123;</span><br><span class="line">    #ip_hash;</span><br><span class="line">    #weight参数表示权重值，权值越高被分配到的几率越大</span><br><span class="line">    server 192.168.80.121:80 weight&#x3D;3;</span><br><span class="line">    server 192.168.80.122:80 weight&#x3D;2;</span><br><span class="line">    server 192.168.80.123:80 weight&#x3D;3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #对 &quot;&#x2F;&quot; 启用反向代理</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    #以下是一些反向代理的配置，可选。</span><br><span class="line">    #允许客户端请求的最大单文件字节数</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">    client_body_buffer_size 128k;</span><br><span class="line">    #&#x3D;&#x3D;nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">    proxy_connect_timeout 60;</span><br><span class="line">    #&#x3D;&#x3D;连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">    proxy_read_timeout 120;</span><br><span class="line">    #&#x3D;&#x3D;后端服务器数据回传时间(代理发送超时)</span><br><span class="line">    proxy_send_timeout 20;</span><br><span class="line">    #&#x3D;&#x3D;设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">    proxy_buffer_size 32k;</span><br><span class="line">    #&#x3D;&#x3D;proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">    proxy_buffers 4 128k;</span><br><span class="line">    #&#x3D;&#x3D;高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">    proxy_busy_buffers_size 256k;</span><br><span class="line">    #&#x3D;&#x3D;设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">    proxy_temp_file_write_size 256k;</span><br><span class="line">    #&#x3D;&#x3D;1G内存缓冲空间，3天不用删除，最大磁盘缓冲空间2G</span><br><span class="line">    proxy_cache_path &#x2F;home&#x2F;cache levels&#x3D;1:2 keys_zone&#x3D;cache_one:1024m inactive&#x3D;3d max_size&#x3D;2g;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定负载均衡服务器列表</span><br><span class="line">    upstream nginx.test.com&#123;</span><br><span class="line">        #后端服务器访问规则</span><br><span class="line">        #ip_hash;</span><br><span class="line">        #weight参数表示权重值，权值越高被分配到的几率越大</span><br><span class="line">        #server 10.11.12.116:80 weight&#x3D;5;</span><br><span class="line">        #PC_Local</span><br><span class="line">        server 10.11.12.116:80;</span><br><span class="line">        #PC_Server</span><br><span class="line">        server 10.11.12.112:80;</span><br><span class="line">        #Notebook</span><br><span class="line">        #server 10.11.12.106:80;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #虚拟主机设定模块（挂载多个站点，只需要配置多个server及upstream节点即可）</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听80端口</span><br><span class="line">        listen 80;</span><br><span class="line">        #定义使用nginx.test.com访问</span><br><span class="line">        server_name nginx.test.com;</span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log logs&#x2F;nginx.test.com.access.log;</span><br><span class="line">        </span><br><span class="line">        #默认请求</span><br><span class="line">        # 语法规则：location [&#x3D;|~|~*|^~] &#x2F;uri&#x2F; &#123;...&#125; 先匹配普通location，在匹配正则location</span><br><span class="line">        # &#x3D; 开头表示精确匹配</span><br><span class="line">        # ^~ 开头表示uri以某个常规字符串开头，理解为匹配url路径即可，无需考虑编解码</span><br><span class="line">        # ~ 开头表示区分大小写的正则匹配</span><br><span class="line">        # ~* 开头表示不区分大小写的正则匹配</span><br><span class="line">        # !~ 开头表示区分大小写的不匹配的正则</span><br><span class="line">        # !~* 开头表示不区分大小写的不匹配的正则</span><br><span class="line">        # &#x2F; 通用匹配，任何请求都会被匹配到</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            #限制IP访问</span><br><span class="line">            deny 192.168.0.2；</span><br><span class="line">            allow 192.168.0.0&#x2F;24;</span><br><span class="line">            allow 192.168.1.1;</span><br><span class="line">            deny all;</span><br><span class="line">            #定义服务器的默认网站根目录位置</span><br><span class="line">            root html;</span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">            #定义后端负载服务器组</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;nginx.test.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #定义错误提示页面</span><br><span class="line">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^&#x2F;(images|javascript|js|css|flash|media|static)&#x2F;&#123;</span><br><span class="line">            root &#x2F;var&#x2F;www&#x2F;virtual&#x2F;htdocs;</span><br><span class="line">            #过期时间1天</span><br><span class="line">            expires 1d;</span><br><span class="line">            #关闭媒体文件日志</span><br><span class="line">            access_log off;</span><br><span class="line">            log_not_found off;</span><br><span class="line">        &#125;</span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location &#x2F;NginxStatus &#123;</span><br><span class="line">            #!stub_status on; #无此关键字</span><br><span class="line">            access_log off;</span><br><span class="line">            auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file conf&#x2F;htpasswd;</span><br><span class="line">        &#125;</span><br><span class="line">        #禁止访问的文件.htxxx</span><br><span class="line">        location ~ &#x2F;\.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #网站较多的情况下ngxin又不会请求瓶颈可以考虑挂多个站点，并把虚拟主机配置单独放在一个文件内，引入进来</span><br><span class="line">    #include website.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对域名的匹配规则"><a href="#对域名的匹配规则" class="headerlink" title="对域名的匹配规则"></a>对域名的匹配规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server_name location;      # 匹配本地主机ip；</span><br><span class="line">server_name www.baidu.com; # 精确配置  </span><br><span class="line">server_name *.baidu.com;   # 以通配符开头的配置  </span><br><span class="line">server_name baidu.*;       # 以通配符结尾的配置  </span><br><span class="line">server_name  ~^(?&lt;user&gt;.+)\.example\.net$;  #正则的配置，必须以波浪线为开头</span><br></pre></td></tr></table></figure><h1 id="路由对location的匹配规则"><a href="#路由对location的匹配规则" class="headerlink" title="路由对location的匹配规则"></a>路由对location的匹配规则</h1><h4 id="贪婪原则：匹配尽可能长的路径；"><a href="#贪婪原则：匹配尽可能长的路径；" class="headerlink" title="贪婪原则：匹配尽可能长的路径；"></a>贪婪原则：匹配尽可能长的路径；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;data&#x2F;www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;images&#x2F; &#123;</span><br><span class="line">        root &#x2F;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># &#x2F;images&#x2F;匹配到第二个；</span><br></pre></td></tr></table></figure><h4 id="通配规则"><a href="#通配规则" class="headerlink" title="通配规则"></a>通配规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以&#x3D;开头，表示精确匹配；</span><br><span class="line">以^~开头，表示uri以某个常规字符串开头，不是正则匹配；</span><br><span class="line">以~开头，表示区分大小写的正则匹配；</span><br><span class="line">以~*开头，表示不区分大小写的正则匹配；</span><br><span class="line">&#x2F;，表示通用匹配, 如果没有其它匹配,任何请求都会匹配到；</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如果有两个开头一样的路由，有可能匹配不到</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line"></span><br><span class="line">location &#x2F;eeg</span><br><span class="line"></span><br><span class="line">location &#x2F;eegabc</span><br><span class="line"></span><br><span class="line"># 上面会造成&#x2F;eegabc匹配失败</span><br></pre></td></tr></table></figure><h1 id="nginx的日志设置规则"><a href="#nginx的日志设置规则" class="headerlink" title="nginx的日志设置规则"></a>nginx的日志设置规则</h1><h4 id="主要分为access-log和error-log"><a href="#主要分为access-log和error-log" class="headerlink" title="主要分为access_log和error_log;"></a>主要分为access_log和error_log;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">access log : 记录了哪些用户，哪些页面以及用户浏览器、ip和其他的访问信息</span><br><span class="line">默认值: access_log logs&#x2F;access.log combined;  # 表示配置的路径和格式</span><br><span class="line">配置段: http, server, location, if in location, limit_except</span><br><span class="line"></span><br><span class="line">error log : 记录服务器错误日志</span><br><span class="line">默认值: error_log logs&#x2F;error.log error;  # 表示配置的路径和级别，有[debug | info | notice | warn | error | crit | alert | emerg]八个级别;</span><br><span class="line">配置段: main, http, server, location</span><br></pre></td></tr></table></figure><h1 id="负载均衡的规则"><a href="#负载均衡的规则" class="headerlink" title="负载均衡的规则"></a>负载均衡的规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#设定负载均衡服务器列表</span><br><span class="line">upstream test&#123;</span><br><span class="line">    #后端服务器访问规则</span><br><span class="line">    #ip_hash;   # 根据ip的hash规则分配，主要是当需要会话保持的时候，session是不能共享的；</span><br><span class="line">    #weight参数表示权重值，权值越高被分配到的几率越大，服务器的运算能力有时不是一样的；</span><br><span class="line">    #server 10.11.12.116:80 weight&#x3D;5;</span><br><span class="line">    #PC_Local</span><br><span class="line">    server 10.11.12.116:80 max_fails&#x3D;3 fail_timeout&#x3D;30; </span><br><span class="line">    # max_fails:最多的转发失败的次数，如果转发失败超过次数，就认为该服务器挂掉；</span><br><span class="line">    # fail_timeout：请求失败暂停的服务时间，在这个时间内会暂时放弃转发给该服务器；</span><br><span class="line">    #PC_Server</span><br><span class="line">    server 10.11.12.112:80 down;  # down:暂时不参与负载均衡；</span><br><span class="line">    server 10.11.12.112:80 backup;  # backup:备用服务器，当其他所有的机器忙的时候，会启用备用服务器；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用的命令&quot;&gt;&lt;a href=&quot;#常用的命令&quot; class=&quot;headerlink&quot; title=&quot;常用的命令&quot;&gt;&lt;/a&gt;&lt;strong&gt;常用的命令&lt;/strong&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Nginx-rewrite模块深入浅出详解</title>
    <link href="http://yoursite.com/2020/07/23/Nginx-rewrite%E6%A8%A1%E5%9D%97%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/23/Nginx-rewrite%E6%A8%A1%E5%9D%97%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-07-23T02:58:02.766Z</published>
    <updated>2020-07-23T02:58:02.766Z</updated>
    
    <content type="html"><![CDATA[<h5 id="ewrite模块（ngx-http-rewrite-module）"><a href="#ewrite模块（ngx-http-rewrite-module）" class="headerlink" title="ewrite模块（ngx_http_rewrite_module）"></a>ewrite模块（ngx_http_rewrite_module）</h5><p>nginx通过ngx_http_rewrite_module模块支持url重写、支持if条件判断，但不支持else。另外该模块需要PCRE支持，应在编译nginx时指定PCRE支持。根据相关变量重定向和选择不同的配置，从一个location跳转到另一个location，不过这样的循环最多可以执行10次，超过后nginx将返回500错误。同时，重写模块包含set指令，来创建新的变量并设其值，这在有些情景下非常有用的，如记录条件标识、传递参数到其他location、记录做了什么等等。学习rewrite之前要对正则表达式要很熟悉，下面先给出一些常用的正则表达式元字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.     :匹配除换行符以外的任意字符</span><br><span class="line">?     :重复0次或1次</span><br><span class="line">+     :重复1次或更多次</span><br><span class="line">*     :重复0次或更多次</span><br><span class="line">\d    :匹配数字</span><br><span class="line">^     :匹配字符串的开始字符</span><br><span class="line">$     :匹配字符串的结束字符</span><br><span class="line">&#123;n&#125;   :重复n次</span><br><span class="line">&#123;n,&#125;  :重复n次或更多次</span><br><span class="line">[c]   :匹配单个字符c</span><br><span class="line">[a-z] :匹配a-z小写字母的任意一个</span><br></pre></td></tr></table></figure><p>在rewrite中，如果使用小括号()，那么在小括号之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容，后面会说到。</p><h6 id="Rewrite模块指令"><a href="#Rewrite模块指令" class="headerlink" title="Rewrite模块指令"></a>Rewrite模块指令</h6><p>1）break</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: break;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>此指令的意思是停止执行当前虚拟主机的后续rewrite指令集。使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ($slow) &#123;</span><br><span class="line">     limit_rate 10k;</span><br><span class="line">     break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）if  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: if (condition) &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure><p>对给定的条件（condition）进行判断，如果条件为真，大括号内的rewrite指令将被执行。</p><p>条件(conditon)可以是如下任何操作：</p><ul><li><ol><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false；</li></ol></li><li><ol start="2"><li>使用“=”和“!=”比较一个变量和字符串；</li></ol></li><li><ol start="3"><li>使用“<del>”做正则表达式匹配，“</del>*”做不区分大小写的正则匹配，“!~”做区分大小写的正则不匹配；</li></ol></li><li><ol start="4"><li>使用“-f”和“!-f” 检查一个文件是否存在；</li></ol></li><li><ol start="5"><li>使用“-d”和“!-d”检查一个目录是否存在；</li></ol></li><li><ol start="6"><li>使用“-e”和“!-e”检查一个文件、目录、符号链接是否存在；</li></ol></li><li><ol start="7"><li>使用“-x”和“ !-x”检查一个文件是否可执行；<br>如下示例：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果UA包含&quot;MSIE&quot;，rewrite请求到&#x2F;msid&#x2F;目录下</span><br><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ &#x2F;msie&#x2F;$1 break;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果cookie匹配正则，设置变量$id等于正则引用部分</span><br><span class="line">if ($http_cookie ~* &quot;id&#x3D;([^;]+)(?:;|$)&quot;) &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;给某个访问IP返回403</span><br><span class="line">if ( $remote_addr &#x3D; &quot;202\.38\.78\.85&quot; )&#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span><br><span class="line">if ($request_method &#x3D; POST) &#123;</span><br><span class="line">    return 405;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果$slow可以通过set指令设置，则进行限速处理</span><br><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">    break;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果query string中包含&quot;post&#x3D;140&quot;，则永久重定向到example.com</span><br><span class="line">if ($args ~ post&#x3D;140)&#123;</span><br><span class="line">    rewrite ^ http:&#x2F;&#x2F;example.com&#x2F; permanent;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;防盗链</span><br><span class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123;</span><br><span class="line">    valid_referers none blocked www.baidu.com www.ywnds.com;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）return</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: return code [text];</span><br><span class="line">        return code URL;</span><br><span class="line">        return URL;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>停止处理并为客户端返回状态码，非标准的444状态码将关闭连接，不发送任何响应头。可以使用的状态码有：204，400，402-406，408，410, 411, 413, 416与500-504。如果状态码附带文字段落，该文本将被放置在响应主体。相反，如果状态码后面是一个URL，该URL将成为location头部值。没有状态码的URL将被视为一个302状态码。</p><p>4）rewrite</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: rewrite regex replacement [flag];</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>rewrite指令的功能就是，使用nginx提供的全局变量或自己设置的变量，然后结合正则表达式和标志位实现url重写以及重定向。rewrite指令只能放在server、location或if中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <a href="http://ywnds.com/a/we/index.php?id=1&amp;u=str，只对/a/we/index.php重写，语法如上面所示。" target="_blank" rel="noopener">http://ywnds.com/a/we/index.php?id=1&amp;u=str，只对/a/we/index.php重写，语法如上面所示。</a></p><p>如果想对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p><p>或许看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p><p>1）处理在server级别中定义的模块指令；</p><p>2）为请求查找location；</p><p>3）处理在选中的location中定义的模块指令，如果指令改变了URI，按新的URI查找location。这个循环至多重复10次，之后nginx返回错误500 (Internal Server Error)；</p><p>如果一个URI匹配了rewrite指令指定的正则表达式（regex），则URI就按照replacement进行重写，而rewrite按配置文件中出现的顺序执行。其中flag标志可以停止继续处理。如果replacement以”http://”或”https://”开始，将不再继续处理，那么这个重定向将直接返回给客户端。</p><p>flag可以是如下参数：</p><p>last，完成该rewrite规则的执行后，停止处理后续rewrite指令集；然后查找匹配改变后URI的新location；</p><p>break，完成该rewrite规则的执行后，停止处理后续rewrite指令集，并不再重新查找；但是当前location内剩余非rewrite语句和location外的的非rewrite语句可以执行；</p><p>redirect，返回302临时重定向，地址栏会显示跳转后的地址；</p><p>permanent，返回301永久重定向，地址栏会显示跳转后的地址；即表示如果客户端不清理浏览器缓存，那么返回的结果将永久保存在客户端浏览器中了。</p><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里last和break区别有点难以理解：</p><p>1）last一般写在server和if中，而break一般使用在location中；</p><p>2）last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配；</p><p>3）break和last都能组织继续执行后面的rewrite指令。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     ...</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;media&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.mp3 last;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;audio&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.ra last;</span><br><span class="line">     return 403;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这些rewrite放到“/download/”路径，那么location如下所示，这时应使用break而不是last，使用last将循环10次匹配，然后返回500错误:   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;download&#x2F; &#123;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;media&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.mp3 break;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;audio&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.ra break;</span><br><span class="line">     return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于重写后的URL（replacement）包含原请求的请求参数，原URL的?后的内容。如果不想带原请求的参数，可以在replacement后加一个问号。如下，我们加了一个自定义的参数user=$1,然后在结尾处放了一个问号?，把原请求的参数去掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;users&#x2F;(.*)$ &#x2F;show?user&#x3D;$1? last;</span><br></pre></td></tr></table></figure><p>注: 对花括号“}”或“;”来说，使用时需要用双引号或单引号包围。因为他们既能用在重定向的正则表达式里，也是用在配置文件里分割代码块, 为了避免冲突, 正则表达式里带花括号的话，应该用双引号（或者单引号）包围。比如，要将类似以下的URI：”/photos/123456″重定向到”/path/to/photos/12/1234/123456.png”可以用以下方法 (注意双引号):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite &quot;&#x2F;photos&#x2F;([0-9] &#123;2&#125;)([0-9] &#123;2&#125;)([0-9] &#123;2&#125;)&quot; &#x2F;path&#x2F;to&#x2F;photos&quot;</span><br></pre></td></tr></table></figure><p>5）set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: set $variable value;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>定义一个变量并赋值，值可以是文本，变量或者文本变量混合体。</p><p>6）rewrite_log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: rewrite_log on | off;</span><br><span class="line">Default:rewrite_log off;</span><br><span class="line">Context:http, server, location, if</span><br></pre></td></tr></table></figure><p>开启或关闭以notice级别打印rewrite处理日志到error log文件。nginx打开rewrite log的例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rewrite_log on;                        &#x2F;&#x2F;打开rewrite log</span><br><span class="line">error_log logs&#x2F;xxx.error.log notice;   &#x2F;&#x2F;把error log的级别调整为notice</span><br></pre></td></tr></table></figure><p>7）uninitialized_variable_warn  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: uninitialized_variable_warn on | off;</span><br><span class="line">Default:uninitialized_variable_warn on;</span><br><span class="line">Context:http, server, location, if</span><br></pre></td></tr></table></figure><p>控制是否输出为初始化的变量到日志。</p><p>重写规则组成部分</p><p>第一部分：任何重写规则的第一部分都是一个正则表达式</p><p>正则表达式可以使用括号来捕获，后续可以根据位置来将其引用，位置变量值取决于捕获正则表达式中的顺序，$1引用第一个括号中的值，$2引用第二个括号中的值，以此类推。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^&#x2F;images&#x2F;([a-z]&#123;2&#125;)&#x2F;([a-z0-9]&#123;5&#125;)&#x2F;(.*)\.(png|jpg|gif)$</span><br></pre></td></tr></table></figure><p>$1是两个小写字母组成的字符串，$2是由小写字母和0到9的数字组成的5个字符的字符串，$3将是个文件名，$4是png、jpg、gif中的其中一个。</p><p>第二部分：重写规则的第二部分是URI</p><p>当重写规则第一部分被匹配到了之后，则请求被改写，那么该URI可能包含正则表达式中的捕获的位置参数或这个级别下的nginx任何配置变量。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;data?file&#x3D;$3.$4</span><br></pre></td></tr></table></figure><p>如果这个URI不匹配nginx配置的任何location，那么将给客户端返回301(永久重定向)或302(临时重定向)的状态码来表示重定向类型。该状态码可以通过第三个参数来明确指定。</p><p>第三部分：重写规则的第三部分就是标记（flag）</p><p>第三部分也就是尾部的标记（flag）， last标记将导致重写后的URI搜索匹配nginx的其他location，最多可循环10次。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite &#39;^&#x2F;images&#x2F;([a-z]&#123;2&#125;)&#x2F;([a-z0-9]&#123;5&#125;)&#x2F;(.*)\.(png|jpg|gif)$&#39; &#x2F;data?file&#x3D;$3.$4 last;</span><br></pre></td></tr></table></figure><p>全局变量</p><p>下面是可以用作if判断的全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$args               #这个变量等于请求行中的参数，同$query_string;</span><br><span class="line">$content_length     #请求头中的Content-length字段;</span><br><span class="line">$content_type       #请求头中的Content-Type字段;</span><br><span class="line">$document_root      #当前请求在root指令中指定的值，如:root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">$host               #请求主机头字段，否则为服务器名称;</span><br><span class="line">$http_user_agent    #客户端agent信息;</span><br><span class="line">$http_cookie        #客户端cookie信息;</span><br><span class="line">$limit_rate         #这个变量可以限制连接速率;</span><br><span class="line">$request_method     #客户端请求的动作，通常为GET或POST;</span><br><span class="line">$remote_addr        #客户端的IP地址;</span><br><span class="line">$remote_port        #客户端的端口;</span><br><span class="line">$remote_user        #已经经过Auth Basic Module验证的用户名;</span><br><span class="line">$request_filename   #当前请求的文件路径，由root或alias指令与URI请求生成;</span><br><span class="line">$scheme             #HTTP方法（如http，https）;</span><br><span class="line">$server_protocol    #请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1;</span><br><span class="line">$server_addr        #服务器地址，在完成一次系统调用后可以确定这个值;</span><br><span class="line">$server_name        #服务器名称;</span><br><span class="line">$server_port        #请求到达服务器的端口号;</span><br><span class="line">$request_uri        #包含请求参数的原始URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”;</span><br><span class="line">$uri                #不带请求参数的当前URI，$uri不包含主机名，如”&#x2F;foo&#x2F;bar.html”;</span><br><span class="line">$document_uri       #与$uri相同,例：http:&#x2F;&#x2F;localhost:88&#x2F;test1&#x2F;test2&#x2F;test.php;</span><br></pre></td></tr></table></figure><p>例如：<a href="http://localhost:88/test1/test2/test.php这个URL，其中：" target="_blank" rel="noopener">http://localhost:88/test1/test2/test.php这个URL，其中：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$host：localhost</span><br><span class="line">$server_port：88</span><br><span class="line">$request_uri：http:&#x2F;&#x2F;localhost:88&#x2F;test1&#x2F;test2&#x2F;test.php</span><br><span class="line">$document_uri：&#x2F;test1&#x2F;test2&#x2F;test.php</span><br><span class="line">$document_root：&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">$request_filename：&#x2F;var&#x2F;www&#x2F;html&#x2F;test1&#x2F;test2&#x2F;test.php</span><br></pre></td></tr></table></figure><p>Rewrite模块使用实例</p><p>1）使用rewrite指令把访问80端口的请求重定向到443</p><p>对于HTTPS网站，一般最少需要定义两个虚拟主机，一个是使用80的虚拟主机，另一个就是使用443端口的虚拟主机了。比如在浏览器输入<a href="http://www.ywnds.com（http://www.ywnds.com）会自动跳转到https://www.ywnds.com。" target="_blank" rel="noopener">www.ywnds.com（http://www.ywnds.com）会自动跳转到https://www.ywnds.com。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^(.*)$ https:&#x2F;&#x2F;www.ywnds.com$uri redirect;</span><br></pre></td></tr></table></figure><p>这种跳转就是302临时重定向跳转，如果把flag变成permanent就成了301永久重定向跳转了。</p><p>2）作为重写规则的一部分，传递新的查询字符串参数是使用重写规则的目标之一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;images&#x2F;(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ &#x2F;resizer&#x2F;$1.$4?width&#x3D;$2&amp;height&#x3D;$3? last;</span><br></pre></td></tr></table></figure><p>3）使用rewrite模块禁止用户代理</p><p>Nginx可以通过各种方式来限制访问，例如NGINX基本Http认证、allow/deny等等，这些都是前文提过的，下面来看看nginx如何通过用户代理来禁止访问。</p><p>user agent是什么?</p><p>简单来说告诉服务器你当前使用的是什么浏览器、工具等来访问我的。例如火狐、chrome、wget、curl等浏览器或工具。使用$http_user_agent变量就可以获取到用户代理，一般在定义日志格式时都会使用这个变量，把用户代理记录到日志中去。</p><p>如何禁止特定UA？</p><p>我们不希望被使用wget或者curl来下载我的文件，怎么做呢？这里就可以使用rewrite模块了，编辑nginx配置文件，以下内容放在http配置段，那么整个nginx都生效。如果放到server里，那么一个域名生效，你放哪，哪就有效！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~* (curl) ) &#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁止多个UA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~* (wget|curl) ) &#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx重写规则说起来挺简单的，做起来就难，重点在于正则表达式，同时，还需要考虑到nginx执行顺序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;ewrite模块（ngx-http-rewrite-module）&quot;&gt;&lt;a href=&quot;#ewrite模块（ngx-http-rewrite-module）&quot; class=&quot;headerlink&quot; title=&quot;ewrite模块（ngx_http_rewrite_
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>nginx-expires配置详解</title>
    <link href="http://yoursite.com/2020/07/23/nginx-expires%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/23/nginx-expires%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-07-23T02:57:07.402Z</published>
    <updated>2020-07-23T02:57:07.403Z</updated>
    
    <content type="html"><![CDATA[<p>expires起到控制页面缓存的作用，合理的配置expires可以减少很多服务器的请求</p><p>要配置expires，可以在http段中或者server段中或者location段中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.(gif|jpg|jpeg|png|bmp|ico)$ &#123;</span><br><span class="line">           root &#x2F;var&#x2F;www&#x2F;img&#x2F;;</span><br><span class="line">           expires 30d;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>控制图片等过期时间为30天，当然这个时间可以设置的更长。具体视情况而定</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.(wma|wmv|asf|mp3|mmf|zip|rar|swf|flv)$ &#123;</span><br><span class="line">               root &#x2F;var&#x2F;www&#x2F;upload&#x2F;;</span><br><span class="line">               expires max;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>expires 指令可以控制 HTTP 应答中的“ Expires ”和“ Cache-Control ”的头标（起到控制页面缓存的作用）</p><p>语法：expires [time|epoch|max|pff]</p><p>默认值：off</p><p>expires指令控制HTTP应答中的“Expires”和“Cache-Control”Header头部信息，启动控制页面缓存的作用</p><p>time:可以使用正数或负数。“Expires”头标的值将通过当前系统时间加上设定time值来设定。</p><p>time值还控制”Cache-Control”的值：</p><p>负数表示no-cache</p><p>正数或零表示max-age=time</p><p>epoch：指定“Expires”的值为 1 January,1970,00:00:01 GMT</p><p>max:指定“Expires”的值为31 December2037 23:59:59GMT,”Cache-Control”的值为10年。</p><p>-1：指定“Expires”的值为当前服务器时间-1s，即永远过期。</p><p>off：不修改“Expires”和”Cache-Control”的值</p><p>expires使用了特定的时间，并且要求服务器和客户端的是中严格同步。</p><p>而Cache-Control是用max-age指令指定组件被缓存多久。</p><p>对于不支持http1.1的浏览器，还是需要expires来控制。所以最好能指定两个响应头。但HTTP规范规定max-age指令将重写expires头。</p><p>nginx 静态资源缓存设置<br>May 13, 2018<br>nginx 静态资源缓存 常用配置示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~.*\.(js|css|html|png|jpg)$ &#123;</span><br><span class="line">    expires 3d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 nginx 静态资源缓存 说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">expires 3d; &#x2F;&#x2F; 表示缓存 3 天</span><br><span class="line"></span><br><span class="line">expires 3h; &#x2F;&#x2F; 表示缓存 3 小时</span><br><span class="line"></span><br><span class="line">expires max; &#x2F;&#x2F; 表示缓存 10 年</span><br><span class="line"></span><br><span class="line">expires -1; &#x2F;&#x2F; 表示永远过期。</span><br></pre></td></tr></table></figure><p>如果设置为 -1 在 js、css 等静态文件在没有修改的情况下返回的是 http 304.</p><p>如果修改返回 http 200</p><p>http 304：自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</p><p>http 200：服务器已成功处理了请求，这表示服务器提供了请求的内容。</p><p>如果不想让代理或浏览器缓存，加 no-cache 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~.*\.(js|css|html|png|jpg)$ &#123;</span><br><span class="line">    add_header Cache-Control no-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样浏览器 F5 刷新时，nginx 静态资源缓存 设置返回的状态码就是 http 200，而不是 http 304</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;expires起到控制页面缓存的作用，合理的配置expires可以减少很多服务器的请求&lt;/p&gt;
&lt;p&gt;要配置expires，可以在http段中或者server段中或者location段中加入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>nginx之proxy_pass指令完全拆解</title>
    <link href="http://yoursite.com/2020/07/23/nginx%E4%B9%8Bproxy_pass%E6%8C%87%E4%BB%A4%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/23/nginx%E4%B9%8Bproxy_pass%E6%8C%87%E4%BB%A4%E5%AE%8C%E5%85%A8%E6%8B%86%E8%A7%A3/</id>
    <published>2020-07-22T16:00:00.000Z</published>
    <updated>2020-07-23T03:02:30.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-功能"><a href="#一、-功能" class="headerlink" title="一、 功能"></a>一、 功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nginx 的ngx_stream_proxy_module和ngx_http_proxy_module两个模块中，都有 proxy_pass 指令。</span><br><span class="line">其主要功能是为后端做代理，协议转发，请求转发等。</span><br></pre></td></tr></table></figure><h2 id="二、-用法和区别"><a href="#二、-用法和区别" class="headerlink" title="二、 用法和区别"></a>二、 用法和区别</h2><ol><li>官网介绍</li></ol><h3 id="ngx-stream-proxy-module-的-proxy-pass"><a href="#ngx-stream-proxy-module-的-proxy-pass" class="headerlink" title="ngx_stream_proxy_module 的 proxy_pass"></a>ngx_stream_proxy_module 的 proxy_pass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：proxy_pass address;</span><br><span class="line">默认值：—</span><br><span class="line">场景：server 段</span><br><span class="line">说明：设置代理服务器的地址。代理地址可以是域名或者IP加端口，也可以是一个UNIX的socket路径</span><br></pre></td></tr></table></figure><h3 id="ngx-http-proxy-module-的-proxy-pass"><a href="#ngx-http-proxy-module-的-proxy-pass" class="headerlink" title="ngx_http_proxy_module 的 proxy_pass"></a>ngx_http_proxy_module 的 proxy_pass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：proxy_pass URL;</span><br><span class="line">默认值：—</span><br><span class="line">场景：location 段，location中的if段，limit_except段</span><br><span class="line">说明：设置后端代理服务器的地址和协议，还可以附加可选的URI映射。协议可以是 http 或者 https。地址可以是域名或者IP，可以附加指定端口，也可以是UNIX的socket路径，路径要放在unix: 和 : 之间</span><br></pre></td></tr></table></figure><h2 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h2><p>从上面的各自说明可以看出两个 proxy_pass 指令都是做后端的代理配置。</p><p>除了应用场景的段不同之外，ngx_stream_proxy_module 的 proxy_pass 只能转发域名或IP加端口的请求，即端口转发。</p><p>ngx_http_proxy_module 的 proxy_pass 除了包含前者的功能外，还可以实现协议转发，如 http 和 https 与 UNIX socket 三者的相互转发，另外还有很实用的URI转发</p><h2 id="3-用法示例"><a href="#3-用法示例" class="headerlink" title="3. 用法示例"></a>3. 用法示例</h2><p>3.1 ngx_stream_proxy_module 的 proxy_pass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line">    proxy_pass 127.0.0.1:8080; # IP+端口转发</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line">    proxy_pass test.com:8080; # 域名+端口转发</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen [::1]:8000;</span><br><span class="line">    proxy_pass unix:&#x2F;tmp&#x2F;stream.socket; # UNIX socket转发</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 ngx_http_proxy_module 的 proxy_pass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line"></span><br><span class="line">    # 正常代理，不修改后端url的</span><br><span class="line">    location &#x2F;some&#x2F;path&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 修改后端url地址的代理（本例后端地址中，最后带了一个斜线)</span><br><span class="line">    location &#x2F;testb &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;www.other.com:8801&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 使用 if in location</span><br><span class="line">    location &#x2F;google &#123;</span><br><span class="line">        if ( $geoip_country_code ~ (RU|CN) ) &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;www.google.hk;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;limit&#x2F; &#123;</span><br><span class="line">        # 没有匹配 limit_except 的，代理到 unix:&#x2F;tmp&#x2F;backend.socket:&#x2F;uri&#x2F;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;unix:&#x2F;tmp&#x2F;backend.socket:&#x2F;uri&#x2F;;;</span><br><span class="line"></span><br><span class="line">        # 匹配到请求方法为: PUT or DELETE, 代理到9080</span><br><span class="line">        limit_except PUT DELETE &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:9080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>ngx_http_proxy_module.proxy_pass 的 URI 转发映射分析1<br>准备文件 /data/www/test/test.php 如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#39;$_SERVER[REQUEST_URI]:&#39; . $_SERVER[&#39;REQUEST_URI&#39;];</span><br></pre></td></tr></table></figure><p>通过查看 $_SERVER[‘REQUEST_URI’] 的值，可以看到每次请求的后端的 request_uri 的值，进行验证。</p><p>Nginx 配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line"></span><br><span class="line">    # 情形A</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;testa&#x2F;aaaa</span><br><span class="line">    # 后端的request_uri为: &#x2F;testa&#x2F;aaaa</span><br><span class="line">    location ^~ &#x2F;testa&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # 情形B</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;testb&#x2F;bbbb</span><br><span class="line">    # 后端的request_uri为: &#x2F;bbbb</span><br><span class="line">    location ^~ &#x2F;testb&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形C</span><br><span class="line">    # 下面这段location是正确的</span><br><span class="line">    location ~ &#x2F;testc &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形D</span><br><span class="line">    # 下面这段location是错误的</span><br><span class="line">    #</span><br><span class="line">    # nginx -t 时，会报如下错误: </span><br><span class="line">    #</span><br><span class="line">    # nginx: [emerg] &quot;proxy_pass&quot; cannot have URI part in location given by regular </span><br><span class="line">    # expression, or inside named location, or inside &quot;if&quot; statement, or inside </span><br><span class="line">    # &quot;limit_except&quot; block in &#x2F;opt&#x2F;app&#x2F;nginx&#x2F;conf&#x2F;vhost&#x2F;test.conf:17</span><br><span class="line">    # </span><br><span class="line">    # 当location为正则表达式时，proxy_pass 不能包含URI部分。本例中包含了&quot;&#x2F;&quot;</span><br><span class="line">    location ~ &#x2F;testd &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801&#x2F;;   # 记住，location为正则表达式时，不能这样写！！！</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形E</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;ccc&#x2F;bbbb</span><br><span class="line">    # 后端的request_uri为: &#x2F;aaa&#x2F;ccc&#x2F;bbbb</span><br><span class="line">    location &#x2F;ccc&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801&#x2F;aaa$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形F</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;namea&#x2F;ddd</span><br><span class="line">    # 后端的request_uri为: &#x2F;test?namea&#x3D;ddd</span><br><span class="line">    location &#x2F;namea&#x2F; &#123;</span><br><span class="line">        rewrite    &#x2F;namea&#x2F;([^&#x2F;]+) &#x2F;test?namea&#x3D;$1 break;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形G</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;nameb&#x2F;eee</span><br><span class="line">    # 后端的request_uri为: &#x2F;test?nameb&#x3D;eee</span><br><span class="line">    location &#x2F;nameb&#x2F; &#123;</span><br><span class="line">        rewrite    &#x2F;nameb&#x2F;([^&#x2F;]+) &#x2F;test?nameb&#x3D;$1 break;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;data&#x2F;logs&#x2F;www&#x2F;www.test.com.log;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      8801;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line">    </span><br><span class="line">    root        &#x2F;data&#x2F;www&#x2F;test;</span><br><span class="line">    index       index.php index.html;</span><br><span class="line"></span><br><span class="line">    rewrite ^(.*)$ &#x2F;test.php?u&#x3D;$1 last;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">        fastcgi_pass unix:&#x2F;tmp&#x2F;php-cgi.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;data&#x2F;logs&#x2F;www&#x2F;www.test.com.8801.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结</p><p>情况A和情况B对比，可以看出URI最后的 / 对 URI 映射的影响<br>情况D说明，location 为正则表达式时，proxy_pass 不能包含 URI<br>情况E，可以通过 $request_uri 添加或改变请求的 URI<br>情况F和G通过 rewrite 配合 break 对 URL 和 URI 进行改写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、-功能&quot;&gt;&lt;a href=&quot;#一、-功能&quot; class=&quot;headerlink&quot; title=&quot;一、 功能&quot;&gt;&lt;/a&gt;一、 功能&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
