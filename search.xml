<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-butterfly美化 (持续更新)</title>
      <link href="/p/1b825486/"/>
      <url>/p/1b825486/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="樱花飘落背景"><a href="#樱花飘落背景" class="headerlink" title="樱花飘落背景"></a>樱花飘落背景</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd theme&#x2F;Butterfly&#x2F;source&#x2F;js</span><br><span class="line">wget https:&#x2F;&#x2F;yremp.live&#x2F;wp-content&#x2F;uploads&#x2F;resource&#x2F;js&#x2F;sakura.js</span><br></pre></td></tr></table></figure><p>把下载好的Js文件放在<code>theme/Butterfly/source/js</code>文件夹下<br><code>/Butterfly/layout/includes</code>文件夹下找到<code>head.pug</code>文件，在最后引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.sakura.enable</span><br><span class="line">  script(src&#x3D;&quot;&#x2F;js&#x2F;sakura.js&quot;)</span><br></pre></td></tr></table></figure><p>在主题的主配置文件加入<code>Butterfly/_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 页面樱花飘落动效</span><br><span class="line">sakura:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h2 id="浏览器标题恶搞"><a href="#浏览器标题恶搞" class="headerlink" title="浏览器标题恶搞"></a>浏览器标题恶搞</h2><p>在<code>theme/Butterfly/source/js</code>文件夹下添加<code>crash_cheat.js</code>文件<br>填入以下内容<code>记得要修改你喜欢的标题</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var OriginTitle &#x3D; document.title;</span><br><span class="line"> var titleTime;</span><br><span class="line"> document.addEventListener(&#39;visibilitychange&#39;, function () &#123;</span><br><span class="line">     if (document.hidden) &#123;</span><br><span class="line">         $(&#39;[rel&#x3D;&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;&#x2F;joke.ico&quot;);</span><br><span class="line">         document.title &#x3D; &#39;看不见我🙈~看不见我🙈~&#39;;</span><br><span class="line">         clearTimeout(titleTime);</span><br><span class="line">     &#125;</span><br><span class="line">     else &#123;</span><br><span class="line">         $(&#39;[rel&#x3D;&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;&#x2F;favicon.ico&quot;);</span><br><span class="line">         document.title &#x3D; &#39; ( ๑•̀ㅂ•́) ✧被发现了～&#39;;</span><br><span class="line">         titleTime &#x3D; setTimeout(function () &#123;</span><br><span class="line">             document.title &#x3D; OriginTitle;</span><br><span class="line">         &#125;, 2000);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>在<code>Butterfly/layout/includes/layout.pug</code>中添加以下代码来引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script(type&#x3D;&#39;text&#x2F;javascript&#39;, src&#x3D;&#39;&#x2F;js&#x2F;crash_cheat.js&#39;)</span><br></pre></td></tr></table></figure><h2 id="添加标签云"><a href="#添加标签云" class="headerlink" title="添加标签云"></a>添加标签云</h2><p>使用命令进行安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-tag-cloud --save</span><br></pre></td></tr></table></figure><p>打开<code>Butterfly/layout/includes/widget/card_tags.pug</code>文件，用下面内容将其替换掉，最好把之前的文件备份一下,防止后悔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if site.tags.length</span><br><span class="line">  .card-widget.card-tags</span><br><span class="line">    .card-content</span><br><span class="line">      .item-headline</span><br><span class="line">        i.fa.fa-tags(aria-hidden&#x3D;&quot;true&quot;)</span><br><span class="line">        span&#x3D; _p(&#39;aside.card_tags&#39;)</span><br><span class="line">        script(type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcloud.js&quot;)</span><br><span class="line">        script(type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcanvas.js&quot;)</span><br><span class="line">        #myCanvasContainer.widget.tagcloud(align&#x3D;&#39;center&#39;)</span><br><span class="line">          canvas#resCanvas(width&#x3D;&#39;200&#39;, height&#x3D;&#39;200&#39;, style&#x3D;&#39;width&#x3D;100%&#39;)</span><br><span class="line">            !&#x3D; tagcloud()</span><br><span class="line">          !&#x3D; tagcloud(&#123;min_font: 16, max_font: 24, amount: 50, color: true, start_color: &#39;#999&#39;, end_color: &#39;#99a9bf&#39;&#125;)</span><br></pre></td></tr></table></figure><h2 id="添加个性化板娘"><a href="#添加个性化板娘" class="headerlink" title="添加个性化板娘"></a>添加个性化板娘</h2><blockquote><p>由<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">stevenjoezhang</a> 魔改项目<br>最简单引用方式在<code>Butterfly/_config.yml</code>中<code>inject</code>添加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">   head:</span><br><span class="line">     - &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&gt;</span><br><span class="line">   bottom:</span><br><span class="line">     - &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;stevenjoezhang&#x2F;live2d-widget@latest&#x2F;autoload.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="在-valine-输入界面增加背景图"><a href="#在-valine-输入界面增加背景图" class="headerlink" title="在 valine 输入界面增加背景图"></a>在 valine 输入界面增加背景图</h2><p>建议大家在找图的时候最好找白色背景或者透明背景的，不然看起来很难看。</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/1595912900562.jpg"><p>使用方法如下，将 CSS 加到你的博客样式文件中. 我是在<code>Butterfly/source/css/</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim veditor.css</span><br><span class="line"></span><br><span class="line">#veditor &#123;</span><br><span class="line">background-image: url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;drew233&#x2F;cdn&#x2F;20200409110727.webp);</span><br><span class="line">background-size: contain;</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-position: right;</span><br><span class="line">background-color: rgba(255, 255, 255, 0);</span><br><span class="line">resize: vertical</span><br><span class="line">&#125;</span><br><span class="line">#veditor:focus&#123;</span><br><span class="line">background-position-y: 200px;</span><br><span class="line">transition: all 0.2s ease-in-out 0s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在公共<code>Butterfly/source/js/main.js</code> 添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;可以与 valine 的配置 js 文件放一起，或放置到公共 js 文件中</span><br><span class="line">$(&quot;#veditor&quot;).focus(function()&#123;$(this).css(&quot;background-image&quot;,&quot;none&quot;);&#125;);</span><br><span class="line">$(&quot;#veditor&quot;).blur(function()&#123;</span><br><span class="line">      $(this).css(&quot;background-image&quot;,&quot;url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;drew233&#x2F;cdn&#x2F;20200409110727.webp)&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>引用方式在<code>Butterfly/_config.yml</code>中<code>inject</code>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">   head:</span><br><span class="line">     - &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;veditor.css&quot;&gt;</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">## 增加博主、小伙伴标识以及浏览器图标</span><br><span class="line">原生的 Valine 就不支持了，我们需要使用魔改的 Valine 文件，可以直接将原生的 Valine 替换为以下的 Valine.min.js 文件</span><br></pre></td></tr></table></figure><p>//魔改版 Valine.min.js<br><a href="https://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">引用方式在&#96;Butterfly&#x2F;_config.yml&#96;中&#96;CDN&#96;</span><br></pre></td></tr></table></figure><p>#valine: <a href="https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js</a><br>valine: <a href="https://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js</a></p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-douban 插件使用与问题</title>
      <link href="/p/2651b0bd/"/>
      <url>/p/2651b0bd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="hexo-douban"><a href="#hexo-douban" class="headerlink" title="hexo-douban"></a>hexo-douban</h1><p>一个在 <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> 页面中嵌入豆瓣个人主页的小插件.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-douban --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my book title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my book quote'</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my movie title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my movie quote'</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my game title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my game quote'</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;" target="_blank" rel="noopener">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code>(1.x.x版本新增配置项)。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-x-x版本"><a href="#1-x-x版本" class="headerlink" title="1.x.x版本"></a>1.x.x版本</h3><p>在0.x.x版本中，文章的更新和豆瓣页面的爬取操作是绑定在一起的，无法支持单独更新文章或者单独爬取文章。</p><p>在1.x.x版本中，使用<code>hexo douban</code>命令即可生成指定页面，如果不加参数，那么默认参数为<code>-bgm</code>。</p><p><strong>需要注意的是</strong>，通常大家都喜欢用<code>hexo d</code>来作为<code>hexo deploy</code>命令的简化，但是当安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ hexo douban -h</span><br><span class="line">Usage: hexo douban</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">Generate pages from douban</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -b, --books   Generate douban books only</span><br><span class="line">  -g, --games   Generate douban games only</span><br><span class="line">  -m, --movies  Generate douban movies only</span><br></pre></td></tr></table></figure><p>如果配置了<code>builtin</code>参数为<code>true</code>，那么除了可以使用<code>hexo douban</code>命令之外，<code>hexo g</code>或<code>hexo s</code>也内嵌了生成页面的功能。</p><h3 id="0-x-x版本"><a href="#0-x-x版本" class="headerlink" title="0.x.x版本"></a>0.x.x版本</h3><p>直接使用命令<code>hexo g</code>即在生成静态页面前爬取豆瓣数据，如果使用<code>hexo s</code>则会监听文件变动，每有一次变动就会重新爬取数据。</p><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>我会不定期更新一些功能或者修改一些Bug，所以如果想使用最新的特性，可以用下面的方法来更新:</p><ol><li>修改package.json内hexo-douban的版本号至最新</li><li>重新安装最新版本<code>npm install hexo-douban --save</code></li></ol><p>或者使用<code>npm install hexo-douban --update --save</code>直接更新。</p><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><p>如果上面的配置和操作都没问题，就可以在生成站点之后打开 <code>//yourblog/books</code> 和 <code>//yourblog/movies</code>, <code>//yourblog/games</code>, 来查看结果.</p><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><p>如果上面的显示没有问题就可以在主题的配置文件 <code>_config.yml</code> 里添加如下配置来为这些页面添加菜单链接.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">Books:</span> <span class="string">/books</span>     <span class="comment">#This is your books page</span></span><br><span class="line">  <span class="attr">Movies:</span> <span class="string">/movies</span>   <span class="comment">#This is your movies page</span></span><br><span class="line">  <span class="attr">Games:</span> <span class="string">/games</span>   <span class="comment">#This is your games page</span></span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>关于将builtin设置为true或者false的问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置为true</span><br><span class="line">直接使用命令&#96;hexo g&#96;即在生成静态页面前爬取豆瓣数据，不需要先执行 hexo douban</span><br></pre></td></tr></table></figure></li><li>关于报<code>userid</code> 设置完成，<code>hexo g</code> 抓取不到信息的问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 books have been loaded in 3066 ms, because you are offline or your network is bad</span><br><span class="line">0 movies have been loaded in 3041 ms, because you are offline or your network is bad</span><br></pre></td></tr></table></figure><code>timeout</code> 配置为 <code>timeout: 10000</code></li></ol><p>解决方式</p><p>尝试使用别的nodejs版本，之前用的14.xx.xx版本的不行，卸载nodejs，安装12.18.0版本解决。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> douban </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次Centos7.5升级OpenSSH8.0p1</title>
      <link href="/p/12223247/"/>
      <url>/p/12223247/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>服务器版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br></pre></td></tr></table></figure><p>升级前ssh版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ssh -V</span><br><span class="line">OpenSSH_7.4p1, OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><p>升级后ssh版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ssh -V</span><br><span class="line">OpenSSH_8.0p1, OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><p>为防止升级失败无法远程连接，安装telnet：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y telnet-server</span><br><span class="line"># yum install -y xinetd</span><br><span class="line"># systemctl start telnet.socket</span><br><span class="line"># systemctl start  xinetd</span><br></pre></td></tr></table></figure><p>允许root登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># echo &#39;pts&#x2F;0&#39; &gt;&gt;&#x2F;etc&#x2F;securetty</span><br><span class="line"># echo &#39;pts&#x2F;1&#39; &gt;&gt;&#x2F;etc&#x2F;securetty</span><br><span class="line"># systemctl restart telnet.socket</span><br></pre></td></tr></table></figure><p>开启telnet和xinetd开机自动启动，避免reboot后连不上Telnet：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable xinetd.service</span><br><span class="line"># systemctl enable telnet.socket</span><br></pre></td></tr></table></figure><p>测试一下telnet连接，然后就可以先放着了，这只是以防万一，接下来还是正常使用ssh连接操作</p><p>下载最新版本的包（openssh-8.0p1.tar.gz）并上传到服务器上</p><p>备份文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp -r &#x2F;etc&#x2F;ssh &#x2F;etc&#x2F;ssh.old</span><br></pre></td></tr></table></figure><p>卸载旧的ssh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># rpm -qa|grep openssh</span><br><span class="line">openssh-server-7.4p1-11.el7.x86_64</span><br><span class="line">openssh-7.4p1-11.el7.x86_64</span><br><span class="line">openssh-clients-7.4p1-11.el7.x86_64</span><br><span class="line"># rpm -e --nodeps openssh-server-7.4p1-11.el7.x86_64</span><br><span class="line"># rpm -e --nodeps openssh-7.4p1-11.el7.x86_64</span><br><span class="line"># rpm -e --nodeps openssh-clients-7.4p1-11.el7.x86_64</span><br><span class="line"># rpm -qa|grep openssh</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># install -v -m700 -d &#x2F;var&#x2F;lib&#x2F;sshd</span><br><span class="line"># chown -v root:sys &#x2F;var&#x2F;lib&#x2F;sshd</span><br><span class="line"># groupadd -g 50 sshd</span><br><span class="line"># useradd -c &#39;sshd PrivSep&#39; -d &#x2F;var&#x2F;lib&#x2F;sshd -g sshd -s &#x2F;bin&#x2F;false -u 50 sshd</span><br><span class="line"># tar -zxvf openssh-8.0p1.tar.gz</span><br><span class="line"># cd openssh-8.0p1</span><br><span class="line"># .&#x2F;configure --prefix&#x3D;&#x2F;usr --sysconfdir&#x3D;&#x2F;etc&#x2F;ssh --with-md5-passwords --with-privsep-path&#x3D;&#x2F;var&#x2F;lib&#x2F;sshd</span><br><span class="line"># make</span><br><span class="line"># chmod 600 &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key</span><br><span class="line"># chmod 600 &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ecdsa_key</span><br><span class="line"># chmod 600 &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key</span><br><span class="line"># make install</span><br><span class="line"># install -v -m755 contrib&#x2F;ssh-copy-id &#x2F;usr&#x2F;bin</span><br><span class="line"># install -v -m644 contrib&#x2F;ssh-copy-id.1 &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1</span><br><span class="line"># install -v -m755 -d &#x2F;usr&#x2F;share&#x2F;doc&#x2F;openssh-8.0p1</span><br><span class="line"># install -v -m644 INSTALL LICENCE OVERVIEW README* &#x2F;usr&#x2F;share&#x2F;doc&#x2F;openssh-8.0p1</span><br></pre></td></tr></table></figure><p>设置允许root登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;PermitRootLogin yes&quot; &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure><p>设置开机自启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cp -p contrib&#x2F;redhat&#x2F;sshd.init &#x2F;etc&#x2F;init.d&#x2F;sshd</span><br><span class="line"># chmod +x &#x2F;etc&#x2F;init.d&#x2F;sshd</span><br><span class="line"># chkconfig --add sshd</span><br><span class="line"># chkconfig sshd on</span><br><span class="line"># chkconfig --list sshd</span><br><span class="line"># systemctl restart sshd</span><br></pre></td></tr></table></figure><p>升级完成，查看版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ssh -V</span><br><span class="line">OpenSSH_8.0p1, OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><p>PS1：升级完成后别忘了恢复以前的telnet设置或关闭telnet.</p><p>PS2：如果中间有问题升级失败，且之前是rpm包安装的，可以直接以下命令进行回滚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install openssh-clients</span><br><span class="line"># yum -y install openssh-server</span><br><span class="line"># yum -y install openssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OpenSSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab配置域名并https访问</title>
      <link href="/p/5e94d2a7/"/>
      <url>/p/5e94d2a7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Gitlab默认Nginx80端口"><a href="#Gitlab默认Nginx80端口" class="headerlink" title="Gitlab默认Nginx80端口"></a>Gitlab默认Nginx80端口</h3><p>如果机器未占有80端口，可以直接替换成域名，解析后就可以直接访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;^external_url&quot; &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb #查看当前绑定的域名或者IP</span><br><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb   #打开配置文件</span><br><span class="line"># external_url &#39;http:&#x2F;&#x2F;192.168.174.131&#39;  #替换   #修改成域名访问</span><br><span class="line">external_url &#39;http:&#x2F;&#x2F;gitlab.inewmaker.com&#39;  </span><br><span class="line">gitlab-ctl reconfigure   #重新跑一下配置</span><br></pre></td></tr></table></figure><p>如果机器80端口以占有，需要修改gitlab端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;&#39;listen_port&quot; &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb   #查看默认端口</span><br><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb   #打开配置文件</span><br><span class="line">nginx[&#39;listen_port&#39;] &#x3D; 800     #找到取消注释，修改端口</span><br><span class="line">gitlab-ctl reconfigure   #重新跑一下配置</span><br></pre></td></tr></table></figure><p>由于更改端口，域名解析不到。提供方式使用云服务中的负载均衡。</p><h3 id="Gitlab配置HTTPS"><a href="#Gitlab配置HTTPS" class="headerlink" title="Gitlab配置HTTPS"></a>Gitlab配置HTTPS</h3><p>   注：<br>   gitlab最新是开启https会自动配置，但只有三个月有效期<br>   使用自己设的加密证书应设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用自己设的加密证书应设置</span><br><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class="line"></span><br><span class="line">letsencrypt[&#39;enable&#39;] &#x3D; false</span><br><span class="line">letsencrypt[&#39;auto_renew&#39;] &#x3D; false</span><br></pre></td></tr></table></figure><pre><code>在/etc/gitlab/gitlab.rb禁用自动更新。否则，gitlab-ctl reconfigure 可能会尝试更新证书，从而覆盖它们。如果gitlab自签的证书过期，替换的一定要禁用自动更新</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;gitlab&#x2F;ssl   #把申请的证书放在这里</span><br><span class="line">vim  &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb   #打开配置文件</span><br><span class="line">external_url &#39;external_url &#39;https:&#x2F;&#x2F;gitlab.inewmaker.com&#39;  # 注：一定要HTTPS</span><br><span class="line">nginx[&#39;redirect_http_to_https&#39;]&#x3D; true   #取消注释改为 true</span><br><span class="line">nginx[&#39;ssl_certificate&#39;] &#x3D; &quot;&#x2F;etc&#x2F;gitlab&#x2F;ssl&#x2F;gitlab.pem&quot;    #放置对应的证书密钥</span><br><span class="line">nginx[&#39;ssl_certificate_key&#39;] &#x3D; &quot;&#x2F;etc&#x2F;gitlab&#x2F;ssl&#x2F;gitlab.key&quot; #放置对应的证书密钥</span><br><span class="line">gitlab-ctl reconfigure  #使配置生效</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl restart  # 使配置生效 #</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitlab </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 返回码 426 upgrade required 处理</title>
      <link href="/p/328665dd/"/>
      <url>/p/328665dd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">426 upgrade required</span><br><span class="line"></span><br><span class="line">请求返回 426</span><br><span class="line"></span><br><span class="line">nginx 反向代理默认走的http 1.0版本</span><br><span class="line"></span><br><span class="line">但是 被反向代理的服务器是1.1版本的!</span><br><span class="line"></span><br><span class="line">so 在反向代理的时候加上一句</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_http_version 1.1;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   location ~* \.do &#123;</span><br><span class="line">                #if ($http_x_forwarded_proto !&#x3D; &quot;https&quot;) &#123;</span><br><span class="line">                #      rewrite ^(.*)$ https:&#x2F;&#x2F;$server_name$1 permanent;</span><br><span class="line">                #&#125;</span><br><span class="line">               proxy_http_version 1.1;</span><br><span class="line">               proxy_pass http:&#x2F;&#x2F;test-h5-api.7dian7fen.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 返回码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的重定向方式</title>
      <link href="/p/bb2a8a2e/"/>
      <url>/p/bb2a8a2e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>第一种：使用==rewrite==指令，通过正则匹配所有的URI后再去掉开头第一个/(反斜线)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;(.*)$ https:&#x2F;&#x2F;www.linux.com&#x2F;$1;</span><br></pre></td></tr></table></figure><p>第二种：同样使用rewrite指令，不同的是通过==$request_uri==变量匹配所有的URI。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^ https:&#x2F;&#x2F;www.linux.com$request_uri? permanent;</span><br></pre></td></tr></table></figure><p>这样写的好处是省去了去掉开头第一个反斜线的过程，正则匹配上性能更优。<br>第三种：使用==return==指令，通过301状态码和==$request_uri==参数，直接告诉Nginx这是个301重定向和抓取指定URI。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 301 https:&#x2F;&#x2F;www.linux.com$request_uri;</span><br></pre></td></tr></table></figure><p>这种方法是性能上最优的，因为rewrite指令有很多写法和规则，执行完所有正则匹配后，Nginx 才会知道这是一个301永久重定向。</p><p>通过以上三种写法介绍，我们可以看出return指令在301跳转上比rewrite指令性能上更加有优势。虽然在访问量不大的情况下几种写法的性能表现上区别并不大，不过在海量访问中一个小小的优化也能在提升业务系统性能上起到不小的作用哟！</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 重定向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx rewrite 用法，用rewrite去除URL中的特定参数</title>
      <link href="/p/fffbf386/"/>
      <url>/p/fffbf386/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="nginx-rewrite-用法，用rewrite去除URL中的特定参数"><a href="#nginx-rewrite-用法，用rewrite去除URL中的特定参数" class="headerlink" title="nginx rewrite 用法，用rewrite去除URL中的特定参数"></a>nginx rewrite 用法，用rewrite去除URL中的特定参数</h2><p>日常服务中经常会用Nginx做一层代理转发，把Nginx当做前置机</p><p>比如，以下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 对外暴露 80 端口</span><br><span class="line">    listen    80;</span><br><span class="line">    server_name 192.168.10.231;</span><br><span class="line"></span><br><span class="line">    # 后端API地址暴露为：http:&#x2F;&#x2F;192.168.10.231&#x2F;apis</span><br><span class="line">    location &#x2F;apis &#123;</span><br><span class="line">        proxy_pass   http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;;</span><br><span class="line">        proxy_pass_request_headers      on;</span><br><span class="line">          # 重写URL 去除apis</span><br><span class="line">        rewrite &quot;^&#x2F;apis&#x2F;(.*)$&quot; &#x2F;$1 break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里的rewrite 就是为了去除URL中的/apis,实际的后端api中是没有这个参数的，但是为了做到在Nginx转发请求，前端需要加上这个参数，以便于区别</strong></p><p>比如前端的请求地址是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.10.231&#x2F;apis&#x2F;user</span><br></pre></td></tr></table></figure><p>那么实际上经过Nginx转发后请求的地址是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user</span><br></pre></td></tr></table></figure><p><strong>rewrite “^/api/(.)$” /$1 break，路径重写：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1)&quot;^&#x2F;api&#x2F;(.)$&quot;：匹配路径的正则表达式，用了分组语法就是*(.)**，把&#x2F;api&#x2F;以后的所有部分当做1组；</span><br><span class="line">（2）&#x2F;$1：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始，也就是api），即&#x2F;api&#x2F;后面的所有。这样新的路径就是除去&#x2F;api&#x2F;以外的所有，就达到了去除&#x2F;api前缀的目的</span><br></pre></td></tr></table></figure><p>；</p><p><strong>break：指令，常用的有2个，分别是：last、break；</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）last：重写路径结束后，将得到的路径重新进行一次路径匹配；</span><br><span class="line">（2）break：重写路径结束后，不再重新匹配路径。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的location匹配</title>
      <link href="/p/8b346831/"/>
      <url>/p/8b346831/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location [ &#x3D; | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>语法规则很简单，一个==location==关键字，后面跟着可选的修饰符，后面是要匹配的字符，花括号中是要执行的操作。</p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x3D; 表示精确匹配。只有请求的url路径与后面的字符串完全相等时，才会命中。</span><br><span class="line">~ 表示该规则是使用正则定义的，区分大小写。</span><br><span class="line">~* 表示该规则是使用正则定义的，不区分大小写。</span><br><span class="line">^~ 表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找。</span><br></pre></td></tr></table></figure><h2 id="匹配过程"><a href="#匹配过程" class="headerlink" title="匹配过程"></a>匹配过程</h2><p>对请求的url序列化。例如，对%xx等字符进行解码，去除url中多个相连的/，解析url中的.，..等。这一步是匹配的前置工作。</p><p>location有两种表示形式，一种是使用前缀字符，一种是使用正则。如果是正则的话，前面有<del>或</del>*修饰符。</p><p>具体的匹配过程如下：</p><p>首先先检查使用前缀字符定义的location，选择最长匹配的项并记录下来。</p><p>如果找到了精确匹配的location，也就是使用了=修饰符的location，结束查找，使用它的配置。</p><p>然后按顺序查找使用正则定义的location，如果匹配则停止查找，使用它定义的配置。</p><p>如果没有匹配的正则location，则使用前面记录的最长匹配前缀字符location。</p><p>基于以上的匹配过程，我们可以得到以下两点启示：</p><pre><code>使用正则定义的location在配置文件中出现的顺序很重要。因为找到第一个匹配的正则后，查找就停止了，后面定义的正则就是再匹配也没有机会了。使用精确匹配可以提高查找的速度。例如经常请求/的话，可以使用=来定义location。</code></pre><p>示例<br>接下来我们以一个例子来具体说明一下匹配过程。</p><p>假如我们有下面的一段配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">location &#x3D; &#x2F; &#123;</span><br><span class="line">    [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;user&#x2F; &#123;</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ &#x2F;images&#x2F; &#123;</span><br><span class="line">    [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">    [ configuration E ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 ==/== 精准匹配A，不再往下查找。</p><p>请求 ==/index.html== 匹配B。首先查找匹配的前缀字符，找到最长匹配是配置B，接着又按照顺序查找匹配的正则。结果没有找到，因此使用先前标记的最长匹配，即配置B。</p><p>请求 ==/user/index.html==匹配C。首先找到最长匹配C，由于后面没有匹配的正则，所以使用最长匹配C。<br>请求 ==/user/1.jpg== 匹配E。首先进行前缀字符的查找，找到最长匹配项C，继续进行正则查找，找到匹配项E。因此使用E。</p><p>请求 ==/images/1.jpg==匹配D。首先进行前缀字符的查找，找到最长匹配D。但是，特殊的是它使用了^~修饰符，不再进行接下来的正则的匹配查找，因此使用D。这里，如果没有前面的修饰符，其实最终的匹配是E。大家可以想一想为什么。</p><p>请求 ==/documents/about.html==匹配B。因为B表示任何以/开头的URL都匹配。在上面的配置中，只有B能满足，所以匹配B。</p><h2 id="location-name的用法"><a href="#location-name的用法" class="headerlink" title="location @name的用法"></a>location @name的用法</h2><p>@用来定义一个命名location。主要用于内部重定向，不能用来处理正常的请求。其用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    try_files $uri $uri&#x2F; @custom</span><br><span class="line">&#125;</span><br><span class="line">location @custom &#123;</span><br><span class="line">    # ...do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，当尝试访问url找不到对应的文件就重定向到我们自定义的命名location（此处为custom）。</p><p><strong>值得注意的是，命名location中不能再嵌套其它的命名location</strong>。</p><h2 id="URL尾部的-需不需要"><a href="#URL尾部的-需不需要" class="headerlink" title="URL尾部的/需不需要"></a>URL尾部的/需不需要</h2><p>关于URL尾部的/有三点也需要说明一下。第一点与location配置有关，其他两点无关。</p><ul><li>location中的字符有没有/都没有影响。也就是说/user/和/user是一样的。</li><li>如果URL结构是<a href="https://domain.com/的形式，尾部有没有/都不会造成重定向。因为浏览器在发起请求的时候，默认加上了/。虽然很多浏览器在地址栏里也不会显示/。这一点，可以访问baidu验证一下。" target="_blank" rel="noopener">https://domain.com/的形式，尾部有没有/都不会造成重定向。因为浏览器在发起请求的时候，默认加上了/。虽然很多浏览器在地址栏里也不会显示/。这一点，可以访问baidu验证一下。</a></li><li>如果URL的结构是<a href="https://domain.com/some-dir/。尾部如果缺少/将导致重定向。因为根据约定，URL尾部的/表示目录，没有/表示文件。所以访问/some-dir/时，服务器会自动去该目录下找对应的默认文件。如果访问/some-dir的话，服务器会先去找some-dir文件，找不到的话会将some-dir当成目录，重定向到/some-dir/，去该目录下找默认文件。可以去测试一下你的网站是不是这样的。" target="_blank" rel="noopener">https://domain.com/some-dir/。尾部如果缺少/将导致重定向。因为根据约定，URL尾部的/表示目录，没有/表示文件。所以访问/some-dir/时，服务器会自动去该目录下找对应的默认文件。如果访问/some-dir的话，服务器会先去找some-dir文件，找不到的话会将some-dir当成目录，重定向到/some-dir/，去该目录下找默认文件。可以去测试一下你的网站是不是这样的。</a><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>location的配置有两种形式，前缀字符和正则。查找匹配的时候，先查找前缀字符，选择最长匹配项，再查找正则。正则的优先级高于前缀字符。</li></ul><p>正则的查找是按照在配置文件中的顺序进行的。因此正则的顺序很重要，建议越精细的放的越靠前。</p><p>使用=精准匹配可以加快查找的顺序，如果根域名经常被访问的话建议使用=。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> location </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用docker实现mysql主从同步读写分离，附赠docker搭建mycat读写分离</title>
      <link href="/p/8eb47741/"/>
      <url>/p/8eb47741/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>下载mysql镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql5.7</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps:如果下载太慢，请添加腾讯源,依次执行</span><br><span class="line">echo &quot;OPTIONS&#x3D;&#39;--registry-mirror&#x3D;https:&#x2F;&#x2F;mirror.ccs.tencentyun.com&#39;&quot; &gt;&gt; &#x2F;etc&#x2F;sysconfig&#x2F;docker</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">service docker restart</span><br><span class="line">或者直接去阿里仓库下https:&#x2F;&#x2F;dev.aliyun.com&#x2F;search.html把上面的--registry-mirror&#x3D;https:&#x2F;&#x2F;mirror.ccs.tencentyun.com换成你的专属源就可以</span><br></pre></td></tr></table></figure><p>下载完输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io&#x2F;mysql            5.7               44a8e1a5c0b2        8 days ago          407 MB</span><br></pre></td></tr></table></figure><p>第二种：创建 MySQL 容器<br>创建主数据库容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-master -p 3307:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p>创建从数据库容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-slave -p 3308:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p>配置主数据库<br>首先，进入容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>连接mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p123456</span><br></pre></td></tr></table></figure><p>修改 root 可以通过任何客户端连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure><p>修改 MySQL 配置文档 ==/etc/mysql/mysql.conf.d/mysqld.cnf==，在 [mysqld] 段添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin&#x3D;mysql-bin    &#x2F;&#x2F;[必须]启用二进制日志</span><br><span class="line">server-id&#x3D;1          &#x2F;&#x2F;[必须]服务器标识ID，每台服务器唯一</span><br></pre></td></tr></table></figure><p>配置从服务器<br>首先，进入容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>连接mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p123456</span><br></pre></td></tr></table></figure><p>修改 root 可以通过任何客户端连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure><p>修改 MySQL 配置文档 ==/etc/mysql/mysql.conf.d/mysqld.cnf==，在 [mysqld] 段添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin&#x3D;mysql-bin    &#x2F;&#x2F;[必须]启用二进制日志</span><br><span class="line">server-id&#x3D;2          &#x2F;&#x2F;[必须]服务器标识ID，每台服务器唯一</span><br></pre></td></tr></table></figure><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><p>配置 MySQL 主从复制<br>首先连接 master 服务器，查看数据库状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      154 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>记录 File 的值和 Position 的值，等会配置 slave 服务器的时候要用。</p><p>接下来连接 slave 服务器，配置主从复制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;change master to</span><br><span class="line">master_host&#x3D;&#39;x.x.x.x&#39;,</span><br><span class="line">master_user&#x3D;&#39;user&#39;,</span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000003&#39;,</span><br><span class="line">master_log_pos&#x3D;154,</span><br><span class="line">master_port&#x3D;3307,</span><br><span class="line">master_password&#x3D;&#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.03 sec)</span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>解释下配置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">master_host&#x3D;&#39;x.x.x.x&#39; &#x2F;&#x2F; 这里填 master 主机 ip</span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000003&#39;, &#x2F;&#x2F; 这里填写 File 的值</span><br><span class="line">master_log_pos&#x3D;154,&#x2F;&#x2F; 这里填写 Position 的值。</span><br><span class="line">mysql&gt; start slave;&#x2F;&#x2F; 启动从服务器复制功能</span><br></pre></td></tr></table></figure><p>如果不小心配置错, 输入 mysql&gt; stop slave; 然后重新录入一遍就可以了。</p><p>检查主从连接状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: x.x.x.x</span><br><span class="line">                  Master_User: user</span><br><span class="line">                  Master_Port: 32768</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 1338</span><br><span class="line">               Relay_Log_File: 8d1e3b87d499-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 1221</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1338</span><br><span class="line">              Relay_Log_Space: 1435</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: cd327a00-5e18-11e7-98f7-0242ac110006</span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这两个必须是Yes 为No 或者connect说明没有连接上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line"></span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>测试主从连接<br>注意设置主从后，操作只能在master终端上，slave上的操作不会同步到master上。</p><p>登陆master终端，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database sunhao;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sunhao             |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use sunhao</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;user_id&#96; bigint(20) AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(30) NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(30) DEFAULT NULL,</span><br><span class="line">   PRIMARY KEY (&#96;user_id&#96;)</span><br><span class="line">   ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user(username, password) values (&#39;test_user&#39;, &#39;test_pass&#39;);</span><br><span class="line">Query OK, 1 row affected (0.07 sec)</span><br></pre></td></tr></table></figure><pre><code>登陆slave服务器mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sunhao             || sys                |+--------------------+5 rows in set (0.00 sec)mysql&gt; use sunhaomysql&gt; select * from user;+---------+-----------+-----------+| user_id | username  | password  |+---------+-----------+-----------+|       1 | test_user | test_pass |+---------+-----------+-----------+1 row in set (0.00 sec)如果主服务器已经存在应用数据，则在进行主从复制时，需要单独复制处理（注意此操作，如果对从服务器单独录入的数据，会被覆盖掉。）：这里我们做一次完整的测试(1)在主服务器数据库插入新的数据，并进行锁表操作，不让数据再进行写入动作mysql&gt; insert into sunhao values(2,&apos;xiaoshuai&apos;);Query OK, 1 row affected (0.01 sec)mysql&gt; select * from sunhao;                   +------+-----------+| id   | name      |+------+-----------+|    1 | xiaoshuai ||    2 | xiaoshuai |+------+-----------+2 rows in set (0.00 sec)mysql&gt; FLUSH TABLES WITH READ LOCK;mysql&gt; show full processlist; `(2)退出mysql，用mysqldump备份数据文件到/var/lib,然后顺便多余的用tar打包一下玩。哈哈。mysql&gt; exitByeroot@980e5ea48152:/var/lib/mysql# mysqldump -u root -p  sunhao &gt; /var/lib/sunhao.dump    Enter password: root@980e5ea48152:/var/lib# tar -zcvf ./sunhao.dump .tar  ./sunhao.dump(3)打开宿主服务器，复制mysql主服务器文件sunhao.dump.tar。到宿主服务器[root]# docker ps CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES8d1e3b87d499        slave/mysql         &quot;docker-entrypoint.sh&quot;   4 hours ago         Up 4 hours          0.0.0.0:32769-&gt;3306/tcp   mysql-slave980e5ea48152        master/mysql        &quot;docker-entrypoint.sh&quot;   4 hours ago         Up 4 hours          0.0.0.0:32768-&gt;3306/tcp   mysql-mastermkdir -p /var/mydatadocker cp 980e:/var/lib/sunhao.dump.tar /var/mydata/cd /var/mydata[root@VM_128_230_centos mydata]# lssunhao.dump.tar解释:docker cp 980e:/var/lib/sunhao.dump.tar /var/mydata/980e是980e5ea48152的缩写。保证不重复简写就可以980e:/var/lib/sunhao.dump.tar 意思就是选中的容器下面你的文件下的sunhao.dump.tar文件/var/mydata/ 目标文件(4)在宿主主机上输入[root]# docker cp /var/mydata/sunhao.dump.tar 8d1e3b87d49936414c0e91ffdc60a054e7f4ef8b15baee295350565519abba0e:/var/lib/(5)在从服务器上输入root@8d1e3b87d499:/# cd /var/lib/root@8d1e3b87d499:/var/lib# tar -zcvf sunhao.dump.tar(6)在从服务器上输入tar -zxvpf /var/lib/mysqlbak.sql.tarmysql -uroot -pmysql sunhao &lt; /var/lib/sunhao.dump;如果写入成功,这个时候就可以用select查询到数据。(2)取消主服务器数据库锁定mysql&gt; UNLOCK TABLES;docker搭建mycat读写分离制作mycat容器，并运行首先在本地新建个文件夹/usr/mycat。然后去mycat官网下载最新版本，这里我下载的是1.6版本。安装完解压到这里。http://dl.mycat.io/[http://dl.mycat.io/1.6-RELEASE/](http://dl.mycat.io/1.6-RELEASE/ &quot;http://dl.mycat.io/1.6-RELEASE/&quot;)编写Dockerfile，内容为# 来源镜像,因为mycat依赖java，所以这里直接选的java环境。FROM javaRUN  mkdir -p /var/local/mycat/# Add复制Mycat到容器ADD  mycat/ /var/local/mycat/ ENTRYPOINT  [&quot;/var/local/mycat/bin/mycat&quot;,&quot;console&quot;,&quot;&amp;&quot;]# 对外端口EXPOSE 8066 9066# 启动控制台CMD  [&quot;/var/local/mycat/bin/mycat&quot;,&quot;console&quot;,&quot;&amp;&quot;]先别急着构建镜像，我们先修改下mycat的配置文件。[root@centos mycat]# lltotal 15324-rw-r--r-- 1 root root      357 Jul  5 15:26 Dockerfile-rw-r--r-- 1 root root 15662280 Jul  3 15:07 Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gzdrwxr-xr-x 7 root root     4096 Jul  5 15:27 mycat在我用的1.6版本。mycat对外端口是注释掉的。我们要打开下。我们编辑/usr/mycat/mycat/conf/server.xml.找到第32-35行。去掉注释符号。&lt;!--    &lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt;     &lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt;     &lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; --&gt;我们往下看 有这么几句。这里分别默认两个用户。 name为root的管理员，可以进行读写。和普通用户只能进行读。我们也可以手动创建修改，另外password是密码 schemas是用户所能操作的库。 在这里我什么都没有改。下面都是默认。&lt;user name=&quot;root&quot;&gt;        &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;        &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;        &lt;!-- 表级 DML 权限设置 --&gt;        &lt;!--                 &lt;privileges check=&quot;false&quot;&gt;            &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;                &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;                &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;            &lt;/schema&gt;        &lt;/privileges&gt;                 --&gt;    &lt;/user&gt;    &lt;user name=&quot;user&quot;&gt;        &lt;property name=&quot;password&quot;&gt;user&lt;/property&gt;        &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;        &lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;    &lt;/user&gt;我们编辑/usr/mycat/mycat/conf/schema.xml，这个是我们配置分片和逻辑库表，规则的地方，数据节点，和数据源。其中schema是我们所操作的逻辑库。默认为TESTDB。下面分别是各个逻辑表。在这里直接默认。我只是为了区分dh和db两个字的区别，把db1-3改了data1-3你们可以不用管。&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt;    &lt;!-- auto sharding by id (long) --&gt;    &lt;table name=&quot;travelrecord&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;auto-sharding-long&quot; /&gt;    &lt;!-- global table is auto cloned to all defined data nodes ,so can join        with any table whose sharding node is in the same data node --&gt;    &lt;table name=&quot;company&quot; primaryKey=&quot;ID&quot; type=&quot;global&quot; dataNode=&quot;dn1,dn2,dn3&quot; /&gt;    &lt;table name=&quot;goods&quot; primaryKey=&quot;ID&quot; type=&quot;global&quot; dataNode=&quot;dn1,dn2&quot; /&gt;    &lt;!-- random sharding using mod sharind rule --&gt;    &lt;table name=&quot;hotnews&quot; primaryKey=&quot;ID&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2,dn3&quot;           rule=&quot;mod-long&quot; /&gt;    &lt;!-- &lt;table name=&quot;dual&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dnx,dnoracle2&quot; type=&quot;global&quot;        needAddLimit=&quot;false&quot;/&gt; &lt;table name=&quot;worker&quot; primaryKey=&quot;ID&quot; dataNode=&quot;jdbc_dn1,jdbc_dn2,jdbc_dn3&quot;        rule=&quot;mod-long&quot; /&gt; --&gt;    &lt;table name=&quot;employee&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dn1,dn2&quot;           rule=&quot;sharding-by-intfile&quot; /&gt;    &lt;table name=&quot;customer&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dn1,dn2&quot;           rule=&quot;sharding-by-intfile&quot;&gt;        &lt;childTable name=&quot;orders&quot; primaryKey=&quot;ID&quot; joinKey=&quot;customer_id&quot;                    parentKey=&quot;id&quot;&gt;            &lt;childTable name=&quot;order_items&quot; joinKey=&quot;order_id&quot;                        parentKey=&quot;id&quot; /&gt;        &lt;/childTable&gt;        &lt;childTable name=&quot;customer_addr&quot; primaryKey=&quot;ID&quot; joinKey=&quot;customer_id&quot;                    parentKey=&quot;id&quot; /&gt;    &lt;/table&gt;    &lt;!-- &lt;table name=&quot;oc_call&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dn1$0-743&quot; rule=&quot;latest-month-calldate&quot;        /&gt; --&gt;&lt;/schema&gt;修改37-45行 /usr/mycat/mycat/conf/wrapper.conf。设置java虚拟机内存。# Initial Java Heap Size (in MB)wrapper.java.initmemory=3# Maximum Java Heap Size (in MB)wrapper.java.maxmemory=64在schema.xml往下修改。43-55行。数据源地址dataHost。这些就是我们的数据源，mycat把逻辑表的数据，读写都来源于我们配置地址。其中writeHost写入源。设置多个，默认也只用第一个。readHost是读服务器。heartbeat是我们检测数据库是否正常运行的。在这里 mycat 有两种配置方式。分别是两个writeHost和一个writeHost一个readHost第一种如果写入失败，还是可读。第二种如果写入失败，不可读。我们采用安全稳妥的方式。一个writeHost一个readHost我的配置为&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;20&quot; balance=&quot;1&quot;          writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;2&quot;  slaveThreshold=&quot;100&quot;&gt;    &lt;heartbeat&gt;show slave status&lt;/heartbeat&gt;    &lt;!-- can have multi write hosts --&gt;    &lt;writeHost host=&quot;hostM1&quot; url=&quot;115.159.124.18:32768&quot; user=&quot;root&quot;    password=&quot;mysql&quot;&gt;        &lt;!-- can have multi read hosts --&gt;        &lt;readHost host=&quot;hostS1&quot; url=&quot;115.159.124.18:32769&quot; user=&quot;root&quot;    password=&quot;mysql&quot; /&gt;    &lt;/writeHost&gt;&lt;/dataHost&gt;hostM1和hostS1分别对应我们创建的两个docker容器的对外端口。修改/usr/mycat/mycat/conf/log4j2.xml 这个是配置日志文件的，我们打开debug方便我们学习。修改第25行info为debug&lt;asyncRoot level=&quot;debug&quot; includeLocation=&quot;true&quot;&gt;     &lt;AppenderRef ref=&quot;Console&quot; /&gt;     &lt;AppenderRef ref=&quot;RollingFile&quot;/&gt; &lt;/asyncRoot&gt;构建镜像docker build -t sunhao/mycat:1.6  . 别忘了最后面的圆点运行创建容器docker  run  --name sunhaomycat  -d -p 8066:8066 -p 9066:9066 sunhao/mycat:1.6就那么简单。我们的mycat已经搭建成功了。测试下吧打开4个终端1个宿主，1个mysql主，1个mysql从，1个用来看mycat日志。宿主环境操作在宿主终端上，安装mysql。并且连接我们的mycat。[root@VM_128_230_centos mycat]# mysql -uroot -p123456 -h115.159.124.18 -P8066Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MySQL connection id is 8Server version: 5.6.29-mycat-1.6-RELEASE-20161028204710 MyCat Server (OpenCloundDB)Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MySQL [(none)]&gt;完美，Server version: 5.6.29-mycat-1.6-RELEASE-20161028204710 MyCat Server 出现这，说明mycat运行了。进行简单的操作。Database changedMySQL [TESTDB]&gt; show databases;+----------+| DATABASE |+----------+| TESTDB   |+----------+1 row in set (0.00 sec)MySQL [TESTDB]&gt; show tables;+------------------+| Tables in TESTDB |+------------------+| company          || customer         || customer_addr    || employee         || goods            || hotnews          || orders           || order_items      || travelrecord     |+------------------+9 rows in set (0.00 sec)MySQL [TESTDB]&gt;测试下写入MySQL [TESTDB]&gt; create table travelrecord (id bigint not null primary key,user_id varchar(100),traveldate DATE, fee decimal,days int);ERROR 1105 (HY000): Table &apos;travelrecord&apos; already existsMySQL [TESTDB]&gt; insert into travelrecord(id,user_id,traveldate,fee,days)  values(1,@@hostname,20170707,100,10);Query OK, 1 row affected (0.01 sec)MySQL [TESTDB]&gt; MySQL [TESTDB]&gt; insert into travelrecord(id,user_id,traveldate,fee,days)  values(10000001,@@hostname,20170707,100,10);Query OK, 1 row affected (0.00 sec)分别进入mysql主和mysql从可以看到。MySQL [data2]&gt; use data3                  Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMySQL [data3]&gt; select * from travelrecord;+----------+--------------+------------+------+------+| id       | user_id      | traveldate | fee  | days |+----------+--------------+------------+------+------+| 10000001 | 980e5ea48152 | 2017-07-07 |  100 |   10 |+----------+--------------+------------+------+------+1 row in set (0.00 sec)MySQL [data3]&gt; use data1;                 Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMySQL [data1]&gt; select * from travelrecord;+----+--------------+------------+------+------+| id | user_id      | traveldate | fee  | days |+----+--------------+------------+------+------+|  1 | 980e5ea48152 | 2017-07-07 |  100 |   10 |+----+--------------+------------+------+------+1 row in set (0.00 sec)MySQL [data1]&gt;测试读取分离打开一个终端，用docker exec -it 61e74eee274d9d0f0404a572dec1d14c8b03dfd480e13d3c96fa04c534df0556  bash进入我们的mycat容器其中61e74为你的mycat容器这个就是我们的日志终端root@61e74eee274d:/var/local/mycat/logs# ls2017-07  mycat.log  mycat.pid  wrapper.logroot@61e74eee274d:/var/local/mycat/logs# tail -f  mycat.log在宿主环境mycat下输入MySQL [TESTDB]&gt; select * from travelrecord ;ERROR 2006 (HY000): MySQL server has gone awayNo connection. Trying to reconnect...Connection id:    9Current database: TESTDB+----------+--------------+------------+------+------+| id       | user_id      | traveldate | fee  | days |+----------+--------------+------------+------+------+|        1 | 980e5ea48152 | 2017-07-07 |  100 |   10 || 10000001 | 980e5ea48152 | 2017-07-07 |  100 |   10 |+----------+--------------+------------+------+------+2 rows in set (0.02 sec)然后切回我们的日志终端，按ctrl+c中断。然后输入cat tail 进行查看，很长在最后面找个空白的大坑（自己体会）慢慢找。017-07-07 06:28:16.863 DEBUG [$_NIOREACTOR-5-RW] (io.mycat.backend.datasource.PhysicalDatasource.releaseChannel(PhysicalDatasource.java:442)) - release channel MySQLConnection [id=5, lastTime=1499408896859, user=root, schema=data3, old shema=data3, borrowed=true, fromSlaveDB=false, threadId=527, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=115.159.184.18, port=32774, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]2017-07-07 06:28:16.864 DEBUG [$_NIOREACTOR-3-RW] (io.mycat.backend.datasource.PhysicalDatasource.releaseChannel(PhysicalDatasource.java:442)) - release channel MySQLConnection [id=33, lastTime=1499408896859, user=root, schema=data3, old shema=data3, borrowed=true, fromSlaveDB=true, threadId=108, charset=latin1, txIsolation=3, autocommit=true, attachment=null, respHandler=null, host=115.159.184.18, port=32770, statusSync=null, writeQueue=0, modifiedSQLExecuted=false]2017-07-07 06:28:24.473 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.net.FrontendConnection.query(FrontendConnection.java:288)) - ServerConnection [id=2, schema=TESTDB, host=115.159.184.18, user=root,txIsolation=3, autocommit=true, schema=TESTDB] select * from travelrecord2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.server.ServerQueryHandler.query(ServerQueryHandler.java:57)) - ServerConnection [id=2, schema=TESTDB, host=115.159.184.18, user=root,txIsolation=3, autocommit=true, schema=TESTDB]select * from travelrecord2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.cache.impl.EnchachePool.get(EnchachePool.java:71)) - SQLRouteCache hit cache ,key:TESTDBselect * from travelrecord2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.server.NonBlockingSession.execute(NonBlockingSession.java:110)) - ServerConnection [id=2, schema=TESTDB, host=115.159.184.18, user=root,txIsolation=3, autocommit=true, schema=TESTDB]select * from travelrecord, route={   1 -&gt; dn1{SELECT *FROM travelrecordLIMIT 100}   2 -&gt; dn2{SELECT *FROM travelrecordLIMIT 100}   3 -&gt; dn3{SELECT *FROM travelrecordLIMIT 100}} rrs 2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.&lt;init&gt;(MultiNodeQueryHandler.java:101)) - execute mutinode query select * from travelrecord2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.&lt;init&gt;(MultiNodeQueryHandler.java:137)) - has data merge logic 2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:170)) - rrs.getRunOnSlave()-null2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:180)) - node.getRunOnSlave()1-null2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:182)) - node.getRunOnSlave()2-null2017-07-07 06:28:24.474 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:96)) - rrs.getRunOnSlave() null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:127)) - rrs.getRunOnSlave() null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBPool.getRWBanlanceCon(PhysicalDBPool.java:456)) - select read source hostS1 for dataHost:localhost12017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:180)) - node.getRunOnSlave()1-null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:182)) - node.getRunOnSlave()2-null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:96)) - rrs.getRunOnSlave() null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:127)) - rrs.getRunOnSlave() null就是这了我们可以看到select read source hostS1 for dataHost:localhost1来至哪个服务器2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBPool.getRWBanlanceCon(PhysicalDBPool.java:456)) - select read source hostS1 for dataHost:localhost12017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:180)) - node.getRunOnSlave()1-null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.mysql.nio.handler.MultiNodeQueryHandler.execute(MultiNodeQueryHandler.java:182)) - node.getRunOnSlave()2-null2017-07-07 06:28:24.475 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection(PhysicalDBNode.java:96)) - rrs.getRunOnSlave() null2017-07-07 06:28:24.476 DEBUG [$_NIOREACTOR-29-RW] (io.mycat.backend.datasource.PhysicalDBNode.getConnection如果配置不小心错了，可以用docker cp 复制到镜像里，然后重启镜像docker cp /usr/mycat/mycat/conf 61e74eee274d9d0f0404a572dec1d14c8b03dfd480e13d3c96fa04c534df0556:/var/local/mycat/confdocker restart 61e74eee274</code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx rewrite模块深入浅出详解</title>
      <link href="/p/eee93e1e/"/>
      <url>/p/eee93e1e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="ewrite模块（ngx-http-rewrite-module）"><a href="#ewrite模块（ngx-http-rewrite-module）" class="headerlink" title="ewrite模块（ngx_http_rewrite_module）"></a>ewrite模块（ngx_http_rewrite_module）</h5><p>nginx通过ngx_http_rewrite_module模块支持url重写、支持if条件判断，但不支持else。另外该模块需要PCRE支持，应在编译nginx时指定PCRE支持。根据相关变量重定向和选择不同的配置，从一个location跳转到另一个location，不过这样的循环最多可以执行10次，超过后nginx将返回500错误。同时，重写模块包含set指令，来创建新的变量并设其值，这在有些情景下非常有用的，如记录条件标识、传递参数到其他location、记录做了什么等等。学习rewrite之前要对正则表达式要很熟悉，下面先给出一些常用的正则表达式元字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.     :匹配除换行符以外的任意字符</span><br><span class="line">?     :重复0次或1次</span><br><span class="line">+     :重复1次或更多次</span><br><span class="line">*     :重复0次或更多次</span><br><span class="line">\d    :匹配数字</span><br><span class="line">^     :匹配字符串的开始字符</span><br><span class="line">$     :匹配字符串的结束字符</span><br><span class="line">&#123;n&#125;   :重复n次</span><br><span class="line">&#123;n,&#125;  :重复n次或更多次</span><br><span class="line">[c]   :匹配单个字符c</span><br><span class="line">[a-z] :匹配a-z小写字母的任意一个</span><br></pre></td></tr></table></figure><p>在rewrite中，如果使用小括号()，那么在小括号之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容，后面会说到。</p><h6 id="Rewrite模块指令"><a href="#Rewrite模块指令" class="headerlink" title="Rewrite模块指令"></a>Rewrite模块指令</h6><p>1）break</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: break;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>此指令的意思是停止执行当前虚拟主机的后续rewrite指令集。使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ($slow) &#123;</span><br><span class="line">     limit_rate 10k;</span><br><span class="line">     break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）if  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: if (condition) &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure><p>对给定的条件（condition）进行判断，如果条件为真，大括号内的rewrite指令将被执行。</p><p>条件(conditon)可以是如下任何操作：</p><ul><li><ol><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false；</li></ol></li><li><ol start="2"><li>使用“=”和“!=”比较一个变量和字符串；</li></ol></li><li><ol start="3"><li>使用“<del>”做正则表达式匹配，“</del>*”做不区分大小写的正则匹配，“!~”做区分大小写的正则不匹配；</li></ol></li><li><ol start="4"><li>使用“-f”和“!-f” 检查一个文件是否存在；</li></ol></li><li><ol start="5"><li>使用“-d”和“!-d”检查一个目录是否存在；</li></ol></li><li><ol start="6"><li>使用“-e”和“!-e”检查一个文件、目录、符号链接是否存在；</li></ol></li><li><ol start="7"><li>使用“-x”和“ !-x”检查一个文件是否可执行；<br>如下示例：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果UA包含&quot;MSIE&quot;，rewrite请求到&#x2F;msid&#x2F;目录下</span><br><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ &#x2F;msie&#x2F;$1 break;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果cookie匹配正则，设置变量$id等于正则引用部分</span><br><span class="line">if ($http_cookie ~* &quot;id&#x3D;([^;]+)(?:;|$)&quot;) &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;给某个访问IP返回403</span><br><span class="line">if ( $remote_addr &#x3D; &quot;202\.38\.78\.85&quot; )&#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span><br><span class="line">if ($request_method &#x3D; POST) &#123;</span><br><span class="line">    return 405;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果$slow可以通过set指令设置，则进行限速处理</span><br><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">    break;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;如果query string中包含&quot;post&#x3D;140&quot;，则永久重定向到example.com</span><br><span class="line">if ($args ~ post&#x3D;140)&#123;</span><br><span class="line">    rewrite ^ http:&#x2F;&#x2F;example.com&#x2F; permanent;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;防盗链</span><br><span class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123;</span><br><span class="line">    valid_referers none blocked www.baidu.com www.ywnds.com;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）return</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: return code [text];</span><br><span class="line">        return code URL;</span><br><span class="line">        return URL;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>停止处理并为客户端返回状态码，非标准的444状态码将关闭连接，不发送任何响应头。可以使用的状态码有：204，400，402-406，408，410, 411, 413, 416与500-504。如果状态码附带文字段落，该文本将被放置在响应主体。相反，如果状态码后面是一个URL，该URL将成为location头部值。没有状态码的URL将被视为一个302状态码。</p><p>4）rewrite</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: rewrite regex replacement [flag];</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>rewrite指令的功能就是，使用nginx提供的全局变量或自己设置的变量，然后结合正则表达式和标志位实现url重写以及重定向。rewrite指令只能放在server、location或if中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <a href="http://ywnds.com/a/we/index.php?id=1&amp;u=str，只对/a/we/index.php重写，语法如上面所示。" target="_blank" rel="noopener">http://ywnds.com/a/we/index.php?id=1&amp;u=str，只对/a/we/index.php重写，语法如上面所示。</a></p><p>如果想对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p><p>或许看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p><p>1）处理在server级别中定义的模块指令；</p><p>2）为请求查找location；</p><p>3）处理在选中的location中定义的模块指令，如果指令改变了URI，按新的URI查找location。这个循环至多重复10次，之后nginx返回错误500 (Internal Server Error)；</p><p>如果一个URI匹配了rewrite指令指定的正则表达式（regex），则URI就按照replacement进行重写，而rewrite按配置文件中出现的顺序执行。其中flag标志可以停止继续处理。如果replacement以”http://”或”https://”开始，将不再继续处理，那么这个重定向将直接返回给客户端。</p><p>flag可以是如下参数：</p><p>last，完成该rewrite规则的执行后，停止处理后续rewrite指令集；然后查找匹配改变后URI的新location；</p><p>break，完成该rewrite规则的执行后，停止处理后续rewrite指令集，并不再重新查找；但是当前location内剩余非rewrite语句和location外的的非rewrite语句可以执行；</p><p>redirect，返回302临时重定向，地址栏会显示跳转后的地址；</p><p>permanent，返回301永久重定向，地址栏会显示跳转后的地址；即表示如果客户端不清理浏览器缓存，那么返回的结果将永久保存在客户端浏览器中了。</p><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里last和break区别有点难以理解：</p><p>1）last一般写在server和if中，而break一般使用在location中；</p><p>2）last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配；</p><p>3）break和last都能组织继续执行后面的rewrite指令。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     ...</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;media&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.mp3 last;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;audio&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.ra last;</span><br><span class="line">     return 403;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这些rewrite放到“/download/”路径，那么location如下所示，这时应使用break而不是last，使用last将循环10次匹配，然后返回500错误:   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;download&#x2F; &#123;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;media&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.mp3 break;</span><br><span class="line">     rewrite ^(&#x2F;download&#x2F;.*)&#x2F;audio&#x2F;(.*)..*$ $1&#x2F;mp3&#x2F;$2.ra break;</span><br><span class="line">     return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于重写后的URL（replacement）包含原请求的请求参数，原URL的?后的内容。如果不想带原请求的参数，可以在replacement后加一个问号。如下，我们加了一个自定义的参数user=$1,然后在结尾处放了一个问号?，把原请求的参数去掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;users&#x2F;(.*)$ &#x2F;show?user&#x3D;$1? last;</span><br></pre></td></tr></table></figure><p>注: 对花括号“}”或“;”来说，使用时需要用双引号或单引号包围。因为他们既能用在重定向的正则表达式里，也是用在配置文件里分割代码块, 为了避免冲突, 正则表达式里带花括号的话，应该用双引号（或者单引号）包围。比如，要将类似以下的URI：”/photos/123456″重定向到”/path/to/photos/12/1234/123456.png”可以用以下方法 (注意双引号):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite &quot;&#x2F;photos&#x2F;([0-9] &#123;2&#125;)([0-9] &#123;2&#125;)([0-9] &#123;2&#125;)&quot; &#x2F;path&#x2F;to&#x2F;photos&quot;</span><br></pre></td></tr></table></figure><p>5）set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: set $variable value;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location, if</span><br></pre></td></tr></table></figure><p>定义一个变量并赋值，值可以是文本，变量或者文本变量混合体。</p><p>6）rewrite_log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: rewrite_log on | off;</span><br><span class="line">Default:rewrite_log off;</span><br><span class="line">Context:http, server, location, if</span><br></pre></td></tr></table></figure><p>开启或关闭以notice级别打印rewrite处理日志到error log文件。nginx打开rewrite log的例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rewrite_log on;                        &#x2F;&#x2F;打开rewrite log</span><br><span class="line">error_log logs&#x2F;xxx.error.log notice;   &#x2F;&#x2F;把error log的级别调整为notice</span><br></pre></td></tr></table></figure><p>7）uninitialized_variable_warn  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: uninitialized_variable_warn on | off;</span><br><span class="line">Default:uninitialized_variable_warn on;</span><br><span class="line">Context:http, server, location, if</span><br></pre></td></tr></table></figure><p>控制是否输出为初始化的变量到日志。</p><p>重写规则组成部分</p><p>第一部分：任何重写规则的第一部分都是一个正则表达式</p><p>正则表达式可以使用括号来捕获，后续可以根据位置来将其引用，位置变量值取决于捕获正则表达式中的顺序，$1引用第一个括号中的值，$2引用第二个括号中的值，以此类推。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^&#x2F;images&#x2F;([a-z]&#123;2&#125;)&#x2F;([a-z0-9]&#123;5&#125;)&#x2F;(.*)\.(png|jpg|gif)$</span><br></pre></td></tr></table></figure><p>$1是两个小写字母组成的字符串，$2是由小写字母和0到9的数字组成的5个字符的字符串，$3将是个文件名，$4是png、jpg、gif中的其中一个。</p><p>第二部分：重写规则的第二部分是URI</p><p>当重写规则第一部分被匹配到了之后，则请求被改写，那么该URI可能包含正则表达式中的捕获的位置参数或这个级别下的nginx任何配置变量。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;data?file&#x3D;$3.$4</span><br></pre></td></tr></table></figure><p>如果这个URI不匹配nginx配置的任何location，那么将给客户端返回301(永久重定向)或302(临时重定向)的状态码来表示重定向类型。该状态码可以通过第三个参数来明确指定。</p><p>第三部分：重写规则的第三部分就是标记（flag）</p><p>第三部分也就是尾部的标记（flag）， last标记将导致重写后的URI搜索匹配nginx的其他location，最多可循环10次。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite &#39;^&#x2F;images&#x2F;([a-z]&#123;2&#125;)&#x2F;([a-z0-9]&#123;5&#125;)&#x2F;(.*)\.(png|jpg|gif)$&#39; &#x2F;data?file&#x3D;$3.$4 last;</span><br></pre></td></tr></table></figure><p>全局变量</p><p>下面是可以用作if判断的全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$args               #这个变量等于请求行中的参数，同$query_string;</span><br><span class="line">$content_length     #请求头中的Content-length字段;</span><br><span class="line">$content_type       #请求头中的Content-Type字段;</span><br><span class="line">$document_root      #当前请求在root指令中指定的值，如:root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">$host               #请求主机头字段，否则为服务器名称;</span><br><span class="line">$http_user_agent    #客户端agent信息;</span><br><span class="line">$http_cookie        #客户端cookie信息;</span><br><span class="line">$limit_rate         #这个变量可以限制连接速率;</span><br><span class="line">$request_method     #客户端请求的动作，通常为GET或POST;</span><br><span class="line">$remote_addr        #客户端的IP地址;</span><br><span class="line">$remote_port        #客户端的端口;</span><br><span class="line">$remote_user        #已经经过Auth Basic Module验证的用户名;</span><br><span class="line">$request_filename   #当前请求的文件路径，由root或alias指令与URI请求生成;</span><br><span class="line">$scheme             #HTTP方法（如http，https）;</span><br><span class="line">$server_protocol    #请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1;</span><br><span class="line">$server_addr        #服务器地址，在完成一次系统调用后可以确定这个值;</span><br><span class="line">$server_name        #服务器名称;</span><br><span class="line">$server_port        #请求到达服务器的端口号;</span><br><span class="line">$request_uri        #包含请求参数的原始URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”;</span><br><span class="line">$uri                #不带请求参数的当前URI，$uri不包含主机名，如”&#x2F;foo&#x2F;bar.html”;</span><br><span class="line">$document_uri       #与$uri相同,例：http:&#x2F;&#x2F;localhost:88&#x2F;test1&#x2F;test2&#x2F;test.php;</span><br></pre></td></tr></table></figure><p>例如：<a href="http://localhost:88/test1/test2/test.php这个URL，其中：" target="_blank" rel="noopener">http://localhost:88/test1/test2/test.php这个URL，其中：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$host：localhost</span><br><span class="line">$server_port：88</span><br><span class="line">$request_uri：http:&#x2F;&#x2F;localhost:88&#x2F;test1&#x2F;test2&#x2F;test.php</span><br><span class="line">$document_uri：&#x2F;test1&#x2F;test2&#x2F;test.php</span><br><span class="line">$document_root：&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">$request_filename：&#x2F;var&#x2F;www&#x2F;html&#x2F;test1&#x2F;test2&#x2F;test.php</span><br></pre></td></tr></table></figure><p>Rewrite模块使用实例</p><p>1）使用rewrite指令把访问80端口的请求重定向到443</p><p>对于HTTPS网站，一般最少需要定义两个虚拟主机，一个是使用80的虚拟主机，另一个就是使用443端口的虚拟主机了。比如在浏览器输入<a href="http://www.ywnds.com（http://www.ywnds.com）会自动跳转到https://www.ywnds.com。" target="_blank" rel="noopener">www.ywnds.com（http://www.ywnds.com）会自动跳转到https://www.ywnds.com。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^(.*)$ https:&#x2F;&#x2F;www.ywnds.com$uri redirect;</span><br></pre></td></tr></table></figure><p>这种跳转就是302临时重定向跳转，如果把flag变成permanent就成了301永久重定向跳转了。</p><p>2）作为重写规则的一部分，传递新的查询字符串参数是使用重写规则的目标之一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;images&#x2F;(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ &#x2F;resizer&#x2F;$1.$4?width&#x3D;$2&amp;height&#x3D;$3? last;</span><br></pre></td></tr></table></figure><p>3）使用rewrite模块禁止用户代理</p><p>Nginx可以通过各种方式来限制访问，例如NGINX基本Http认证、allow/deny等等，这些都是前文提过的，下面来看看nginx如何通过用户代理来禁止访问。</p><p>user agent是什么?</p><p>简单来说告诉服务器你当前使用的是什么浏览器、工具等来访问我的。例如火狐、chrome、wget、curl等浏览器或工具。使用$http_user_agent变量就可以获取到用户代理，一般在定义日志格式时都会使用这个变量，把用户代理记录到日志中去。</p><p>如何禁止特定UA？</p><p>我们不希望被使用wget或者curl来下载我的文件，怎么做呢？这里就可以使用rewrite模块了，编辑nginx配置文件，以下内容放在http配置段，那么整个nginx都生效。如果放到server里，那么一个域名生效，你放哪，哪就有效！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~* (curl) ) &#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁止多个UA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~* (wget|curl) ) &#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx重写规则说起来挺简单的，做起来就难，重点在于正则表达式，同时，还需要考虑到nginx执行顺序。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx expires配置详解</title>
      <link href="/p/492994d9/"/>
      <url>/p/492994d9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>expires起到控制页面缓存的作用，合理的配置expires可以减少很多服务器的请求</p><p>要配置expires，可以在http段中或者server段中或者location段中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.(gif|jpg|jpeg|png|bmp|ico)$ &#123;</span><br><span class="line">           root &#x2F;var&#x2F;www&#x2F;img&#x2F;;</span><br><span class="line">           expires 30d;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>控制图片等过期时间为30天，当然这个时间可以设置的更长。具体视情况而定</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.(wma|wmv|asf|mp3|mmf|zip|rar|swf|flv)$ &#123;</span><br><span class="line">               root &#x2F;var&#x2F;www&#x2F;upload&#x2F;;</span><br><span class="line">               expires max;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>expires 指令可以控制 HTTP 应答中的“ Expires ”和“ Cache-Control ”的头标（起到控制页面缓存的作用）</p><p>语法：expires [time|epoch|max|pff]</p><p>默认值：off</p><p>expires指令控制HTTP应答中的“Expires”和“Cache-Control”Header头部信息，启动控制页面缓存的作用</p><p>time:可以使用正数或负数。“Expires”头标的值将通过当前系统时间加上设定time值来设定。</p><p>time值还控制”Cache-Control”的值：</p><p>负数表示no-cache</p><p>正数或零表示max-age=time</p><p>epoch：指定“Expires”的值为 1 January,1970,00:00:01 GMT</p><p>max:指定“Expires”的值为31 December2037 23:59:59GMT,”Cache-Control”的值为10年。</p><p>-1：指定“Expires”的值为当前服务器时间-1s，即永远过期。</p><p>off：不修改“Expires”和”Cache-Control”的值</p><p>expires使用了特定的时间，并且要求服务器和客户端的是中严格同步。</p><p>而Cache-Control是用max-age指令指定组件被缓存多久。</p><p>对于不支持http1.1的浏览器，还是需要expires来控制。所以最好能指定两个响应头。但HTTP规范规定max-age指令将重写expires头。</p><p>nginx 静态资源缓存设置<br>May 13, 2018<br>nginx 静态资源缓存 常用配置示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~.*\.(js|css|html|png|jpg)$ &#123;</span><br><span class="line">    expires 3d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 nginx 静态资源缓存 说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">expires 3d; &#x2F;&#x2F; 表示缓存 3 天</span><br><span class="line"></span><br><span class="line">expires 3h; &#x2F;&#x2F; 表示缓存 3 小时</span><br><span class="line"></span><br><span class="line">expires max; &#x2F;&#x2F; 表示缓存 10 年</span><br><span class="line"></span><br><span class="line">expires -1; &#x2F;&#x2F; 表示永远过期。</span><br></pre></td></tr></table></figure><p>如果设置为 -1 在 js、css 等静态文件在没有修改的情况下返回的是 http 304.</p><p>如果修改返回 http 200</p><p>http 304：自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</p><p>http 200：服务器已成功处理了请求，这表示服务器提供了请求的内容。</p><p>如果不想让代理或浏览器缓存，加 no-cache 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~.*\.(js|css|html|png|jpg)$ &#123;</span><br><span class="line">    add_header Cache-Control no-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样浏览器 F5 刷新时，nginx 静态资源缓存 设置返回的状态码就是 http 200，而不是 http 304</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> expires </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的配置</title>
      <link href="/p/b0225828/"/>
      <url>/p/b0225828/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a><strong>常用的命令</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nginx -h   # 帮助</span><br><span class="line">nginx -t   # 验证配置文件的正确性</span><br><span class="line">nginx -v   # 查看nginx的版本</span><br><span class="line">nginx -c filename  # 按指定的配置文件启动，默认的路径conf&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">nginx -s reload  # 重新载入配置文件</span><br><span class="line">nginx -s reopen  # 重启nginx</span><br><span class="line">nginx -s stop    # 关闭nginx</span><br><span class="line">nginx -s quit    # 退出</span><br></pre></td></tr></table></figure><h1 id="nginx的配置文件的详解"><a href="#nginx的配置文件的详解" class="headerlink" title="nginx的配置文件的详解"></a>nginx的配置文件的详解</h1><pre><code>nginx的配置分为四个部分：main(全区设置)，server(主机配置)，upstream(负载均衡服务器设置)，和location(URL匹配特定位置设置)。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">#定义Nginx运行的用户和用户组</span><br><span class="line">user www www;</span><br><span class="line">#pid文件</span><br><span class="line">#进程文件</span><br><span class="line">pid &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">#&#x3D;&#x3D;worker进程数，通常设置等同于CPU数量，auto为自动检测</span><br><span class="line">worker_processes 8;</span><br><span class="line">worker_processes auto;</span><br><span class="line">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class="line">#&#x3D;&#x3D;worker进程打开最大文件数，可CPU*10000设置</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">#worker_rlimit_nofile 100000;</span><br><span class="line">#全局错误日志</span><br><span class="line">error_log  logs&#x2F;error.log;</span><br><span class="line"># error_log  logs&#x2F;error.log  info; # 可以设置级别</span><br><span class="line"></span><br><span class="line"># 设置前台运行，默认后台运行</span><br><span class="line">daemon off;</span><br><span class="line"></span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#events模块中包含nginx中所有处理连接的设置</span><br><span class="line">events &#123;</span><br><span class="line">    #&#x3D;&#x3D;worker进程同时打开的最大连接数，可CPU*2048设置</span><br><span class="line">    worker_connections 2048;</span><br><span class="line">    #&#x3D;&#x3D;告诉nginx收到一个新链接通知后接受尽可能多的链接</span><br><span class="line">    multi_accept on;</span><br><span class="line">    #&#x3D;&#x3D;设置用于复用客户端线程的轮训方法</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#http模块控制着nginx http处理的所有核心特性</span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types; #文件扩展名与文件类型映射表</span><br><span class="line">    default_type application&#x2F;octet-stream; #默认文件类型</span><br><span class="line">    #charset utf-8; #默认编码</span><br><span class="line">    server_names_hash_bucket_size 128;     #服务器名字的hash表大小</span><br><span class="line">    #上传文件大小限制</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line">    #&#x3D;&#x3D;允许客户端请求的最大单文件字节数</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line">    #&#x3D;&#x3D;冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line">    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    tcp_nopush on; #防止网络阻塞</span><br><span class="line">    tcp_nodelay on; #防止网络阻塞</span><br><span class="line">    keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class="line">    </span><br><span class="line">    #日志格式设定</span><br><span class="line">    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span><br><span class="line">    #定义本虚拟主机的访问日志</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    #&#x3D;&#x3D;设置nginx采用gzip压缩的形式发送数据，减少发送数据量，但会增加请求处理时间及CPU处理时间，需要权衡</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k; #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k; #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    #&#x3D;&#x3D;设置数据压缩等级，1-9之间，9最慢压缩比最大</span><br><span class="line">    gzip_comp_level 2; #压缩等级</span><br><span class="line">    #压缩类型，默认就已经包含text&#x2F;html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_types text&#x2F;plain text&#x2F;css text&#x2F;xml text&#x2F;javascript  application&#x2F;json application&#x2F;x-javascript application&#x2F;xml application&#x2F;xml+rss</span><br><span class="line">    #&#x3D;&#x3D;加vary给代理服务器使用，针对有的浏览器支持压缩，有个不支持，根据客户端的HTTP头来判断是否需要压缩</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m; </span><br><span class="line">    #nginx在压缩资源之前，先查找是否有预先gzip处理过的资源</span><br><span class="line">    #!gzip_static on;</span><br><span class="line">    #为指定的客户端禁用gzip功能</span><br><span class="line">    gzip_disable &quot;MSIE[1-6]\.&quot;;</span><br><span class="line">    #允许或禁止压缩基于请求和相应的响应流，any代表压缩所有请求</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    #&#x3D;&#x3D;设置对数据启用压缩的最少字节数，如果请求小于10240字节则不压缩，会影响请求速度</span><br><span class="line">    gzip_min_length 10240;</span><br><span class="line"></span><br><span class="line">    #&#x3D;&#x3D;开发缓存的同时也指定了缓存文件的最大数量，20s如果文件没有请求则删除缓存</span><br><span class="line">    open_file_cache max&#x3D;100000 inactive&#x3D;20s;</span><br><span class="line">    #&#x3D;&#x3D;指多长时间检查一次缓存的有效信息</span><br><span class="line">    open_file_cache_valid 60s;</span><br><span class="line">    #&#x3D;&#x3D;文件缓存最小的访问次数，只有访问超过5次的才会被缓存</span><br><span class="line">    open_file_cache_min_uses 5;</span><br><span class="line">    #当搜索一个文件时是否缓存错误信息</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line"></span><br><span class="line">    #&#x3D;&#x3D;允许客户端请求的最大单文件字节数</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line">    #&#x3D;&#x3D;冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    upstream blog.ha97.com &#123;</span><br><span class="line">    #ip_hash;</span><br><span class="line">    #weight参数表示权重值，权值越高被分配到的几率越大</span><br><span class="line">    server 192.168.80.121:80 weight&#x3D;3;</span><br><span class="line">    server 192.168.80.122:80 weight&#x3D;2;</span><br><span class="line">    server 192.168.80.123:80 weight&#x3D;3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #对 &quot;&#x2F;&quot; 启用反向代理</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    #以下是一些反向代理的配置，可选。</span><br><span class="line">    #允许客户端请求的最大单文件字节数</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">    client_body_buffer_size 128k;</span><br><span class="line">    #&#x3D;&#x3D;nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">    proxy_connect_timeout 60;</span><br><span class="line">    #&#x3D;&#x3D;连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">    proxy_read_timeout 120;</span><br><span class="line">    #&#x3D;&#x3D;后端服务器数据回传时间(代理发送超时)</span><br><span class="line">    proxy_send_timeout 20;</span><br><span class="line">    #&#x3D;&#x3D;设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">    proxy_buffer_size 32k;</span><br><span class="line">    #&#x3D;&#x3D;proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">    proxy_buffers 4 128k;</span><br><span class="line">    #&#x3D;&#x3D;高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">    proxy_busy_buffers_size 256k;</span><br><span class="line">    #&#x3D;&#x3D;设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">    proxy_temp_file_write_size 256k;</span><br><span class="line">    #&#x3D;&#x3D;1G内存缓冲空间，3天不用删除，最大磁盘缓冲空间2G</span><br><span class="line">    proxy_cache_path &#x2F;home&#x2F;cache levels&#x3D;1:2 keys_zone&#x3D;cache_one:1024m inactive&#x3D;3d max_size&#x3D;2g;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定负载均衡服务器列表</span><br><span class="line">    upstream nginx.test.com&#123;</span><br><span class="line">        #后端服务器访问规则</span><br><span class="line">        #ip_hash;</span><br><span class="line">        #weight参数表示权重值，权值越高被分配到的几率越大</span><br><span class="line">        #server 10.11.12.116:80 weight&#x3D;5;</span><br><span class="line">        #PC_Local</span><br><span class="line">        server 10.11.12.116:80;</span><br><span class="line">        #PC_Server</span><br><span class="line">        server 10.11.12.112:80;</span><br><span class="line">        #Notebook</span><br><span class="line">        #server 10.11.12.106:80;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #虚拟主机设定模块（挂载多个站点，只需要配置多个server及upstream节点即可）</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听80端口</span><br><span class="line">        listen 80;</span><br><span class="line">        #定义使用nginx.test.com访问</span><br><span class="line">        server_name nginx.test.com;</span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log logs&#x2F;nginx.test.com.access.log;</span><br><span class="line">        </span><br><span class="line">        #默认请求</span><br><span class="line">        # 语法规则：location [&#x3D;|~|~*|^~] &#x2F;uri&#x2F; &#123;...&#125; 先匹配普通location，在匹配正则location</span><br><span class="line">        # &#x3D; 开头表示精确匹配</span><br><span class="line">        # ^~ 开头表示uri以某个常规字符串开头，理解为匹配url路径即可，无需考虑编解码</span><br><span class="line">        # ~ 开头表示区分大小写的正则匹配</span><br><span class="line">        # ~* 开头表示不区分大小写的正则匹配</span><br><span class="line">        # !~ 开头表示区分大小写的不匹配的正则</span><br><span class="line">        # !~* 开头表示不区分大小写的不匹配的正则</span><br><span class="line">        # &#x2F; 通用匹配，任何请求都会被匹配到</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            #限制IP访问</span><br><span class="line">            deny 192.168.0.2；</span><br><span class="line">            allow 192.168.0.0&#x2F;24;</span><br><span class="line">            allow 192.168.1.1;</span><br><span class="line">            deny all;</span><br><span class="line">            #定义服务器的默认网站根目录位置</span><br><span class="line">            root html;</span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">            #定义后端负载服务器组</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;nginx.test.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #定义错误提示页面</span><br><span class="line">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^&#x2F;(images|javascript|js|css|flash|media|static)&#x2F;&#123;</span><br><span class="line">            root &#x2F;var&#x2F;www&#x2F;virtual&#x2F;htdocs;</span><br><span class="line">            #过期时间1天</span><br><span class="line">            expires 1d;</span><br><span class="line">            #关闭媒体文件日志</span><br><span class="line">            access_log off;</span><br><span class="line">            log_not_found off;</span><br><span class="line">        &#125;</span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location &#x2F;NginxStatus &#123;</span><br><span class="line">            #!stub_status on; #无此关键字</span><br><span class="line">            access_log off;</span><br><span class="line">            auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file conf&#x2F;htpasswd;</span><br><span class="line">        &#125;</span><br><span class="line">        #禁止访问的文件.htxxx</span><br><span class="line">        location ~ &#x2F;\.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #网站较多的情况下ngxin又不会请求瓶颈可以考虑挂多个站点，并把虚拟主机配置单独放在一个文件内，引入进来</span><br><span class="line">    #include website.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对域名的匹配规则"><a href="#对域名的匹配规则" class="headerlink" title="对域名的匹配规则"></a>对域名的匹配规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server_name location;      # 匹配本地主机ip；</span><br><span class="line">server_name www.baidu.com; # 精确配置  </span><br><span class="line">server_name *.baidu.com;   # 以通配符开头的配置  </span><br><span class="line">server_name baidu.*;       # 以通配符结尾的配置  </span><br><span class="line">server_name  ~^(?&lt;user&gt;.+)\.example\.net$;  #正则的配置，必须以波浪线为开头</span><br></pre></td></tr></table></figure><h1 id="路由对location的匹配规则"><a href="#路由对location的匹配规则" class="headerlink" title="路由对location的匹配规则"></a>路由对location的匹配规则</h1><h4 id="贪婪原则：匹配尽可能长的路径；"><a href="#贪婪原则：匹配尽可能长的路径；" class="headerlink" title="贪婪原则：匹配尽可能长的路径；"></a>贪婪原则：匹配尽可能长的路径；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;data&#x2F;www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;images&#x2F; &#123;</span><br><span class="line">        root &#x2F;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># &#x2F;images&#x2F;匹配到第二个；</span><br></pre></td></tr></table></figure><h4 id="通配规则"><a href="#通配规则" class="headerlink" title="通配规则"></a>通配规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以&#x3D;开头，表示精确匹配；</span><br><span class="line">以^~开头，表示uri以某个常规字符串开头，不是正则匹配；</span><br><span class="line">以~开头，表示区分大小写的正则匹配；</span><br><span class="line">以~*开头，表示不区分大小写的正则匹配；</span><br><span class="line">&#x2F;，表示通用匹配, 如果没有其它匹配,任何请求都会匹配到；</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如果有两个开头一样的路由，有可能匹配不到</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line"></span><br><span class="line">location &#x2F;eeg</span><br><span class="line"></span><br><span class="line">location &#x2F;eegabc</span><br><span class="line"></span><br><span class="line"># 上面会造成&#x2F;eegabc匹配失败</span><br></pre></td></tr></table></figure><h1 id="nginx的日志设置规则"><a href="#nginx的日志设置规则" class="headerlink" title="nginx的日志设置规则"></a>nginx的日志设置规则</h1><h4 id="主要分为access-log和error-log"><a href="#主要分为access-log和error-log" class="headerlink" title="主要分为access_log和error_log;"></a>主要分为access_log和error_log;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">access log : 记录了哪些用户，哪些页面以及用户浏览器、ip和其他的访问信息</span><br><span class="line">默认值: access_log logs&#x2F;access.log combined;  # 表示配置的路径和格式</span><br><span class="line">配置段: http, server, location, if in location, limit_except</span><br><span class="line"></span><br><span class="line">error log : 记录服务器错误日志</span><br><span class="line">默认值: error_log logs&#x2F;error.log error;  # 表示配置的路径和级别，有[debug | info | notice | warn | error | crit | alert | emerg]八个级别;</span><br><span class="line">配置段: main, http, server, location</span><br></pre></td></tr></table></figure><h1 id="负载均衡的规则"><a href="#负载均衡的规则" class="headerlink" title="负载均衡的规则"></a>负载均衡的规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#设定负载均衡服务器列表</span><br><span class="line">upstream test&#123;</span><br><span class="line">    #后端服务器访问规则</span><br><span class="line">    #ip_hash;   # 根据ip的hash规则分配，主要是当需要会话保持的时候，session是不能共享的；</span><br><span class="line">    #weight参数表示权重值，权值越高被分配到的几率越大，服务器的运算能力有时不是一样的；</span><br><span class="line">    #server 10.11.12.116:80 weight&#x3D;5;</span><br><span class="line">    #PC_Local</span><br><span class="line">    server 10.11.12.116:80 max_fails&#x3D;3 fail_timeout&#x3D;30; </span><br><span class="line">    # max_fails:最多的转发失败的次数，如果转发失败超过次数，就认为该服务器挂掉；</span><br><span class="line">    # fail_timeout：请求失败暂停的服务时间，在这个时间内会暂时放弃转发给该服务器；</span><br><span class="line">    #PC_Server</span><br><span class="line">    server 10.11.12.112:80 down;  # down:暂时不参与负载均衡；</span><br><span class="line">    server 10.11.12.112:80 backup;  # backup:备用服务器，当其他所有的机器忙的时候，会启用备用服务器；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx之proxy_pass指令完全拆解</title>
      <link href="/p/d881e309/"/>
      <url>/p/d881e309/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一、-功能"><a href="#一、-功能" class="headerlink" title="一、 功能"></a>一、 功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nginx 的ngx_stream_proxy_module和ngx_http_proxy_module两个模块中，都有 proxy_pass 指令。</span><br><span class="line">其主要功能是为后端做代理，协议转发，请求转发等。</span><br></pre></td></tr></table></figure><h2 id="二、-用法和区别"><a href="#二、-用法和区别" class="headerlink" title="二、 用法和区别"></a>二、 用法和区别</h2><ol><li>官网介绍</li></ol><h3 id="ngx-stream-proxy-module-的-proxy-pass"><a href="#ngx-stream-proxy-module-的-proxy-pass" class="headerlink" title="ngx_stream_proxy_module 的 proxy_pass"></a>ngx_stream_proxy_module 的 proxy_pass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：proxy_pass address;</span><br><span class="line">默认值：—</span><br><span class="line">场景：server 段</span><br><span class="line">说明：设置代理服务器的地址。代理地址可以是域名或者IP加端口，也可以是一个UNIX的socket路径</span><br></pre></td></tr></table></figure><h3 id="ngx-http-proxy-module-的-proxy-pass"><a href="#ngx-http-proxy-module-的-proxy-pass" class="headerlink" title="ngx_http_proxy_module 的 proxy_pass"></a>ngx_http_proxy_module 的 proxy_pass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：proxy_pass URL;</span><br><span class="line">默认值：—</span><br><span class="line">场景：location 段，location中的if段，limit_except段</span><br><span class="line">说明：设置后端代理服务器的地址和协议，还可以附加可选的URI映射。协议可以是 http 或者 https。地址可以是域名或者IP，可以附加指定端口，也可以是UNIX的socket路径，路径要放在unix: 和 : 之间</span><br></pre></td></tr></table></figure><h2 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h2><p>从上面的各自说明可以看出两个 proxy_pass 指令都是做后端的代理配置。</p><p>除了应用场景的段不同之外，ngx_stream_proxy_module 的 proxy_pass 只能转发域名或IP加端口的请求，即端口转发。</p><p>ngx_http_proxy_module 的 proxy_pass 除了包含前者的功能外，还可以实现协议转发，如 http 和 https 与 UNIX socket 三者的相互转发，另外还有很实用的URI转发</p><h2 id="3-用法示例"><a href="#3-用法示例" class="headerlink" title="3. 用法示例"></a>3. 用法示例</h2><p>3.1 ngx_stream_proxy_module 的 proxy_pass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line">    proxy_pass 127.0.0.1:8080; # IP+端口转发</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line">    proxy_pass test.com:8080; # 域名+端口转发</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen [::1]:8000;</span><br><span class="line">    proxy_pass unix:&#x2F;tmp&#x2F;stream.socket; # UNIX socket转发</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 ngx_http_proxy_module 的 proxy_pass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line"></span><br><span class="line">    # 正常代理，不修改后端url的</span><br><span class="line">    location &#x2F;some&#x2F;path&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 修改后端url地址的代理（本例后端地址中，最后带了一个斜线)</span><br><span class="line">    location &#x2F;testb &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;www.other.com:8801&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 使用 if in location</span><br><span class="line">    location &#x2F;google &#123;</span><br><span class="line">        if ( $geoip_country_code ~ (RU|CN) ) &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;www.google.hk;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;limit&#x2F; &#123;</span><br><span class="line">        # 没有匹配 limit_except 的，代理到 unix:&#x2F;tmp&#x2F;backend.socket:&#x2F;uri&#x2F;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;unix:&#x2F;tmp&#x2F;backend.socket:&#x2F;uri&#x2F;;;</span><br><span class="line"></span><br><span class="line">        # 匹配到请求方法为: PUT or DELETE, 代理到9080</span><br><span class="line">        limit_except PUT DELETE &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:9080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>ngx_http_proxy_module.proxy_pass 的 URI 转发映射分析1<br>准备文件 /data/www/test/test.php 如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#39;$_SERVER[REQUEST_URI]:&#39; . $_SERVER[&#39;REQUEST_URI&#39;];</span><br></pre></td></tr></table></figure><p>通过查看 $_SERVER[‘REQUEST_URI’] 的值，可以看到每次请求的后端的 request_uri 的值，进行验证。</p><p>Nginx 配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line"></span><br><span class="line">    # 情形A</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;testa&#x2F;aaaa</span><br><span class="line">    # 后端的request_uri为: &#x2F;testa&#x2F;aaaa</span><br><span class="line">    location ^~ &#x2F;testa&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # 情形B</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;testb&#x2F;bbbb</span><br><span class="line">    # 后端的request_uri为: &#x2F;bbbb</span><br><span class="line">    location ^~ &#x2F;testb&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形C</span><br><span class="line">    # 下面这段location是正确的</span><br><span class="line">    location ~ &#x2F;testc &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形D</span><br><span class="line">    # 下面这段location是错误的</span><br><span class="line">    #</span><br><span class="line">    # nginx -t 时，会报如下错误: </span><br><span class="line">    #</span><br><span class="line">    # nginx: [emerg] &quot;proxy_pass&quot; cannot have URI part in location given by regular </span><br><span class="line">    # expression, or inside named location, or inside &quot;if&quot; statement, or inside </span><br><span class="line">    # &quot;limit_except&quot; block in &#x2F;opt&#x2F;app&#x2F;nginx&#x2F;conf&#x2F;vhost&#x2F;test.conf:17</span><br><span class="line">    # </span><br><span class="line">    # 当location为正则表达式时，proxy_pass 不能包含URI部分。本例中包含了&quot;&#x2F;&quot;</span><br><span class="line">    location ~ &#x2F;testd &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801&#x2F;;   # 记住，location为正则表达式时，不能这样写！！！</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形E</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;ccc&#x2F;bbbb</span><br><span class="line">    # 后端的request_uri为: &#x2F;aaa&#x2F;ccc&#x2F;bbbb</span><br><span class="line">    location &#x2F;ccc&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801&#x2F;aaa$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形F</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;namea&#x2F;ddd</span><br><span class="line">    # 后端的request_uri为: &#x2F;test?namea&#x3D;ddd</span><br><span class="line">    location &#x2F;namea&#x2F; &#123;</span><br><span class="line">        rewrite    &#x2F;namea&#x2F;([^&#x2F;]+) &#x2F;test?namea&#x3D;$1 break;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 情形G</span><br><span class="line">    # 访问 http:&#x2F;&#x2F;www.test.com&#x2F;nameb&#x2F;eee</span><br><span class="line">    # 后端的request_uri为: &#x2F;test?nameb&#x3D;eee</span><br><span class="line">    location &#x2F;nameb&#x2F; &#123;</span><br><span class="line">        rewrite    &#x2F;nameb&#x2F;([^&#x2F;]+) &#x2F;test?nameb&#x3D;$1 break;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8801&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;data&#x2F;logs&#x2F;www&#x2F;www.test.com.log;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      8801;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line">    </span><br><span class="line">    root        &#x2F;data&#x2F;www&#x2F;test;</span><br><span class="line">    index       index.php index.html;</span><br><span class="line"></span><br><span class="line">    rewrite ^(.*)$ &#x2F;test.php?u&#x3D;$1 last;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">        fastcgi_pass unix:&#x2F;tmp&#x2F;php-cgi.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;data&#x2F;logs&#x2F;www&#x2F;www.test.com.8801.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结</p><p>情况A和情况B对比，可以看出URI最后的 / 对 URI 映射的影响<br>情况D说明，location 为正则表达式时，proxy_pass 不能包含 URI<br>情况E，可以通过 $request_uri 添加或改变请求的 URI<br>情况F和G通过 rewrite 配合 break 对 URL 和 URI 进行改写</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> proxy_pass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab轻松创建一个Merge Request</title>
      <link href="/p/37369/"/>
      <url>/p/37369/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="简写说明"><a href="#简写说明" class="headerlink" title="## 简写说明"></a>## 简写说明</h3><pre><code>- MR = Merge Request- 主仓 = 组织创建的仓库（下文中是 awesome-php 组织创建的 awesome-one 仓库）</code></pre><h3 id="什么是Merge-Request"><a href="#什么是Merge-Request" class="headerlink" title="什么是Merge Request"></a>什么是Merge Request</h3><pre><code>- 相信很多人都不太懂这个 MR 到底是什么，通俗地说，MR 就是一个 merge 请求。- 创建一个 MR 当然就可以理解为创建一个合并请求。MR 的存在主要是为了权限控制。</code></pre><h3 id="Forking-Workflow"><a href="#Forking-Workflow" class="headerlink" title="Forking Workflow"></a>Forking Workflow</h3><pre><code>- 用 Git 的同学最开始接触的想必是 Git Workflow 吧。- 什么是 Git Workflow？其实就是多人在同一个仓库上进行代码托管，然后仓库存在多个分支，一般来说每个新功能会创建一个分支，然后根据不同的阶段合并到不同环境对应的分支上，对功能需求进行测试、验收以及上线。- 当开发团队规模较小的时候，使用 Git Workflow 无疑是相对适合的，优点是相对灵活。但是当团队人数达到一定程度，项目较多之后，这种工作流就会暴露本身的局限性，权限管理比较混乱。- 这个时候，Forking Workflow 就应运而生了。- 什么是 Forking Workflow ？Forking Workflow 就是存在一个主仓，其他开发人员把主仓 Fork 一份到自己的仓库中，然后在自己的仓库中进行功能开发，开发完成后提交 Merge Request ，然后团队 Review ，确认没问题之后进行合并更新操作。- 相比 Git Workflow ，Forking Workflow 可以更好地管理主仓代码，保证主仓代码的安全、一致性等，且可以杜绝分支过多引发的其他问题。</code></pre><h3 id="怎么创建Merge-Request"><a href="#怎么创建Merge-Request" class="headerlink" title="怎么创建Merge Request"></a>怎么创建Merge Request</h3><p>言归正传，让我们看看怎么创建 MR。在我朋友圈中有大L和小L两位小伙伴，分别使用 Git Workflow 和 Forking Workflow 两种不同的 Git 工作流。中国传统敬老爱幼，那么就由使用 Forking Workflow 的小L为我们演示一下怎么创建一个 MR。</p><h4 id="Forking-Workflow-1"><a href="#Forking-Workflow-1" class="headerlink" title="Forking Workflow"></a>Forking Workflow</h4><p>此时使用 Forking Workflow 的小L同学接到一个需求，小L思路清晰，他首先查看主仓（ awesome-php 名下的 awesome-one 仓库，下文一律使用主仓称呼），然后基于主仓 Fork 一个属于自己的仓库：</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/3xuci.gif"><p>此时小L个人（也就是zmcdbp）名下也有了一个 awesome-one 仓库，小L接着要做的事自然就是 Clone 自己的仓库到本地：</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/opt6u.gif"><p>突然接到的需求需要开发一个 phpinfo 页面，遵循 Forking Workflow 规范的小L的做法是先基于本地的 master 分支衍生一个 feature-phpinfo 的功能分支，然后在该分支上进行开发，开发完成后添加更改的代码到缓存区，提交 commit ：<br> <img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/1ahdl.gif"><br>完成本地提交之后，接下来要进行远程分支的提交，小L提交到了自己名下的仓库中（也就是zmcdbp/aweosme-one），分支名称与本地分支保持同步，方便日后翻阅查找（此处因为小L名下的 awesome-one 仓库中尚未存在 feature-phpinfo 分支，所以在 push 操作的时候需要带上 -u 参数告诉 GitLab 需要创建一个名叫 feature-phpinfo 的远程分支）：</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/8nlll.gif"><p>push 成功之后小L选择了回到 GitLab Web 中查看刚刚提交了更新的仓库：</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/cn083.jpg"><p>小L很开心，因为发现他名下的 awesome-one 仓库 中已经多了一个远程分支 feature-phpinfo。接下来小L要把这个已经开发好的功能分支合并到主仓中以便后续进行功能测试以及产品验收等步骤。首先小L创建了一个 MR （因为本地分支是推送到了小L从主仓中 Fork 出来的个人仓库中，所以创建 MR 的动作也应该在自己仓库的 GitLab Web 页面中进行）：</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/3u644.gif"><p>创建 MR 的页面信息量相当大，懒癌晚期的小L选择了只关注 Title、Description、Source branch、Target branch 以及 Remove source branch when merge request is accept 这几项，如果你比较勤快当然也可以对其他配置项进行详细配置。懒癌晚期的小L关注的这几项配置都是什么呢？Title 当然就是本次 MR 的简要说明，Description 自然就是详细说明，里面可以填写本次合并主要功能以及相关负责人员等（支持 Markdown 噢！），Source branch 英语超赞的你肯定已经猜到这个就是我们要发起合并的分支，Target branch 自然就是接受合并的分支啦，Remove… 说的就是当本次 MR 被接受之后，自动删除发起合并的分支，是不是超贴心！小L对自己比较关注的几项配置进行简单填写后，点击下方的提交按钮，创建 MR 的操作就完成啦！连懒癌晚期的小L都能轻松创建，是不是超简单！</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/wt2xg.gif"><p>但是聪明的你肯定发现了事情似乎并没有这么简单！Target branch 默认是 master 分支并且似乎无法更改，那么如果需要合并到其他如 dev 分支的话该怎么办呢？没关系，点击 Target branch 旁边的 Change branches 就可以对 Source branch 和 Target branch 进行更改啦！（合并请求不单单可以向主仓发起，还可以对自己仓库内存在的两个分支进行发起，或者对主仓派生的其他仓库中的分支发起）</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/vgibb.gif"><p>在 Forking Workflow 中一个 MR 的诞生差不多需要经历的就这么多，当然还有更多细节由于篇幅问题没有一一细说，还请见谅。</p><h3 id="Git-Workflow"><a href="#Git-Workflow" class="headerlink" title="Git Workflow"></a>Git Workflow</h3><p>组织把比较重要的 hello world 需求留给了我们成熟稳重使用 Git Workflow 的大L同学，大L不假思索地访问了主仓的页面并进行了 Clone 操作，然后在本地创建了一个需要进行功能开发的 feature-hello-world 分支。注意，大L是从主仓 Clone，而小L是从自己 Fork 出来的仓库 Clone。</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/3ujuq.gif"><p>接着大L迅速完成了开发工作，与小L的本地提交操作类似，把更改的文件添加到缓存区，然后添加 commit。</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/64rxz.gif"><p>完成了本地提交后，大L选择了把新开发的功能分支推送到远程仓库中。（与小L类似，因为远程仓库中尚未存在与本地同名的分支，所以需要添加 -u 参数创建远程分支）</p><img src= "/img/loading.gif" data-src="http://qiniu.webpages.show/images/6pnyx.gif"><p>完成推送到远程仓库的操作后，大L打开了主仓的页面然后点击旁边出现的 Create Merge Request 按钮来创建一个 MR。进入到创建页面之后，大L的操作就跟小L点击创建 MR 按钮后的操作一致了，在这就不再重复了。（都是姓L的，一样的姓，一样的病【懒癌晚期】）</p>]]></content>
      
      
      <categories>
          
          <category> Gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
